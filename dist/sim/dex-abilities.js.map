{
  "version": 3,
  "sources": ["../../sim/dex-abilities.ts"],
  "sourcesContent": ["import type { PokemonEventMethods, ConditionData } from './dex-conditions';\nimport { assignMissingFields, BasicEffect, toID } from './dex-data';\nimport { Utils } from '../lib/utils';\n\ninterface AbilityEventMethods {\n\tonCheckShow?: (this: Battle, pokemon: Pokemon) => void;\n\tonEnd?: (this: Battle, target: Pokemon & Side & Field) => void;\n\tonStart?: (this: Battle, target: Pokemon) => void;\n}\n\n/* Possible Ability flags */\ninterface AbilityFlags {\n\tbreakable?: 1; // Can be suppressed by Mold Breaker and related effects\n\tcantsuppress?: 1; // Ability can't be suppressed by e.g. Gastro Acid or Neutralizing Gas\n\tfailroleplay?: 1; // Role Play fails if target has this Ability\n\tfailskillswap?: 1; // Skill Swap fails if either the user or target has this Ability\n\tnoentrain?: 1; // Entrainment fails if user has this Ability\n\tnoreceiver?: 1; // Receiver and Power of Alchemy will not activate if an ally faints with this Ability\n\tnotrace?: 1; // Trace cannot copy this Ability\n\tnotransform?: 1; // Disables the Ability if the user is Transformed\n\trollable?: 1;\n}\n\nexport interface AbilityData extends Partial<Ability>, AbilityEventMethods, PokemonEventMethods {\n\tname: string;\n}\n\nexport type ModdedAbilityData = AbilityData | Partial<AbilityData> & { inherit: true };\nexport interface AbilityDataTable { [abilityid: IDEntry]: AbilityData }\nexport interface ModdedAbilityDataTable { [abilityid: IDEntry]: ModdedAbilityData }\n\nexport class Ability extends BasicEffect implements Readonly<BasicEffect> {\n\tdeclare readonly effectType: 'Ability';\n\n\t/** Rating from -1 Detrimental to +5 Essential; see `data/abilities.ts` for details. */\n\treadonly rating: number;\n\treadonly suppressWeather: boolean;\n\treadonly flags: AbilityFlags;\n\tdeclare readonly condition?: ConditionData;\n\n\tconstructor(data: AnyObject) {\n\t\tsuper(data);\n\n\t\tthis.fullname = `ability: ${this.name}`;\n\t\tthis.effectType = 'Ability';\n\t\tthis.suppressWeather = !!data.suppressWeather;\n\t\tthis.flags = data.flags || {};\n\t\tthis.rating = data.rating || 0;\n\n\t\tif (!this.gen) {\n\t\t\tif (this.num >= 268) {\n\t\t\t\tthis.gen = 9;\n\t\t\t} else if (this.num >= 234) {\n\t\t\t\tthis.gen = 8;\n\t\t\t} else if (this.num >= 192) {\n\t\t\t\tthis.gen = 7;\n\t\t\t} else if (this.num >= 165) {\n\t\t\t\tthis.gen = 6;\n\t\t\t} else if (this.num >= 124) {\n\t\t\t\tthis.gen = 5;\n\t\t\t} else if (this.num >= 77) {\n\t\t\t\tthis.gen = 4;\n\t\t\t} else if (this.num >= 1) {\n\t\t\t\tthis.gen = 3;\n\t\t\t}\n\t\t}\n\t\tassignMissingFields(this, data);\n\t}\n}\n\nconst EMPTY_ABILITY = Utils.deepFreeze(new Ability({ id: '', name: '', exists: false }));\n\nexport class DexAbilities {\n\treadonly dex: ModdedDex;\n\treadonly abilityCache = new Map<ID, Ability>();\n\tallCache: readonly Ability[] | null = null;\n\n\tconstructor(dex: ModdedDex) {\n\t\tthis.dex = dex;\n\t}\n\n\tget(name: string | Ability = ''): Ability {\n\t\tif (name && typeof name !== 'string') return name;\n\t\tconst id = toID(name.trim());\n\t\treturn this.getByID(id);\n\t}\n\n\tgetByID(id: ID): Ability {\n\t\tif (id === '') return EMPTY_ABILITY;\n\t\tlet ability = this.abilityCache.get(id);\n\t\tif (ability) return ability;\n\n\t\tif (this.dex.getAlias(id)) {\n\t\t\tability = this.get(this.dex.getAlias(id));\n\t\t} else if (id && this.dex.data.Abilities.hasOwnProperty(id)) {\n\t\t\tconst abilityData = this.dex.data.Abilities[id] as any;\n\t\t\tconst abilityTextData = this.dex.getDescs('Abilities', id, abilityData);\n\t\t\tability = new Ability({\n\t\t\t\tname: id,\n\t\t\t\t...abilityData,\n\t\t\t\t...abilityTextData,\n\t\t\t});\n\t\t\tif (ability.gen > this.dex.gen) {\n\t\t\t\t(ability as any).isNonstandard = 'Future';\n\t\t\t}\n\t\t\tif (this.dex.currentMod === 'gen7letsgo' && ability.id !== 'noability') {\n\t\t\t\t(ability as any).isNonstandard = 'Past';\n\t\t\t}\n\t\t\tif ((this.dex.currentMod === 'gen7letsgo' || this.dex.gen <= 2) && ability.id === 'noability') {\n\t\t\t\t(ability as any).isNonstandard = null;\n\t\t\t}\n\t\t} else {\n\t\t\tability = new Ability({\n\t\t\t\tid, name: id, exists: false,\n\t\t\t});\n\t\t}\n\n\t\tif (ability.exists) this.abilityCache.set(id, this.dex.deepFreeze(ability));\n\t\treturn ability;\n\t}\n\n\tall(): readonly Ability[] {\n\t\tif (this.allCache) return this.allCache;\n\t\tconst abilities = [];\n\t\tfor (const id in this.dex.data.Abilities) {\n\t\t\tabilities.push(this.getByID(id as ID));\n\t\t}\n\t\tthis.allCache = abilities;\n\t\treturn this.allCache;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAuD;AACvD,mBAAsB;AA6Bf,MAAM,gBAAgB,4BAA6C;AAAA,EASzE,YAAY,MAAiB;AAC5B,UAAM,IAAI;AAEV,SAAK,WAAW,YAAY,KAAK,IAAI;AACrC,SAAK,aAAa;AAClB,SAAK,kBAAkB,CAAC,CAAC,KAAK;AAC9B,SAAK,QAAQ,KAAK,SAAS,CAAC;AAC5B,SAAK,SAAS,KAAK,UAAU;AAE7B,QAAI,CAAC,KAAK,KAAK;AACd,UAAI,KAAK,OAAO,KAAK;AACpB,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,KAAK;AAC3B,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,KAAK;AAC3B,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,KAAK;AAC3B,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,KAAK;AAC3B,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,IAAI;AAC1B,aAAK,MAAM;AAAA,MACZ,WAAW,KAAK,OAAO,GAAG;AACzB,aAAK,MAAM;AAAA,MACZ;AAAA,IACD;AACA,6CAAoB,MAAM,IAAI;AAAA,EAC/B;AACD;AAEA,MAAM,gBAAgB,mBAAM,WAAW,IAAI,QAAQ,EAAE,IAAI,IAAI,MAAM,IAAI,QAAQ,MAAM,CAAC,CAAC;AAEhF,MAAM,aAAa;AAAA,EAKzB,YAAY,KAAgB;AAH5B,SAAS,eAAe,oBAAI,IAAiB;AAC7C,oBAAsC;AAGrC,SAAK,MAAM;AAAA,EACZ;AAAA,EAEA,IAAI,OAAyB,IAAa;AACzC,QAAI,QAAQ,OAAO,SAAS,SAAU,QAAO;AAC7C,UAAM,SAAK,sBAAK,KAAK,KAAK,CAAC;AAC3B,WAAO,KAAK,QAAQ,EAAE;AAAA,EACvB;AAAA,EAEA,QAAQ,IAAiB;AACxB,QAAI,OAAO,GAAI,QAAO;AACtB,QAAI,UAAU,KAAK,aAAa,IAAI,EAAE;AACtC,QAAI,QAAS,QAAO;AAEpB,QAAI,KAAK,IAAI,SAAS,EAAE,GAAG;AAC1B,gBAAU,KAAK,IAAI,KAAK,IAAI,SAAS,EAAE,CAAC;AAAA,IACzC,WAAW,MAAM,KAAK,IAAI,KAAK,UAAU,eAAe,EAAE,GAAG;AAC5D,YAAM,cAAc,KAAK,IAAI,KAAK,UAAU,EAAE;AAC9C,YAAM,kBAAkB,KAAK,IAAI,SAAS,aAAa,IAAI,WAAW;AACtE,gBAAU,IAAI,QAAQ;AAAA,QACrB,MAAM;AAAA,QACN,GAAG;AAAA,QACH,GAAG;AAAA,MACJ,CAAC;AACD,UAAI,QAAQ,MAAM,KAAK,IAAI,KAAK;AAC/B,QAAC,QAAgB,gBAAgB;AAAA,MAClC;AACA,UAAI,KAAK,IAAI,eAAe,gBAAgB,QAAQ,OAAO,aAAa;AACvE,QAAC,QAAgB,gBAAgB;AAAA,MAClC;AACA,WAAK,KAAK,IAAI,eAAe,gBAAgB,KAAK,IAAI,OAAO,MAAM,QAAQ,OAAO,aAAa;AAC9F,QAAC,QAAgB,gBAAgB;AAAA,MAClC;AAAA,IACD,OAAO;AACN,gBAAU,IAAI,QAAQ;AAAA,QACrB;AAAA,QAAI,MAAM;AAAA,QAAI,QAAQ;AAAA,MACvB,CAAC;AAAA,IACF;AAEA,QAAI,QAAQ,OAAQ,MAAK,aAAa,IAAI,IAAI,KAAK,IAAI,WAAW,OAAO,CAAC;AAC1E,WAAO;AAAA,EACR;AAAA,EAEA,MAA0B;AACzB,QAAI,KAAK,SAAU,QAAO,KAAK;AAC/B,UAAM,YAAY,CAAC;AACnB,eAAW,MAAM,KAAK,IAAI,KAAK,WAAW;AACzC,gBAAU,KAAK,KAAK,QAAQ,EAAQ,CAAC;AAAA,IACtC;AACA,SAAK,WAAW;AAChB,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": []
}
