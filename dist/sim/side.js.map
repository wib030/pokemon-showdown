{
  "version": 3,
  "sources": ["../../sim/side.ts"],
  "sourcesContent": ["/**\n * Simulator Side\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * There's a lot of ambiguity between the terms \"player\", \"side\", \"team\",\n * and \"half-field\", which I'll try to explain here:\n *\n * These terms usually all mean the same thing. The exceptions are:\n *\n * - Multi-battle: there are 2 half-fields, 2 teams, 4 sides\n *\n * - Free-for-all: there are 2 half-fields, 4 teams, 4 sides\n *\n * \"Half-field\" is usually abbreviated to \"half\".\n *\n * Function naming will be very careful about which term to use. Pay attention\n * if it's relevant to your code.\n *\n * @license MIT\n */\n\nimport { Utils } from '../lib/utils';\nimport type { RequestState } from './battle';\nimport { Pokemon, type EffectState } from './pokemon';\nimport { State } from './state';\nimport { toID } from './dex';\n\n/** A single action that can be chosen. Choices will have one Action for each pokemon. */\nexport interface ChosenAction {\n\tchoice: 'move' | 'switch' | 'instaswitch' | 'revivalblessing' | 'team' | 'shift' | 'pass';// action type\n\tpokemon?: Pokemon; // the pokemon doing the action\n\ttargetLoc?: number; // relative location of the target to pokemon (move action only)\n\tmoveid: string; // a move to use (move action only)\n\tmove?: ActiveMove; // the active move corresponding to moveid (move action only)\n\ttarget?: Pokemon; // the target of the action\n\tindex?: number; // the chosen index in Team Preview\n\tside?: Side; // the action's side\n\tmega?: boolean | null; // true if megaing or ultra bursting\n\tmegax?: boolean | null; // true if megaing x\n\tmegay?: boolean | null; // true if megaing y\n\tzmove?: string; // if zmoving, the name of the zmove\n\tmaxMove?: string; // if dynamaxed, the name of the max move\n\tterastallize?: string; // if terastallizing, tera type\n\tpriority?: number; // priority of the action\n}\n\n/** One single turn's choice for one single player. */\nexport interface Choice {\n\tcantUndo: boolean; // true if the choice can't be cancelled because of the maybeTrapped issue\n\terror: string; // contains error text in the case of a choice error\n\tactions: ChosenAction[]; // array of chosen actions\n\tforcedSwitchesLeft: number; // number of switches left that need to be performed\n\tforcedPassesLeft: number; // number of passes left that need to be performed\n\tswitchIns: Set<number>; // indexes of pokemon chosen to switch in\n\tzMove: boolean; // true if a Z-move has already been selected\n\tmega: boolean; // true if a mega evolution has already been selected\n\tultra: boolean; // true if an ultra burst has already been selected\n\tdynamax: boolean; // true if a dynamax has already been selected\n\tterastallize: boolean; // true if a terastallization has already been inputted\n}\n\nexport interface PokemonSwitchRequestData {\n\t/**\n\t * `` `${sideid}: ${name}` ``\n\t * @see {Pokemon#fullname}\n\t */\n\tident: string;\n\t/**\n\t * Details string.\n\t * @see {Pokemon#details}\n\t */\n\tdetails: string;\n\tcondition: string;\n\tactive: boolean;\n\tstats: StatsExceptHPTable;\n\t/**\n\t * Move IDs for choosable moves. Also includes Hidden Power Type, Frustration/Return power.\n\t */\n\tmoves: ID[];\n\t/** Permanent ability (the one applied on switch-in). */\n\tbaseAbility: ID;\n\titem: ID;\n\tpokeball: ID;\n\t/** Current ability. Only sent in Gen 7+. */\n\tability?: ID;\n\t/** @see https://dex.pokemonshowdown.com/abilities/commander */\n\tcommanding?: boolean;\n\t/** @see https://dex.pokemonshowdown.com/moves/revivalblessing */\n\treviving?: boolean;\n\tteraType?: string;\n\tterastallized?: string;\n}\nexport interface PokemonMoveRequestData {\n\tmoves: { move: string, id: ID, target?: string, disabled?: string | boolean, disabledSource?: string }[];\n\tmaybeDisabled?: boolean;\n\tmaybeLocked?: boolean;\n\ttrapped?: boolean;\n\tmaybeTrapped?: boolean;\n\tcanMegaEvo?: boolean;\n\tcanMegaEvoX?: boolean;\n\tcanMegaEvoY?: boolean;\n\tcanUltraBurst?: boolean;\n\tcanZMove?: AnyObject | null;\n\tcanDynamax?: boolean;\n\tmaxMoves?: DynamaxOptions;\n\tcanTerastallize?: string;\n}\nexport interface DynamaxOptions {\n\tmaxMoves: ({ move: string, target: MoveTarget, disabled?: boolean })[];\n\tgigantamax?: string;\n}\nexport interface SideRequestData {\n\tname: string;\n\t/** Side ID (`p1`, `p2`, `p3`, or `p4`), not the ID of the side's name. */\n\tid: SideID;\n\tpokemon: PokemonSwitchRequestData[];\n\tnoCancel?: boolean;\n}\nexport interface SwitchRequest {\n\twait?: undefined;\n\tteamPreview?: undefined;\n\tforceSwitch: boolean[];\n\tside: SideRequestData;\n\tnoCancel?: boolean;\n\tupdate?: boolean;\n}\nexport interface TeamPreviewRequest {\n\twait?: undefined;\n\tteamPreview: true;\n\tforceSwitch?: undefined;\n\tmaxChosenTeamSize?: number;\n\tside: SideRequestData;\n\tnoCancel?: boolean;\n}\nexport interface MoveRequest {\n\twait?: undefined;\n\tteamPreview?: undefined;\n\tforceSwitch?: undefined;\n\tactive: PokemonMoveRequestData[];\n\tside: SideRequestData;\n\tally?: SideRequestData;\n\tnoCancel?: boolean;\n\tupdate?: boolean;\n}\nexport interface WaitRequest {\n\twait: true;\n\tteamPreview?: undefined;\n\tforceSwitch?: undefined;\n\tside: SideRequestData;\n\tnoCancel?: boolean;\n}\nexport type ChoiceRequest = SwitchRequest | TeamPreviewRequest | MoveRequest | WaitRequest;\n\nexport class Side {\n\treadonly battle: Battle;\n\treadonly id: SideID;\n\t/** Index in `battle.sides`: `battle.sides[side.n] === side` */\n\treadonly n: number;\n\n\tname: string;\n\tavatar: string;\n\tfoe: Side = null!; // set in battle.start()\n\t/** Only exists in multi battle, for the allied side */\n\tallySide: Side | null = null; // set in battle.start()\n\tteam: PokemonSet[];\n\tpokemon: Pokemon[];\n\tactive: Pokemon[];\n\n\tpokemonLeft: number;\n\tzMoveUsed: boolean;\n\t/**\n\t * This will be true in any gen before 8 or if the player (or their battle partner) has dynamaxed once already\n\t *\n\t * Use Side.canDynamaxNow() to check if a side can dynamax instead of this property because only one\n\t * player per team can dynamax on any given turn of a gen 8 Multi Battle.\n\t */\n\tdynamaxUsed: boolean;\n\n\tfaintedLastTurn: Pokemon | null;\n\tfaintedThisTurn: Pokemon | null;\n\ttotalFainted: number;\n\t/** only used by Gen 1 Counter */\n\tlastSelectedMove: ID = '';\n\n\t/** these point to the same object as the ally's, in multi battles */\n\tsideConditions: { [id: string]: EffectState };\n\tslotConditions: { [id: string]: EffectState }[];\n\n\tactiveRequest: ChoiceRequest | null;\n\tchoice: Choice;\n\n\t/**\n\t * In gen 1, all lastMove stuff is tracked on Side rather than Pokemon\n\t * (this is for Counter and Mirror Move)\n\t * This is also used for checking Self-KO clause in Pokemon Stadium 2.\n\t */\n\tlastMove: Move | null;\n\n\tconstructor(name: string, battle: Battle, sideNum: number, team: PokemonSet[]) {\n\t\tconst sideScripts = battle.dex.data.Scripts.side;\n\t\tif (sideScripts) Object.assign(this, sideScripts);\n\n\t\tthis.battle = battle;\n\t\tif (this.battle.format.side) Object.assign(this, this.battle.format.side);\n\t\tthis.id = ['p1', 'p2', 'p3', 'p4'][sideNum] as SideID;\n\t\tthis.n = sideNum;\n\n\t\tthis.name = name;\n\t\tthis.avatar = '';\n\n\t\tthis.team = team;\n\t\tthis.pokemon = [];\n\t\tfor (const set of this.team) {\n\t\t\t// console.log(\"NEW POKEMON: \" + (this.team[i] ? this.team[i].name : '[unidentified]'));\n\t\t\tthis.addPokemon(set);\n\t\t}\n\n\t\tswitch (this.battle.gameType) {\n\t\tcase 'doubles':\n\t\t\tthis.active = [null!, null!];\n\t\t\tbreak;\n\t\tcase 'triples': case 'rotation':\n\t\t\tthis.active = [null!, null!, null!];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthis.active = [null!];\n\t\t}\n\n\t\tthis.pokemonLeft = this.pokemon.length;\n\t\tthis.faintedLastTurn = null;\n\t\tthis.faintedThisTurn = null;\n\t\tthis.totalFainted = 0;\n\t\tthis.zMoveUsed = false;\n\t\tthis.dynamaxUsed = this.battle.gen !== 8;\n\n\t\tthis.sideConditions = {};\n\t\tthis.slotConditions = [];\n\t\t// Array#fill doesn't work for this\n\t\tfor (let i = 0; i < this.active.length; i++) this.slotConditions[i] = {};\n\n\t\tthis.activeRequest = null;\n\t\tthis.choice = {\n\t\t\tcantUndo: false,\n\t\t\terror: ``,\n\t\t\tactions: [],\n\t\t\tforcedSwitchesLeft: 0,\n\t\t\tforcedPassesLeft: 0,\n\t\t\tswitchIns: new Set(),\n\t\t\tzMove: false,\n\t\t\tmega: false,\n\t\t\tultra: false,\n\t\t\tdynamax: false,\n\t\t\tterastallize: false,\n\t\t};\n\n\t\t// old-gens\n\t\tthis.lastMove = null;\n\t}\n\n\ttoJSON(): AnyObject {\n\t\treturn State.serializeSide(this);\n\t}\n\n\tget requestState(): RequestState {\n\t\tif (!this.activeRequest || this.activeRequest.wait) return '';\n\t\tif (this.activeRequest.teamPreview) return 'teampreview';\n\t\tif (this.activeRequest.forceSwitch) return 'switch';\n\t\treturn 'move';\n\t}\n\n\taddPokemon(set: PokemonSet) {\n\t\tif (this.pokemon.length >= 24) return null;\n\t\tconst newPokemon = new Pokemon(set, this);\n\t\tnewPokemon.position = this.pokemon.length;\n\t\tthis.pokemon.push(newPokemon);\n\t\tthis.pokemonLeft++;\n\t\treturn newPokemon;\n\t}\n\n\tcanDynamaxNow(): boolean {\n\t\tif (this.battle.gen !== 8) return false;\n\t\t// In multi battles, players on a team are alternatingly given the option to dynamax each turn\n\t\t// On turn 1, the players on their team's respective left have the first chance (p1 and p2)\n\t\tif (this.battle.gameType === 'multi' && this.battle.turn % 2 !== [1, 1, 0, 0][this.n]) return false;\n\t\t// if (this.battle.gameType === 'multitriples' && this.battle.turn % 3 !== [1, 1, 2, 2, 0, 0][this.side.n]) {\n\t\t//\t\treturn false;\n\t\t// }\n\t\treturn !this.dynamaxUsed;\n\t}\n\n\t/** convert a Choice into a choice string */\n\tgetChoice() {\n\t\tif (this.choice.actions.length > 1 && this.choice.actions.every(action => action.choice === 'team')) {\n\t\t\treturn `team ` + this.choice.actions.map(action => action.pokemon!.position + 1).join(', ');\n\t\t}\n\t\treturn this.choice.actions.map(action => {\n\t\t\tswitch (action.choice) {\n\t\t\tcase 'move':\n\t\t\t\tlet details = ``;\n\t\t\t\tif (action.targetLoc && this.active.length > 1) details += ` ${action.targetLoc > 0 ? '+' : ''}${action.targetLoc}`;\n\t\t\t\tif (action.mega) details += (action.pokemon!.item === 'ultranecroziumz' ? ` ultra` : ` mega`);\n\t\t\t\tif (action.megax) details += ` megax`;\n\t\t\t\tif (action.megay) details += ` megay`;\n\t\t\t\tif (action.zmove) details += ` zmove`;\n\t\t\t\tif (action.maxMove) details += ` dynamax`;\n\t\t\t\tif (action.terastallize) details += ` terastallize`;\n\t\t\t\treturn `move ${action.moveid}${details}`;\n\t\t\tcase 'switch':\n\t\t\tcase 'instaswitch':\n\t\t\tcase 'revivalblessing':\n\t\t\t\treturn `switch ${action.target!.position + 1}`;\n\t\t\tcase 'team':\n\t\t\t\treturn `team ${action.pokemon!.position + 1}`;\n\t\t\tdefault:\n\t\t\t\treturn action.choice;\n\t\t\t}\n\t\t}).join(', ');\n\t}\n\n\ttoString() {\n\t\treturn `${this.id}: ${this.name}`;\n\t}\n\n\tgetRequestData(forAlly?: boolean): SideRequestData {\n\t\tconst data: SideRequestData = {\n\t\t\tname: this.name,\n\t\t\tid: this.id,\n\t\t\tpokemon: [] as PokemonSwitchRequestData[],\n\t\t};\n\t\tfor (const pokemon of this.pokemon) {\n\t\t\tdata.pokemon.push(pokemon.getSwitchRequestData(forAlly));\n\t\t}\n\t\treturn data;\n\t}\n\n\trandomFoe() {\n\t\tconst actives = this.foes();\n\t\tif (!actives.length) return null;\n\t\treturn this.battle.sample(actives);\n\t}\n\n\t/** Intended as a way to iterate through all foe side conditions - do not use for anything else. */\n\tfoeSidesWithConditions() {\n\t\tif (this.battle.gameType === 'freeforall') return this.battle.sides.filter(side => side !== this);\n\n\t\treturn [this.foe];\n\t}\n\tfoePokemonLeft() {\n\t\tif (this.battle.gameType === 'freeforall') {\n\t\t\treturn this.battle.sides.filter(side => side !== this).map(side => side.pokemonLeft).reduce((a, b) => a + b);\n\t\t}\n\n\t\tif (this.foe.allySide) return this.foe.pokemonLeft + this.foe.allySide.pokemonLeft;\n\n\t\treturn this.foe.pokemonLeft;\n\t}\n\tallies(all?: boolean) {\n\t\t// called during the first switch-in, so `active` can still contain nulls at this point\n\t\tlet allies = this.activeTeam().filter(ally => ally);\n\t\tif (!all) allies = allies.filter(ally => !!ally.hp);\n\n\t\treturn allies;\n\t}\n\tfoes(all?: boolean) {\n\t\tif (this.battle.gameType === 'freeforall') {\n\t\t\treturn this.battle.sides.map(side => side.active[0])\n\t\t\t\t.filter(pokemon => pokemon && pokemon.side !== this && (all || !!pokemon.hp));\n\t\t}\n\t\treturn this.foe.allies(all);\n\t}\n\tactiveTeam() {\n\t\tif (this.battle.gameType !== 'multi') return this.active;\n\n\t\treturn this.battle.sides[this.n % 2].active.concat(this.battle.sides[this.n % 2 + 2].active);\n\t}\n\thasAlly(pokemon: Pokemon) {\n\t\treturn pokemon.side === this || pokemon.side === this.allySide;\n\t}\n\n\taddSideCondition(\n\t\tstatus: string | Condition, source: Pokemon | 'debug' | null = null, sourceEffect: Effect | null = null\n\t): boolean {\n\t\tif (!source && this.battle.event?.target) source = this.battle.event.target;\n\t\tif (source === 'debug') source = this.active[0];\n\t\tif (!source) throw new Error(`setting sidecond without a source`);\n\t\tif (!source.getSlot) source = (source as any as Side).active[0];\n\n\t\tstatus = this.battle.dex.conditions.get(status);\n\t\tif (this.sideConditions[status.id]) {\n\t\t\tif (!(status as any).onSideRestart) return false;\n\t\t\treturn this.battle.singleEvent('SideRestart', status, this.sideConditions[status.id], this, source, sourceEffect);\n\t\t}\n\t\tthis.sideConditions[status.id] = this.battle.initEffectState({\n\t\t\tid: status.id,\n\t\t\ttarget: this,\n\t\t\tsource,\n\t\t\tsourceSlot: source.getSlot(),\n\t\t\tduration: status.duration,\n\t\t});\n\t\tif (status.durationCallback) {\n\t\t\tthis.sideConditions[status.id].duration =\n\t\t\t\tstatus.durationCallback.call(this.battle, this.active[0], source, sourceEffect);\n\t\t}\n\t\tif (!this.battle.singleEvent('SideStart', status, this.sideConditions[status.id], this, source, sourceEffect)) {\n\t\t\tdelete this.sideConditions[status.id];\n\t\t\treturn false;\n\t\t}\n\t\tthis.battle.runEvent('SideConditionStart', this, source, status);\n\t\treturn true;\n\t}\n\n\tgetSideCondition(status: string | Effect): Effect | null {\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\n\t\tif (!this.sideConditions[status.id]) return null;\n\t\treturn status;\n\t}\n\n\tgetSideConditionData(status: string | Effect): AnyObject {\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\n\t\treturn this.sideConditions[status.id] || null;\n\t}\n\n\tremoveSideCondition(status: string | Effect): boolean {\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\n\t\tif (!this.sideConditions[status.id]) return false;\n\t\tthis.battle.singleEvent('SideEnd', status, this.sideConditions[status.id], this);\n\t\tdelete this.sideConditions[status.id];\n\t\treturn true;\n\t}\n\n\taddSlotCondition(\n\t\ttarget: Pokemon | number, status: string | Condition, source: Pokemon | 'debug' | null = null,\n\t\tsourceEffect: Effect | null = null\n\t) {\n\t\tsource ??= this.battle.event?.target || null;\n\t\tif (source === 'debug') source = this.active[0];\n\t\tif (target instanceof Pokemon) target = target.position;\n\t\tif (!source) throw new Error(`setting sidecond without a source`);\n\n\t\tstatus = this.battle.dex.conditions.get(status);\n\t\tif (this.slotConditions[target][status.id]) {\n\t\t\tif (!status.onRestart) return false;\n\t\t\treturn this.battle.singleEvent('Restart', status, this.slotConditions[target][status.id], this, source, sourceEffect);\n\t\t}\n\t\tconst conditionState = this.slotConditions[target][status.id] = this.battle.initEffectState({\n\t\t\tid: status.id,\n\t\t\ttarget: this,\n\t\t\tsource,\n\t\t\tsourceSlot: source.getSlot(),\n\t\t\tisSlotCondition: true,\n\t\t\tduration: status.duration,\n\t\t});\n\t\tif (status.durationCallback) {\n\t\t\tconditionState.duration =\n\t\t\t\tstatus.durationCallback.call(this.battle, this.active[0], source, sourceEffect);\n\t\t}\n\t\tif (!this.battle.singleEvent('Start', status, conditionState, this.active[target], source, sourceEffect)) {\n\t\t\tdelete this.slotConditions[target][status.id];\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tgetSlotCondition(target: Pokemon | number, status: string | Effect) {\n\t\tif (target instanceof Pokemon) target = target.position;\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\n\t\tif (!this.slotConditions[target][status.id]) return null;\n\t\treturn status;\n\t}\n\n\tremoveSlotCondition(target: Pokemon | number, status: string | Effect) {\n\t\tif (target instanceof Pokemon) target = target.position;\n\t\tstatus = this.battle.dex.conditions.get(status) as Effect;\n\t\tif (!this.slotConditions[target][status.id]) return false;\n\t\tthis.battle.singleEvent('End', status, this.slotConditions[target][status.id], this.active[target]);\n\t\tdelete this.slotConditions[target][status.id];\n\t\treturn true;\n\t}\n\n\tsend(...parts: (string | number | Function | AnyObject)[]) {\n\t\tconst sideUpdate = '|' + parts.map(part => {\n\t\t\tif (typeof part !== 'function') return part;\n\t\t\treturn part(this);\n\t\t}).join('|');\n\t\tthis.battle.send('sideupdate', `${this.id}\\n${sideUpdate}`);\n\t}\n\n\temitRequest(update: ChoiceRequest = this.activeRequest!, updatedRequest = false) {\n\t\tif (updatedRequest) (this.activeRequest as MoveRequest | SwitchRequest).update = true;\n\t\tthis.battle.send('sideupdate', `${this.id}\\n|request|${JSON.stringify(update)}`);\n\t\tthis.activeRequest = update;\n\t}\n\n\temitChoiceError(\n\t\tmessage: string, update?: { pokemon: Pokemon, update: (req: PokemonMoveRequestData) => boolean | void }\n\t) {\n\t\tthis.choice.error = message;\n\t\tconst updated = update ? this.updateRequestForPokemon(update.pokemon, update.update) : null;\n\t\tconst type = `[${updated ? 'Unavailable' : 'Invalid'} choice]`;\n\t\tthis.battle.send('sideupdate', `${this.id}\\n|error|${type} ${message}`);\n\t\tif (updated) this.emitRequest(this.activeRequest!, true);\n\t\tif (this.battle.strictChoices) throw new Error(`${type} ${message}`);\n\t\treturn false;\n\t}\n\n\tisChoiceDone() {\n\t\tif (!this.requestState) return true;\n\t\tif (this.choice.forcedSwitchesLeft) return false;\n\n\t\tif (this.requestState === 'teampreview') {\n\t\t\treturn this.choice.actions.length >= this.pickedTeamSize();\n\t\t}\n\n\t\t// current request is move/switch\n\t\tthis.getChoiceIndex(); // auto-pass\n\t\treturn this.choice.actions.length >= this.active.length;\n\t}\n\n\tchooseMove(\n\t\tmoveText?: string | number,\n\t\ttargetLoc = 0,\n\t\tevent: 'mega' | 'megax' | 'megay' | 'zmove' | 'ultra' | 'dynamax' | 'terastallize' | '' = ''\n\t) {\n\t\tif (this.requestState !== 'move') {\n\t\t\treturn this.emitChoiceError(`Can't move: You need a ${this.requestState} response`);\n\t\t}\n\t\tconst index = this.getChoiceIndex();\n\t\tif (index >= this.active.length) {\n\t\t\treturn this.emitChoiceError(`Can't move: You sent more choices than unfainted Pok\u00E9mon.`);\n\t\t}\n\t\tconst autoChoose = !moveText;\n\t\tconst pokemon: Pokemon = this.active[index];\n\n\t\t// Parse moveText (name or index)\n\t\t// If the move is not found, the action is invalid without requiring further inspection.\n\n\t\tconst request = pokemon.getMoveRequestData();\n\t\tlet moveid = '';\n\t\tlet targetType = '';\n\t\tif (autoChoose) moveText = 1;\n\t\tif (typeof moveText === 'number' || (moveText && /^[0-9]+$/.test(moveText))) {\n\t\t\t// Parse a one-based move index.\n\t\t\tconst moveIndex = Number(moveText) - 1;\n\t\t\tif (moveIndex < 0 || moveIndex >= request.moves.length || !request.moves[moveIndex]) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: Your ${pokemon.name} doesn't have a move ${moveIndex + 1}`);\n\t\t\t}\n\t\t\tmoveid = request.moves[moveIndex].id;\n\t\t\ttargetType = request.moves[moveIndex].target!;\n\t\t} else {\n\t\t\t// Parse a move ID.\n\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\n\t\t\tmoveid = toID(moveText);\n\t\t\tif (moveid.startsWith('hiddenpower')) {\n\t\t\t\tmoveid = 'hiddenpower';\n\t\t\t}\n\t\t\tfor (const move of request.moves) {\n\t\t\t\tif (move.id !== moveid) continue;\n\t\t\t\ttargetType = move.target || 'normal';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!targetType && ['', 'dynamax'].includes(event) && request.maxMoves) {\n\t\t\t\tfor (const [i, moveRequest] of request.maxMoves.maxMoves.entries()) {\n\t\t\t\t\tif (moveid === moveRequest.move) {\n\t\t\t\t\t\tmoveid = request.moves[i].id;\n\t\t\t\t\t\ttargetType = moveRequest.target;\n\t\t\t\t\t\tevent = 'dynamax';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!targetType && ['', 'zmove'].includes(event) && request.canZMove) {\n\t\t\t\tfor (const [i, moveRequest] of request.canZMove.entries()) {\n\t\t\t\t\tif (!moveRequest) continue;\n\t\t\t\t\tif (moveid === toID(moveRequest.move)) {\n\t\t\t\t\t\tmoveid = request.moves[i].id;\n\t\t\t\t\t\ttargetType = moveRequest.target;\n\t\t\t\t\t\tevent = 'zmove';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!targetType) {\n\t\t\t\tif (moveid !== 'testfight') {\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: Your ${pokemon.name} doesn't have a move matching ${moveid}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst moves = pokemon.getMoves();\n\t\tif (autoChoose) {\n\t\t\tfor (const [i, move] of request.moves.entries()) {\n\t\t\t\tif (move.disabled) continue;\n\t\t\t\tif (i < moves.length && move.id === moves[i].id && moves[i].disabled) continue;\n\t\t\t\tmoveid = move.id;\n\t\t\t\ttargetType = move.target!;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst move = this.battle.dex.moves.get(moveid);\n\n\t\t// Z-move\n\n\t\tconst zMove = event === 'zmove' ? this.battle.actions.getZMove(move, pokemon) : undefined;\n\t\tif (event === 'zmove' && !zMove) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't use ${move.name} as a Z-move`);\n\t\t}\n\t\tif (zMove && this.choice.zMove) {\n\t\t\treturn this.emitChoiceError(`Can't move: You can't Z-move more than once per battle`);\n\t\t}\n\n\t\tif (zMove) targetType = this.battle.dex.moves.get(zMove).target;\n\n\t\t// Dynamax\n\t\t// Is dynamaxed or will dynamax this turn.\n\t\tconst maxMove = (event === 'dynamax' || pokemon.volatiles['dynamax']) ?\n\t\t\tthis.battle.actions.getMaxMove(move, pokemon) : undefined;\n\t\tif (event === 'dynamax' && !maxMove) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't use ${move.name} as a Max Move`);\n\t\t}\n\n\t\tif (maxMove) targetType = this.battle.dex.moves.get(maxMove).target;\n\n\t\t// Validate targeting\n\n\t\tif (autoChoose || moveid === 'testfight') {\n\t\t\ttargetLoc = 0;\n\t\t} else if (this.battle.actions.targetTypeChoices(targetType)) {\n\t\t\tif (!targetLoc && this.active.length >= 2) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${move.name} needs a target`);\n\t\t\t}\n\t\t\tif (!this.battle.validTargetLoc(targetLoc, pokemon, targetType)) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: Invalid target for ${move.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (targetLoc) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: You can't choose a target for ${move.name}`);\n\t\t\t}\n\t\t}\n\n\t\tconst lockedMove = pokemon.getLockedMove();\n\t\tif (lockedMove) {\n\t\t\tlet lockedMoveTargetLoc = pokemon.lastMoveTargetLoc || 0;\n\t\t\tconst lockedMoveID = toID(lockedMove);\n\t\t\tif (pokemon.volatiles[lockedMoveID]?.targetLoc) {\n\t\t\t\tlockedMoveTargetLoc = pokemon.volatiles[lockedMoveID].targetLoc;\n\t\t\t}\n\t\t\tif (pokemon.maybeLocked) this.choice.cantUndo = true;\n\t\t\tthis.choice.actions.push({\n\t\t\t\tchoice: 'move',\n\t\t\t\tpokemon,\n\t\t\t\ttargetLoc: lockedMoveTargetLoc,\n\t\t\t\tmoveid: lockedMoveID,\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (!moves.length) {\n\t\t\t// Override action and use Struggle if there are no enabled moves with PP\n\t\t\t// Gen 4 and earlier announce a Pokemon has no moves left before the turn begins, and only to that player's side.\n\t\t\tif (this.battle.gen <= 4) this.send('-activate', pokemon, 'move: Struggle');\n\t\t\tif (pokemon.maybeLocked) this.choice.cantUndo = true;\n\t\t\tthis.choice.actions.push({\n\t\t\t\tchoice: 'move',\n\t\t\t\tpokemon,\n\t\t\t\tmoveid: 'struggle',\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (moveid === 'testfight') {\n\t\t\t// test fight button\n\t\t\tif (!pokemon.maybeLocked) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name}'s Fight button is known to be safe`);\n\t\t\t}\n\t\t\tthis.updateRequestForPokemon(pokemon, req => this.updateDisabledRequest(pokemon, req));\n\t\t\tthis.emitRequest(this.activeRequest!, true);\n\t\t\tthis.choice.error = 'Hack to avoid sending error messages to the client :D';\n\t\t\treturn false;\n\t\t} else if (maxMove) {\n\t\t\t// Dynamaxed; only Taunt and Assault Vest disable Max Guard, but the base move must have PP remaining\n\t\t\tif (pokemon.maxMoveDisabled(move)) {\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name}'s ${maxMove.name} is disabled`);\n\t\t\t}\n\t\t} else if (!zMove) {\n\t\t\t// Check for disabled moves\n\t\t\tlet isEnabled = false;\n\t\t\tlet disabledSource = '';\n\t\t\tfor (const m of moves) {\n\t\t\t\tif (m.id !== moveid) continue;\n\t\t\t\tif (!m.disabled) {\n\t\t\t\t\tisEnabled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (m.disabledSource) {\n\t\t\t\t\tdisabledSource = m.disabledSource;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isEnabled) {\n\t\t\t\t// Request a different choice\n\t\t\t\tif (autoChoose) throw new Error(`autoChoose chose a disabled move`);\n\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name}'s ${move.name} is disabled`, { pokemon, update: req => {\n\t\t\t\t\tlet updated = this.updateDisabledRequest(pokemon, req);\n\t\t\t\t\tfor (const m of req.moves) {\n\t\t\t\t\t\tif (m.id === moveid) {\n\t\t\t\t\t\t\tif (!m.disabled) {\n\t\t\t\t\t\t\t\tm.disabled = true;\n\t\t\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m.disabledSource !== disabledSource) {\n\t\t\t\t\t\t\t\tm.disabledSource = disabledSource;\n\t\t\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn updated;\n\t\t\t\t} });\n\t\t\t}\n\t\t\t// The chosen move is valid yay\n\t\t}\n\n\t\t// Mega evolution\n\n\t\tconst mixandmega = this.battle.format.mod === 'mixandmega';\n\t\tconst mega = (event === 'mega');\n\t\tconst megax = (event === 'megax');\n\t\tconst megay = (event === 'megay');\n\t\tif (mega && !pokemon.canMegaEvo) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't mega evolve`);\n\t\t}\n\t\tif (megax && !pokemon.canMegaEvoX) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't mega evolve X`);\n\t\t}\n\t\tif (megay && !pokemon.canMegaEvoY) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't mega evolve Y`);\n\t\t}\n\t\tif ((mega || megax || megay) && this.choice.mega && !mixandmega) {\n\t\t\treturn this.emitChoiceError(`Can't move: You can only mega-evolve once per battle`);\n\t\t}\n\t\tconst ultra = (event === 'ultra');\n\t\tif (ultra && !pokemon.canUltraBurst) {\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't ultra burst`);\n\t\t}\n\t\tif (ultra && this.choice.ultra && !mixandmega) {\n\t\t\treturn this.emitChoiceError(`Can't move: You can only ultra burst once per battle`);\n\t\t}\n\t\tlet dynamax = (event === 'dynamax');\n\t\tconst canDynamax = (this.activeRequest as MoveRequest)?.active[this.active.indexOf(pokemon)].canDynamax;\n\t\tif (dynamax && (this.choice.dynamax || !canDynamax)) {\n\t\t\tif (pokemon.volatiles['dynamax']) {\n\t\t\t\tdynamax = false;\n\t\t\t} else {\n\t\t\t\tif (this.battle.gen !== 8) {\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: Dynamaxing doesn't outside of Gen 8.`);\n\t\t\t\t} else if (pokemon.side.canDynamaxNow()) {\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't Dynamax now.`);\n\t\t\t\t} else if (pokemon.side.allySide?.canDynamaxNow()) {\n\t\t\t\t\treturn this.emitChoiceError(`Can't move: It's your partner's turn to Dynamax.`);\n\t\t\t\t}\n\t\t\t\treturn this.emitChoiceError(`Can't move: You can only Dynamax once per battle.`);\n\t\t\t}\n\t\t}\n\t\tconst terastallize = (event === 'terastallize');\n\t\tif (terastallize && !pokemon.canTerastallize) {\n\t\t\t// Make this work properly\n\t\t\treturn this.emitChoiceError(`Can't move: ${pokemon.name} can't Terastallize.`);\n\t\t}\n\t\tif (terastallize && this.choice.terastallize) {\n\t\t\treturn this.emitChoiceError(`Can't move: You can only Terastallize once per battle.`);\n\t\t}\n\t\tif (terastallize && this.battle.gen !== 9) {\n\t\t\t// Make this work properly\n\t\t\treturn this.emitChoiceError(`Can't move: You can only Terastallize in Gen 9.`);\n\t\t}\n\n\t\tthis.choice.actions.push({\n\t\t\tchoice: 'move',\n\t\t\tpokemon,\n\t\t\ttargetLoc,\n\t\t\tmoveid,\n\t\t\tmega: mega || ultra,\n\t\t\tmegax,\n\t\t\tmegay,\n\t\t\tzmove: zMove,\n\t\t\tmaxMove: maxMove ? maxMove.id : undefined,\n\t\t\tterastallize: terastallize ? pokemon.teraType : undefined,\n\t\t});\n\n\t\tif (pokemon.maybeDisabled && (this.battle.gameType === 'singles' || (\n\t\t\tthis.battle.gen <= 3 && !this.battle.actions.targetTypeChoices(targetType)\n\t\t))) {\n\t\t\tthis.choice.cantUndo = true;\n\t\t}\n\n\t\tif (mega || megax || megay) this.choice.mega = true;\n\t\tif (ultra) this.choice.ultra = true;\n\t\tif (zMove) this.choice.zMove = true;\n\t\tif (dynamax) this.choice.dynamax = true;\n\t\tif (terastallize) this.choice.terastallize = true;\n\n\t\treturn true;\n\t}\n\n\tupdateDisabledRequest(pokemon: Pokemon, req: PokemonMoveRequestData) {\n\t\tlet updated = false;\n\t\tif (pokemon.maybeLocked) {\n\t\t\tpokemon.maybeLocked = false;\n\t\t\tdelete req.maybeLocked;\n\t\t\tupdated = true;\n\t\t}\n\t\tif (pokemon.maybeDisabled && this.battle.gameType !== 'singles') {\n\t\t\tif (this.battle.gen >= 4) {\n\t\t\t\tpokemon.maybeDisabled = false;\n\t\t\t\tdelete req.maybeDisabled;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tfor (const m of req.moves) {\n\t\t\t\tconst disabled = pokemon.getMoveData(m.id)?.disabled;\n\t\t\t\tif (disabled && (this.battle.gen >= 4 || this.battle.actions.targetTypeChoices(m.target!))) {\n\t\t\t\t\tm.disabled = true;\n\t\t\t\t\tupdated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (req.moves.every(m => m.disabled || m.id === 'struggle')) {\n\t\t\tif (req.canMegaEvo) {\n\t\t\t\treq.canMegaEvo = false;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canMegaEvoX) {\n\t\t\t\treq.canMegaEvoX = false;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canMegaEvoY) {\n\t\t\t\treq.canMegaEvoY = false;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canUltraBurst) {\n\t\t\t\treq.canUltraBurst = false;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canZMove) {\n\t\t\t\treq.canZMove = undefined;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canDynamax) {\n\t\t\t\treq.canDynamax = false;\n\t\t\t\tdelete req.maxMoves;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\tif (req.canTerastallize) {\n\t\t\t\treq.canTerastallize = undefined;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\t\treturn updated;\n\t}\n\n\tupdateRequestForPokemon(pokemon: Pokemon, update: (req: PokemonMoveRequestData) => boolean | void) {\n\t\tif (!(this.activeRequest as MoveRequest)?.active) {\n\t\t\tthrow new Error(`Can't update a request without active Pokemon`);\n\t\t}\n\t\tconst req = (this.activeRequest as MoveRequest).active[pokemon.position];\n\t\tif (!req) throw new Error(`Pokemon not found in request's active field`);\n\t\treturn update(req) ?? true;\n\t}\n\n\tchooseSwitch(slotText?: string) {\n\t\tif (this.requestState !== 'move' && this.requestState !== 'switch') {\n\t\t\treturn this.emitChoiceError(`Can't switch: You need a ${this.requestState} response`);\n\t\t}\n\t\tconst index = this.getChoiceIndex();\n\t\tif (index >= this.active.length) {\n\t\t\tif (this.requestState === 'switch') {\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You sent more switches than Pok\u00E9mon that need to switch`);\n\t\t\t}\n\t\t\treturn this.emitChoiceError(`Can't switch: You sent more choices than unfainted Pok\u00E9mon`);\n\t\t}\n\t\tconst pokemon = this.active[index];\n\t\tlet slot;\n\t\tif (!slotText) {\n\t\t\tif (this.requestState !== 'switch') {\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You need to select a Pok\u00E9mon to switch in`);\n\t\t\t}\n\t\t\tif (this.slotConditions[pokemon.position]['revivalblessing']) {\n\t\t\t\tslot = 0;\n\t\t\t\twhile (!this.pokemon[slot].fainted) slot++;\n\t\t\t} else {\n\t\t\t\tif (!this.choice.forcedSwitchesLeft) return this.choosePass();\n\t\t\t\tslot = this.active.length;\n\t\t\t\twhile (this.choice.switchIns.has(slot) || this.pokemon[slot].fainted) slot++;\n\t\t\t}\n\t\t} else {\n\t\t\tslot = parseInt(slotText) - 1;\n\t\t}\n\t\tif (isNaN(slot) || slot < 0) {\n\t\t\t// maybe it's a name/species id!\n\t\t\tslot = -1;\n\t\t\tfor (const [i, mon] of this.pokemon.entries()) {\n\t\t\t\tif (slotText!.toLowerCase() === mon.name.toLowerCase() || toID(slotText) === mon.species.id) {\n\t\t\t\t\tslot = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (slot < 0) {\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You do not have a Pok\u00E9mon named \"${slotText}\" to switch to`);\n\t\t\t}\n\t\t}\n\t\tif (slot >= this.pokemon.length) {\n\t\t\treturn this.emitChoiceError(`Can't switch: You do not have a Pok\u00E9mon in slot ${slot + 1} to switch to`);\n\t\t} else if (slot < this.active.length && !this.slotConditions[pokemon.position]['revivalblessing']) {\n\t\t\treturn this.emitChoiceError(`Can't switch: You can't switch to an active Pok\u00E9mon`);\n\t\t} else if (this.choice.switchIns.has(slot)) {\n\t\t\treturn this.emitChoiceError(`Can't switch: The Pok\u00E9mon in slot ${slot + 1} can only switch in once`);\n\t\t}\n\t\tconst targetPokemon = this.pokemon[slot];\n\n\t\tif (this.slotConditions[pokemon.position]['revivalblessing']) {\n\t\t\tif (!targetPokemon.fainted) {\n\t\t\t\treturn this.emitChoiceError(`Can't switch: You have to pass to a fainted Pok\u00E9mon`);\n\t\t\t}\n\t\t\t// Should always subtract, but stop at 0 to prevent errors.\n\t\t\tthis.choice.forcedSwitchesLeft = this.battle.clampIntRange(this.choice.forcedSwitchesLeft - 1, 0);\n\t\t\tpokemon.switchFlag = false;\n\t\t\tthis.choice.actions.push({\n\t\t\t\tchoice: 'revivalblessing',\n\t\t\t\tpokemon,\n\t\t\t\ttarget: targetPokemon,\n\t\t\t} as ChosenAction);\n\t\t\treturn true;\n\t\t}\n\n\t\tif (targetPokemon.fainted) {\n\t\t\treturn this.emitChoiceError(`Can't switch: You can't switch to a fainted Pok\u00E9mon`);\n\t\t}\n\n\t\tif (this.requestState === 'move') {\n\t\t\tif (pokemon.trapped) {\n\t\t\t\treturn this.emitChoiceError(`Can't switch: The active Pok\u00E9mon is trapped`, { pokemon, update: req => {\n\t\t\t\t\tlet updated = false;\n\t\t\t\t\tif (req.maybeTrapped) {\n\t\t\t\t\t\tdelete req.maybeTrapped;\n\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!req.trapped) {\n\t\t\t\t\t\treq.trapped = true;\n\t\t\t\t\t\tupdated = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn updated;\n\t\t\t\t} });\n\t\t\t} else if (pokemon.maybeTrapped) {\n\t\t\t\tthis.choice.cantUndo = true;\n\t\t\t}\n\t\t} else if (this.requestState === 'switch') {\n\t\t\tif (!this.choice.forcedSwitchesLeft) {\n\t\t\t\tthrow new Error(`Player somehow switched too many Pokemon`);\n\t\t\t}\n\t\t\tthis.choice.forcedSwitchesLeft--;\n\t\t}\n\n\t\tthis.choice.switchIns.add(slot);\n\n\t\tthis.choice.actions.push({\n\t\t\tchoice: (this.requestState === 'switch' ? 'instaswitch' : 'switch'),\n\t\t\tpokemon,\n\t\t\ttarget: targetPokemon,\n\t\t} as ChosenAction);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The number of pokemon you must choose in Team Preview.\n\t *\n\t * Note that PS doesn't support choosing fewer than this number of pokemon.\n\t * In the games, it is sometimes possible to bring fewer than this, but\n\t * since that's nearly always a mistake, we haven't gotten around to\n\t * supporting it.\n\t */\n\tpickedTeamSize() {\n\t\treturn Math.min(this.pokemon.length, this.battle.ruleTable.pickedTeamSize || Infinity);\n\t}\n\n\tchooseTeam(data = '') {\n\t\tif (this.requestState !== 'teampreview') {\n\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: You're not in a Team Preview phase`);\n\t\t}\n\n\t\tconst ruleTable = this.battle.ruleTable;\n\t\tlet positions = data.split(data.includes(',') ? ',' : '')\n\t\t\t.map(datum => parseInt(datum) - 1);\n\t\tconst pickedTeamSize = this.pickedTeamSize();\n\n\t\t// make sure positions is exactly of length pickedTeamSize\n\t\t// - If too big: the client automatically sends a full list, so we just trim it down to size\n\t\tpositions.splice(pickedTeamSize);\n\t\t// - If too small: we intentionally support only sending leads and having the sim fill in the rest\n\t\tif (positions.length === 0) {\n\t\t\tfor (let i = 0; i < pickedTeamSize; i++) positions.push(i);\n\t\t} else if (positions.length < pickedTeamSize) {\n\t\t\tfor (let i = 0; i < pickedTeamSize; i++) {\n\t\t\t\tif (!positions.includes(i)) positions.push(i);\n\t\t\t\t// duplicate in input, let the rest of the code handle the error message\n\t\t\t\tif (positions.length >= pickedTeamSize) break;\n\t\t\t}\n\t\t}\n\n\t\tfor (const [index, pos] of positions.entries()) {\n\t\t\tif (isNaN(pos) || pos < 0 || pos >= this.pokemon.length) {\n\t\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: You do not have a Pok\u00E9mon in slot ${pos + 1}`);\n\t\t\t}\n\t\t\tif (positions.indexOf(pos) !== index) {\n\t\t\t\treturn this.emitChoiceError(`Can't choose for Team Preview: The Pok\u00E9mon in slot ${pos + 1} can only switch in once`);\n\t\t\t}\n\t\t}\n\t\tif (ruleTable.maxTotalLevel) {\n\t\t\tlet totalLevel = 0;\n\t\t\tfor (const pos of positions) totalLevel += this.pokemon[pos].level;\n\n\t\t\tif (totalLevel > ruleTable.maxTotalLevel) {\n\t\t\t\tif (!data) {\n\t\t\t\t\t// autoChoose\n\t\t\t\t\tpositions = [...this.pokemon.keys()].sort((a, b) => (this.pokemon[a].level - this.pokemon[b].level))\n\t\t\t\t\t\t.slice(0, pickedTeamSize);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.emitChoiceError(`Your selected team has a total level of ${totalLevel}, but it can't be above ${ruleTable.maxTotalLevel}; please select a valid team of ${pickedTeamSize} Pok\u00E9mon`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ruleTable.valueRules.has('forceselect')) {\n\t\t\tconst species = this.battle.dex.species.get(ruleTable.valueRules.get('forceselect'));\n\t\t\tif (!data) {\n\t\t\t\t// autoChoose\n\t\t\t\tpositions = [...this.pokemon.keys()].filter(pos => this.pokemon[pos].species.name === species.name)\n\t\t\t\t\t.concat([...this.pokemon.keys()].filter(pos => this.pokemon[pos].species.name !== species.name))\n\t\t\t\t\t.slice(0, pickedTeamSize);\n\t\t\t} else {\n\t\t\t\tlet hasSelection = false;\n\t\t\t\tfor (const pos of positions) {\n\t\t\t\t\tif (this.pokemon[pos].species.name === species.name) {\n\t\t\t\t\t\thasSelection = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!hasSelection) {\n\t\t\t\t\treturn this.emitChoiceError(`You must bring ${species.name} to the battle.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const [index, pos] of positions.entries()) {\n\t\t\tthis.choice.switchIns.add(pos);\n\t\t\tthis.choice.actions.push({\n\t\t\t\tchoice: 'team',\n\t\t\t\tindex,\n\t\t\t\tpokemon: this.pokemon[pos],\n\t\t\t\tpriority: -index,\n\t\t\t} as ChosenAction);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tchooseShift() {\n\t\tconst index = this.getChoiceIndex();\n\t\tif (index >= this.active.length) {\n\t\t\treturn this.emitChoiceError(`Can't shift: You do not have a Pok\u00E9mon in slot ${index + 1}`);\n\t\t} else if (this.requestState !== 'move') {\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift during a move phase`);\n\t\t} else if (this.battle.gameType !== 'triples') {\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift to the center in triples`);\n\t\t} else if (index === 1) {\n\t\t\treturn this.emitChoiceError(`Can't shift: You can only shift from the edge to the center`);\n\t\t}\n\t\tconst pokemon: Pokemon = this.active[index];\n\n\t\tthis.choice.actions.push({\n\t\t\tchoice: 'shift',\n\t\t\tpokemon,\n\t\t} as ChosenAction);\n\n\t\treturn true;\n\t}\n\n\tclearChoice() {\n\t\tlet forcedSwitches = 0;\n\t\tlet forcedPasses = 0;\n\t\tif (this.battle.requestState === 'switch') {\n\t\t\tconst canSwitchOut = this.active.filter(pokemon => pokemon?.switchFlag).length;\n\t\t\tconst canSwitchIn = this.pokemon.slice(this.active.length).filter(pokemon => pokemon && !pokemon.fainted).length;\n\t\t\tforcedSwitches = Math.min(canSwitchOut, canSwitchIn);\n\t\t\tforcedPasses = canSwitchOut - forcedSwitches;\n\t\t}\n\t\tthis.choice = {\n\t\t\tcantUndo: false,\n\t\t\terror: ``,\n\t\t\tactions: [],\n\t\t\tforcedSwitchesLeft: forcedSwitches,\n\t\t\tforcedPassesLeft: forcedPasses,\n\t\t\tswitchIns: new Set(),\n\t\t\tzMove: false,\n\t\t\tmega: false,\n\t\t\tultra: false,\n\t\t\tdynamax: false,\n\t\t\tterastallize: false,\n\t\t};\n\t}\n\n\tchoose(input: string) {\n\t\tif (!this.requestState) {\n\t\t\treturn this.emitChoiceError(\n\t\t\t\tthis.battle.ended ? `Can't do anything: The game is over` : `Can't do anything: It's not your turn`\n\t\t\t);\n\t\t}\n\n\t\tif (this.choice.cantUndo) {\n\t\t\treturn this.emitChoiceError(`Can't undo: A trapping/disabling effect would cause undo to leak information`);\n\t\t}\n\n\t\tthis.clearChoice();\n\n\t\tconst choiceStrings = (input.startsWith('team ') ? [input] : input.split(','));\n\n\t\tif (choiceStrings.length > this.active.length) {\n\t\t\treturn this.emitChoiceError(\n\t\t\t\t`Can't make choices: You sent choices for ${choiceStrings.length} Pok\u00E9mon, but this is a ${this.battle.gameType} game!`\n\t\t\t);\n\t\t}\n\n\t\tfor (const choiceString of choiceStrings) {\n\t\t\tlet [choiceType, data] = Utils.splitFirst(choiceString.trim(), ' ');\n\t\t\tdata = data.trim();\n\t\t\tif (choiceType === 'testfight') {\n\t\t\t\tchoiceType = 'move';\n\t\t\t\tdata = 'testfight';\n\t\t\t}\n\n\t\t\tswitch (choiceType) {\n\t\t\tcase 'move':\n\t\t\t\tconst original = data;\n\t\t\t\tconst error = () => this.emitChoiceError(`Conflicting arguments for \"move\": ${original}`);\n\t\t\t\tlet targetLoc: number | undefined;\n\t\t\t\tlet event: 'mega' | 'megax' | 'megay' | 'zmove' | 'ultra' | 'dynamax' | 'terastallize' | '' = '';\n\t\t\t\twhile (true) {\n\t\t\t\t\t// If data ends with a number, treat it as a target location.\n\t\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\n\t\t\t\t\t// confused with 'Conversion' erroneously sent with the target\n\t\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\n\t\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(data) && toID(data) !== 'conversion2') {\n\t\t\t\t\t\tif (targetLoc !== undefined) return error();\n\t\t\t\t\t\ttargetLoc = parseInt(data.slice(-2));\n\t\t\t\t\t\tdata = data.slice(0, -2).trim();\n\t\t\t\t\t} else if (data.endsWith(' mega')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'mega';\n\t\t\t\t\t\tdata = data.slice(0, -5);\n\t\t\t\t\t} else if (data.endsWith(' megax')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'megax';\n\t\t\t\t\t\tdata = data.slice(0, -6);\n\t\t\t\t\t} else if (data.endsWith(' megay')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'megay';\n\t\t\t\t\t\tdata = data.slice(0, -6);\n\t\t\t\t\t} else if (data.endsWith(' zmove')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'zmove';\n\t\t\t\t\t\tdata = data.slice(0, -6);\n\t\t\t\t\t} else if (data.endsWith(' ultra')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'ultra';\n\t\t\t\t\t\tdata = data.slice(0, -6);\n\t\t\t\t\t} else if (data.endsWith(' dynamax')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'dynamax';\n\t\t\t\t\t\tdata = data.slice(0, -8);\n\t\t\t\t\t} else if (data.endsWith(' gigantamax')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'dynamax';\n\t\t\t\t\t\tdata = data.slice(0, -11);\n\t\t\t\t\t} else if (data.endsWith(' max')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'dynamax';\n\t\t\t\t\t\tdata = data.slice(0, -4);\n\t\t\t\t\t} else if (data.endsWith(' terastal')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'terastallize';\n\t\t\t\t\t\tdata = data.slice(0, -9);\n\t\t\t\t\t} else if (data.endsWith(' terastallize')) {\n\t\t\t\t\t\tif (event) return error();\n\t\t\t\t\t\tevent = 'terastallize';\n\t\t\t\t\t\tdata = data.slice(0, -13);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this.chooseMove(data, targetLoc, event)) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'switch':\n\t\t\t\tthis.chooseSwitch(data);\n\t\t\t\tbreak;\n\t\t\tcase 'shift':\n\t\t\t\tif (data) return this.emitChoiceError(`Unrecognized data after \"shift\": ${data}`);\n\t\t\t\tif (!this.chooseShift()) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'team':\n\t\t\t\tif (!this.chooseTeam(data)) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'pass':\n\t\t\tcase 'skip':\n\t\t\t\tif (data) return this.emitChoiceError(`Unrecognized data after \"pass\": ${data}`);\n\t\t\t\tif (!this.choosePass()) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'auto':\n\t\t\tcase 'default':\n\t\t\t\tthis.autoChoose();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.emitChoiceError(`Unrecognized choice: ${choiceString}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn !this.choice.error;\n\t}\n\n\tgetChoiceIndex(isPass?: boolean) {\n\t\tlet index = this.choice.actions.length;\n\n\t\tif (!isPass) {\n\t\t\tswitch (this.requestState) {\n\t\t\tcase 'move':\n\t\t\t\t// auto-pass\n\t\t\t\twhile (\n\t\t\t\t\tindex < this.active.length &&\n\t\t\t\t\t(this.active[index].fainted || this.active[index].volatiles['commanding'])\n\t\t\t\t) {\n\t\t\t\t\tthis.choosePass();\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'switch':\n\t\t\t\twhile (index < this.active.length && !this.active[index].switchFlag) {\n\t\t\t\t\tthis.choosePass();\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tchoosePass(): boolean | Side {\n\t\tconst index = this.getChoiceIndex(true);\n\t\tif (index >= this.active.length) return false;\n\t\tconst pokemon: Pokemon = this.active[index];\n\n\t\tswitch (this.requestState) {\n\t\tcase 'switch':\n\t\t\tif (pokemon.switchFlag) { // This condition will always happen if called by Battle#choose()\n\t\t\t\tif (!this.choice.forcedPassesLeft) {\n\t\t\t\t\treturn this.emitChoiceError(`Can't pass: You need to switch in a Pok\u00E9mon to replace ${pokemon.name}`);\n\t\t\t\t}\n\t\t\t\tthis.choice.forcedPassesLeft--;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'move':\n\t\t\tif (!pokemon.fainted && !pokemon.volatiles['commanding']) {\n\t\t\t\treturn this.emitChoiceError(`Can't pass: Your ${pokemon.name} must make a move (or switch)`);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn this.emitChoiceError(`Can't pass: Not a move or switch request`);\n\t\t}\n\n\t\tthis.choice.actions.push({\n\t\t\tchoice: 'pass',\n\t\t} as ChosenAction);\n\t\treturn true;\n\t}\n\n\t/** Automatically finish a choice if not currently complete. */\n\tautoChoose() {\n\t\tif (this.requestState === 'teampreview') {\n\t\t\tif (!this.isChoiceDone()) this.chooseTeam();\n\t\t} else if (this.requestState === 'switch') {\n\t\t\tlet i = 0;\n\t\t\twhile (!this.isChoiceDone()) {\n\t\t\t\tif (!this.chooseSwitch()) throw new Error(`autoChoose switch crashed: ${this.choice.error}`);\n\t\t\t\ti++;\n\t\t\t\tif (i > 10) throw new Error(`autoChoose failed: infinite looping`);\n\t\t\t}\n\t\t} else if (this.requestState === 'move') {\n\t\t\tlet i = 0;\n\t\t\twhile (!this.isChoiceDone()) {\n\t\t\t\tif (!this.chooseMove()) throw new Error(`autoChoose crashed: ${this.choice.error}`);\n\t\t\t\ti++;\n\t\t\t\tif (i > 10) throw new Error(`autoChoose failed: infinite looping`);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tdestroy() {\n\t\t// deallocate ourself\n\n\t\t// deallocate children and get rid of references to them\n\t\tfor (const pokemon of this.pokemon) {\n\t\t\tif (pokemon) pokemon.destroy();\n\t\t}\n\n\t\tfor (const action of this.choice.actions) {\n\t\t\tdelete action.side;\n\t\t\tdelete action.pokemon;\n\t\t\tdelete action.target;\n\t\t}\n\t\tthis.choice.actions = [];\n\n\t\t// get rid of some possibly-circular references\n\t\tthis.pokemon = [];\n\t\tthis.active = [];\n\t\tthis.foe = null!;\n\t\t(this as any).battle = null!;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["move"]
}
