{
  "version": 3,
  "sources": ["../../sim/dex-formats.ts"],
  "sourcesContent": ["import { Utils } from '../lib/utils';\nimport { assignMissingFields, toID, BasicEffect } from './dex-data';\nimport type { EventMethods } from './dex-conditions';\nimport type { SpeciesData } from './dex-species';\nimport { Tags } from '../data/tags';\n\nconst DEFAULT_MOD = 'gen9';\n\nexport interface FormatData extends Partial<Format>, EventMethods {\n\tname: string;\n}\n\nexport type FormatList = (FormatData | { section: string, column?: number })[];\nexport type ModdedFormatData = FormatData | Omit<FormatData, 'name'> & { inherit: true };\nexport interface FormatDataTable { [id: IDEntry]: FormatData }\nexport interface ModdedFormatDataTable { [id: IDEntry]: ModdedFormatData }\n\ntype FormatEffectType = 'Format' | 'Ruleset' | 'Rule' | 'ValidatorRule';\n\n/** rule, source, limit, bans */\nexport type ComplexBan = [string, string, number, string[]];\nexport type ComplexTeamBan = ComplexBan;\n\nexport interface GameTimerSettings {\n\tdcTimer: boolean;\n\tdcTimerBank: boolean;\n\tstarting: number;\n\tgrace: number;\n\taddPerTurn: number;\n\tmaxPerTurn: number;\n\tmaxFirstTurn: number;\n\ttimeoutAutoChoose: boolean;\n\taccelerate: boolean;\n}\n\n/**\n * A RuleTable keeps track of the rules that a format has. The key can be:\n * - '[ruleid]' the ID of a rule in effect\n * - '-[thing]' or '-[category]:[thing]' ban a thing\n * - '+[thing]' or '+[category]:[thing]' allow a thing (override a ban)\n * [category] is one of: item, move, ability, species, basespecies\n *\n * The value is the name of the parent rule (blank for the active format).\n */\nexport class RuleTable extends Map<string, string> {\n\tcomplexBans: ComplexBan[];\n\tcomplexTeamBans: ComplexTeamBan[];\n\tcheckCanLearn: [TeamValidator['checkCanLearn'], string] | null;\n\ttimer: [Partial<GameTimerSettings>, string] | null;\n\ttagRules: string[];\n\tvalueRules: Map<string, string>;\n\n\tminTeamSize!: number;\n\tmaxTeamSize!: number;\n\tpickedTeamSize!: number | null;\n\tmaxTotalLevel!: number | null;\n\tmaxMoveCount!: number;\n\tminSourceGen!: number;\n\tminLevel!: number;\n\tmaxLevel!: number;\n\tdefaultLevel!: number;\n\tadjustLevel!: number | null;\n\tadjustLevelDown!: number | null;\n\tevLimit!: number | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.complexBans = [];\n\t\tthis.complexTeamBans = [];\n\t\tthis.checkCanLearn = null;\n\t\tthis.timer = null;\n\t\tthis.tagRules = [];\n\t\tthis.valueRules = new Map();\n\t}\n\n\tisBanned(thing: string) {\n\t\tif (this.has(`+${thing}`)) return false;\n\t\treturn this.has(`-${thing}`);\n\t}\n\n\tisBannedSpecies(species: Species) {\n\t\tif (this.has(`+pokemon:${species.id}`)) return false;\n\t\tif (this.has(`-pokemon:${species.id}`)) return true;\n\t\tif (this.has(`+basepokemon:${toID(species.baseSpecies)}`)) return false;\n\t\tif (this.has(`-basepokemon:${toID(species.baseSpecies)}`)) return true;\n\t\tfor (const tagid in Tags) {\n\t\t\tconst tag = Tags[tagid as ID];\n\t\t\tif (this.has(`-pokemontag:${tagid}`)) {\n\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) return true;\n\t\t\t}\n\t\t}\n\t\tfor (const tagid in Tags) {\n\t\t\tconst tag = Tags[tagid as ID];\n\t\t\tif (this.has(`+pokemontag:${tagid}`)) {\n\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) return false;\n\t\t\t}\n\t\t}\n\t\treturn this.has(`-pokemontag:allpokemon`);\n\t}\n\n\tisRestricted(thing: string) {\n\t\tif (this.has(`+${thing}`)) return false;\n\t\treturn this.has(`*${thing}`);\n\t}\n\n\tisRestrictedSpecies(species: Species) {\n\t\tif (this.has(`+pokemon:${species.id}`)) return false;\n\t\tif (this.has(`*pokemon:${species.id}`)) return true;\n\t\tif (this.has(`+basepokemon:${toID(species.baseSpecies)}`)) return false;\n\t\tif (this.has(`*basepokemon:${toID(species.baseSpecies)}`)) return true;\n\t\tfor (const tagid in Tags) {\n\t\t\tconst tag = Tags[tagid as ID];\n\t\t\tif (this.has(`*pokemontag:${tagid}`)) {\n\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) return true;\n\t\t\t}\n\t\t}\n\t\tfor (const tagid in Tags) {\n\t\t\tconst tag = Tags[tagid as ID];\n\t\t\tif (this.has(`+pokemontag:${tagid}`)) {\n\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) return false;\n\t\t\t}\n\t\t}\n\t\treturn this.has(`*pokemontag:allpokemon`);\n\t}\n\n\tgetTagRules() {\n\t\tconst tagRules = [];\n\t\tfor (const ruleid of this.keys()) {\n\t\t\tif (/^[+*-]pokemontag:/.test(ruleid)) {\n\t\t\t\tconst banid = ruleid.slice(12);\n\t\t\t\tif (\n\t\t\t\t\tbanid === 'allpokemon' || banid === 'allitems' || banid === 'allmoves' ||\n\t\t\t\t\tbanid === 'allabilities' || banid === 'allnatures'\n\t\t\t\t) {\n\t\t\t\t\t// hardcoded and not a part of the ban rule system\n\t\t\t\t} else {\n\t\t\t\t\ttagRules.push(ruleid);\n\t\t\t\t}\n\t\t\t} else if ('+*-'.includes(ruleid.charAt(0)) && ruleid.slice(1) === 'nonexistent') {\n\t\t\t\ttagRules.push(ruleid.charAt(0) + 'pokemontag:nonexistent');\n\t\t\t}\n\t\t}\n\t\tthis.tagRules = tagRules.reverse();\n\t\treturn this.tagRules;\n\t}\n\n\t/**\n\t * - non-empty string: banned, string is the reason\n\t * - '': whitelisted\n\t * - null: neither whitelisted nor banned\n\t */\n\tcheck(thing: string, setHas: { [id: string]: true } | null = null) {\n\t\tif (this.has(`+${thing}`)) return '';\n\t\tif (setHas) setHas[thing] = true;\n\t\treturn this.getReason(`-${thing}`);\n\t}\n\n\tgetReason(key: string): string | null {\n\t\tconst source = this.get(key);\n\t\tif (source === undefined) return null;\n\t\tif (key === '-nonexistent' || key.startsWith('obtainable')) {\n\t\t\treturn 'not obtainable';\n\t\t}\n\t\treturn source ? `banned by ${source}` : `banned`;\n\t}\n\n\tblame(key: string): string {\n\t\tconst source = this.get(key);\n\t\treturn source ? ` from ${source}` : ``;\n\t}\n\n\tgetComplexBanIndex(complexBans: ComplexBan[], rule: string): number {\n\t\tconst ruleId = toID(rule);\n\t\tlet complexBanIndex = -1;\n\t\tfor (let i = 0; i < complexBans.length; i++) {\n\t\t\tif (toID(complexBans[i][0]) === ruleId) {\n\t\t\t\tcomplexBanIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn complexBanIndex;\n\t}\n\n\taddComplexBan(rule: string, source: string, limit: number, bans: string[]) {\n\t\tconst complexBanIndex = this.getComplexBanIndex(this.complexBans, rule);\n\t\tif (complexBanIndex !== -1) {\n\t\t\tif (this.complexBans[complexBanIndex][2] === Infinity) return;\n\t\t\tthis.complexBans[complexBanIndex] = [rule, source, limit, bans];\n\t\t} else {\n\t\t\tthis.complexBans.push([rule, source, limit, bans]);\n\t\t}\n\t}\n\n\taddComplexTeamBan(rule: string, source: string, limit: number, bans: string[]) {\n\t\tconst complexBanTeamIndex = this.getComplexBanIndex(this.complexTeamBans, rule);\n\t\tif (complexBanTeamIndex !== -1) {\n\t\t\tif (this.complexTeamBans[complexBanTeamIndex][2] === Infinity) return;\n\t\t\tthis.complexTeamBans[complexBanTeamIndex] = [rule, source, limit, bans];\n\t\t} else {\n\t\t\tthis.complexTeamBans.push([rule, source, limit, bans]);\n\t\t}\n\t}\n\n\t/** After a RuleTable has been filled out, resolve its hardcoded numeric properties */\n\tresolveNumbers(format: Format, dex: ModdedDex) {\n\t\tconst gameTypeMinTeamSize = ['triples', 'rotation'].includes(format.gameType as 'triples') ? 3 :\n\t\t\tformat.gameType === 'doubles' ? 2 :\n\t\t\t1;\n\n\t\t// NOTE: These numbers are pre-calculated here because they're hardcoded\n\t\t// into the team validator and battle engine, and can affect validation\n\t\t// in complicated ways.\n\n\t\t// If you're making your own rule, it nearly definitely does not not\n\t\t// belong here: `onValidateRule`, `onValidateSet`, and `onValidateTeam`\n\t\t// should be enough for a validator rule, and the battle event system\n\t\t// should be enough for a battle rule.\n\n\t\tthis.minTeamSize = Number(this.valueRules.get('minteamsize')) || 0;\n\t\tthis.maxTeamSize = Number(this.valueRules.get('maxteamsize')) || 6;\n\t\tthis.pickedTeamSize = Number(this.valueRules.get('pickedteamsize')) || null;\n\t\tthis.maxTotalLevel = Number(this.valueRules.get('maxtotallevel')) || null;\n\t\tthis.maxMoveCount = Number(this.valueRules.get('maxmovecount')) || 4;\n\t\tthis.minSourceGen = Number(this.valueRules.get('minsourcegen'));\n\t\tthis.minLevel = Number(this.valueRules.get('minlevel')) || 1;\n\t\tthis.maxLevel = Number(this.valueRules.get('maxlevel')) || 100;\n\t\tthis.defaultLevel = Number(this.valueRules.get('defaultlevel')) || 0;\n\t\tthis.adjustLevel = Number(this.valueRules.get('adjustlevel')) || null;\n\t\tthis.adjustLevelDown = Number(this.valueRules.get('adjustleveldown')) || null;\n\t\tthis.evLimit = Number(this.valueRules.get('evlimit'));\n\t\tif (isNaN(this.evLimit)) this.evLimit = null;\n\t\tif (!this.minSourceGen) {\n\t\t\tif (dex.gen >= 9 && this.has('obtainable') && !this.has('natdexmod')) {\n\t\t\t\tthis.minSourceGen = dex.gen;\n\t\t\t} else {\n\t\t\t\tthis.minSourceGen = 1;\n\t\t\t}\n\t\t}\n\n\t\tconst timer: Partial<GameTimerSettings> = {};\n\t\tif (this.valueRules.has('timerstarting')) {\n\t\t\ttimer.starting = Number(this.valueRules.get('timerstarting'));\n\t\t}\n\t\tif (this.has('dctimer')) {\n\t\t\ttimer.dcTimer = true;\n\t\t}\n\t\tif (this.has('dctimerbank')) {\n\t\t\ttimer.dcTimer = true;\n\t\t}\n\t\tif (this.valueRules.has('timergrace')) {\n\t\t\ttimer.grace = Number(this.valueRules.get('timergrace'));\n\t\t}\n\t\tif (this.valueRules.has('timeraddperturn')) {\n\t\t\ttimer.addPerTurn = Number(this.valueRules.get('timeraddperturn'));\n\t\t}\n\t\tif (this.valueRules.has('timermaxperturn')) {\n\t\t\ttimer.maxPerTurn = Number(this.valueRules.get('timermaxperturn'));\n\t\t}\n\t\tif (this.valueRules.has('timermaxfirstturn')) {\n\t\t\ttimer.maxFirstTurn = Number(this.valueRules.get('timermaxfirstturn'));\n\t\t}\n\t\tif (this.has('timeoutautochoose')) {\n\t\t\ttimer.timeoutAutoChoose = true;\n\t\t}\n\t\tif (this.has('timeraccelerate')) {\n\t\t\ttimer.accelerate = true;\n\t\t}\n\t\tif (Object.keys(timer).length) this.timer = [timer, format.name];\n\n\t\tif (this.valueRules.get('pickedteamsize') === 'Auto') {\n\t\t\tthis.pickedTeamSize = (\n\t\t\t\t['doubles', 'rotation'].includes(format.gameType) ? 4 :\n\t\t\t\tformat.gameType === 'triples' ? 6 :\n\t\t\t\t3\n\t\t\t);\n\t\t}\n\t\tif (this.valueRules.get('evlimit') === 'Auto') {\n\t\t\tthis.evLimit = dex.gen > 2 ? 510 : null;\n\t\t\tif (format.mod === 'gen7letsgo') {\n\t\t\t\tthis.evLimit = this.has('lgpenormalrules') ? 0 : null;\n\t\t\t}\n\t\t\t// Gen 6 hackmons also has a limit, which is currently implemented\n\t\t\t// at the appropriate format.\n\t\t}\n\n\t\t// sanity checks; these _could_ be inside `onValidateRule` but this way\n\t\t// involves less string conversion.\n\n\t\t// engine hard limits\n\t\tif (this.maxTeamSize > 24) {\n\t\t\tthrow new Error(`Max team size ${this.maxTeamSize}${this.blame('maxteamsize')} is unsupported (we only support up to 24).`);\n\t\t}\n\t\tif (this.maxLevel > 99999) {\n\t\t\tthrow new Error(`Max level ${this.maxLevel}${this.blame('maxlevel')} is unsupported (we only support up to 99999)`);\n\t\t}\n\t\tif (this.maxMoveCount > 24) {\n\t\t\t// A limit is imposed here to prevent too much engine strain or\n\t\t\t// too much layout deformation - to be exact, this is the limit\n\t\t\t// allowed in Custom Game.\n\t\t\tthrow new Error(`Max move count ${this.maxMoveCount}${this.blame('maxmovecount')} is unsupported (we only support up to 24)`);\n\t\t}\n\n\t\tif (!this.defaultLevel) {\n\t\t\t// defaultLevel will set level 100 pokemon to the default level, which can break\n\t\t\t// Max Total Level if Max Level is above 100.\n\t\t\tconst maxTeamSize = this.pickedTeamSize || this.maxTeamSize;\n\t\t\tif (this.maxTotalLevel && this.maxLevel > 100 && this.maxLevel * maxTeamSize > this.maxTotalLevel) {\n\t\t\t\tthis.defaultLevel = 100;\n\t\t\t} else {\n\t\t\t\tthis.defaultLevel = this.maxLevel;\n\t\t\t}\n\t\t}\n\t\tif (this.minTeamSize && this.minTeamSize < gameTypeMinTeamSize) {\n\t\t\tthrow new Error(`Min team size ${this.minTeamSize}${this.blame('minteamsize')} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);\n\t\t}\n\t\tif (this.pickedTeamSize && this.pickedTeamSize < gameTypeMinTeamSize) {\n\t\t\tthrow new Error(`Chosen team size ${this.pickedTeamSize}${this.blame('pickedteamsize')} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);\n\t\t}\n\t\tif (this.minTeamSize && this.pickedTeamSize && this.minTeamSize < this.pickedTeamSize) {\n\t\t\tthrow new Error(`Min team size ${this.minTeamSize}${this.blame('minteamsize')} is lower than chosen team size ${this.pickedTeamSize}${this.blame('pickedteamsize')}.`);\n\t\t}\n\t\tif (!this.minTeamSize) this.minTeamSize = Math.max(gameTypeMinTeamSize, this.pickedTeamSize || 0);\n\t\tif (this.maxTeamSize < gameTypeMinTeamSize) {\n\t\t\tthrow new Error(`Max team size ${this.maxTeamSize}${this.blame('maxteamsize')} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);\n\t\t}\n\t\tif (this.maxTeamSize < this.minTeamSize) {\n\t\t\tthrow new Error(`Max team size ${this.maxTeamSize}${this.blame('maxteamsize')} must be at least min team size ${this.minTeamSize}${this.blame('minteamsize')}.`);\n\t\t}\n\t\tif (this.minLevel > this.maxLevel) {\n\t\t\tthrow new Error(`Min level ${this.minLevel}${this.blame('minlevel')} should not be above max level ${this.maxLevel}${this.blame('maxlevel')}.`);\n\t\t}\n\t\tif (this.defaultLevel > this.maxLevel) {\n\t\t\tthrow new Error(`Default level ${this.defaultLevel}${this.blame('defaultlevel')} should not be above max level ${this.maxLevel}${this.blame('maxlevel')}.`);\n\t\t}\n\t\tif (this.defaultLevel < this.minLevel) {\n\t\t\tthrow new Error(`Default level ${this.defaultLevel}${this.blame('defaultlevel')} should not be below min level ${this.minLevel}${this.blame('minlevel')}.`);\n\t\t}\n\t\tif (this.adjustLevelDown && this.adjustLevelDown >= this.maxLevel) {\n\t\t\tthrow new Error(`Adjust Level Down ${this.adjustLevelDown}${this.blame('adjustleveldown')} will have no effect because it's not below max level ${this.maxLevel}${this.blame('maxlevel')}.`);\n\t\t}\n\t\tif (this.adjustLevel && this.valueRules.has('minlevel')) {\n\t\t\tthrow new Error(`Min Level ${this.minLevel}${this.blame('minlevel')} will have no effect because you're using Adjust Level ${this.adjustLevel}${this.blame('adjustlevel')}.`);\n\t\t}\n\t\tif (this.evLimit && this.evLimit >= 1512) {\n\t\t\tthrow new Error(`EV Limit ${this.evLimit}${this.blame('evlimit')} will have no effect because it's not lower than 1512, the maximum possible combination of 252 EVs in every stat (if you currently have an EV limit, use \"! EV Limit\" to remove the limit).`);\n\t\t}\n\t\tif (this.evLimit && this.evLimit < 0) {\n\t\t\tthrow new Error(`EV Limit ${this.evLimit}${this.blame('evlimit')} can't be less than 0 (you might have meant: \"! EV Limit\" to remove the limit, or \"EV Limit = 0\" to ban EVs).`);\n\t\t}\n\n\t\tif (timer.starting !== undefined && (timer.starting < 10 || timer.starting > 1200)) {\n\t\t\tthrow new Error(`Timer starting value ${timer.starting}${this.blame('timerstarting')} must be between 10 and 1200 seconds.`);\n\t\t}\n\t\tif (timer.grace && timer.grace > 300) {\n\t\t\tthrow new Error(`Timer grace value ${timer.grace}${this.blame('timergrace')} must be at most 300 seconds.`);\n\t\t}\n\t\tif (timer.addPerTurn && timer.addPerTurn > 30) {\n\t\t\tthrow new Error(`Timer add per turn value ${timer.addPerTurn}${this.blame('timeraddperturn')} must be at most 30 seconds.`);\n\t\t}\n\t\tif (timer.maxPerTurn !== undefined && (timer.maxPerTurn < 10 || timer.maxPerTurn > 1200)) {\n\t\t\tthrow new Error(`Timer max per turn value ${timer.maxPerTurn}${this.blame('timermaxperturn')} must be between 10 and 1200 seconds.`);\n\t\t}\n\t\tif (timer.maxFirstTurn !== undefined && (timer.maxFirstTurn < 10 || timer.maxFirstTurn > 1200)) {\n\t\t\tthrow new Error(`Timer max first turn value ${timer.maxFirstTurn}${this.blame('timermaxfirstturn')} must be between 10 and 1200 seconds.`);\n\t\t}\n\n\t\tif ((format as any).cupLevelLimit) {\n\t\t\tthrow new Error(`cupLevelLimit.range[0], cupLevelLimit.range[1], cupLevelLimit.total are now rules, respectively: \"Min Level = NUMBER\", \"Max Level = NUMBER\", and \"Max Total Level = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).teamLength) {\n\t\t\tthrow new Error(`teamLength.validate[0], teamLength.validate[1], teamLength.battle are now rules, respectively: \"Min Team Size = NUMBER\", \"Max Team Size = NUMBER\", and \"Picked Team Size = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).minSourceGen) {\n\t\t\tthrow new Error(`minSourceGen is now a rule: \"Min Source Gen = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).maxLevel) {\n\t\t\tthrow new Error(`maxLevel is now a rule: \"Max Level = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).defaultLevel) {\n\t\t\tthrow new Error(`defaultLevel is now a rule: \"Default Level = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).forcedLevel) {\n\t\t\tthrow new Error(`forcedLevel is now a rule: \"Adjust Level = NUMBER\"`);\n\t\t}\n\t\tif ((format as any).maxForcedLevel) {\n\t\t\tthrow new Error(`maxForcedLevel is now a rule: \"Adjust Level Down = NUMBER\"`);\n\t\t}\n\t}\n\n\thasComplexBans() {\n\t\treturn (this.complexBans?.length > 0) || (this.complexTeamBans?.length > 0);\n\t}\n}\n\nexport class Format extends BasicEffect implements Readonly<BasicEffect> {\n\treadonly mod: string;\n\t/**\n\t * Name of the team generator algorithm, if this format uses\n\t * random/fixed teams. null if players can bring teams.\n\t */\n\tdeclare readonly team?: string;\n\toverride readonly effectType: FormatEffectType;\n\treadonly debug: boolean;\n\t/**\n\t * Whether or not a format will update ladder points if searched\n\t * for using the \"Battle!\" button.\n\t * (Challenge and tournament games will never update ladder points.)\n\t * (Defaults to `true`.)\n\t */\n\treadonly rated: boolean | string;\n\t/** Game type. */\n\treadonly gameType: GameType;\n\t/** Number of players, based on game type, for convenience */\n\treadonly playerCount: 2 | 4;\n\t/** List of rule names. */\n\treadonly ruleset: string[];\n\t/**\n\t * Base list of rule names as specified in \"./config/formats.ts\".\n\t * Used in a custom format to correctly display the altered ruleset.\n\t */\n\treadonly baseRuleset: string[];\n\t/** List of banned effects. */\n\treadonly banlist: string[];\n\t/** List of effects that aren't completely banned. */\n\treadonly restricted: string[];\n\t/** List of inherited banned effects to override. */\n\treadonly unbanlist: string[];\n\t/** List of ruleset and banlist changes in a custom format. */\n\treadonly customRules: string[] | null;\n\t/** Table of rule names and banned effects. */\n\truleTable: RuleTable | null;\n\t/** An optional function that runs at the start of a battle. */\n\treadonly onBegin?: (this: Battle) => void;\n\treadonly noLog: boolean;\n\n\t/**\n\t * Only applies to rules, not formats\n\t */\n\tdeclare readonly hasValue?: boolean | 'integer' | 'positive-integer';\n\tdeclare readonly onValidateRule?: (\n\t\tthis: { format: Format, ruleTable: RuleTable, dex: ModdedDex }, value: string\n\t) => string | void;\n\t/** ID of rule that can't be combined with this rule */\n\tdeclare readonly mutuallyExclusiveWith?: string;\n\n\tdeclare readonly battle?: ModdedBattleScriptsData;\n\tdeclare readonly pokemon?: ModdedBattlePokemon;\n\tdeclare readonly queue?: ModdedBattleQueue;\n\tdeclare readonly field?: ModdedField;\n\tdeclare readonly actions?: ModdedBattleActions;\n\tdeclare readonly side?: ModdedBattleSide;\n\tdeclare readonly challengeShow?: boolean;\n\tdeclare readonly searchShow?: boolean;\n\tdeclare readonly bestOfDefault?: boolean;\n\tdeclare readonly teraPreviewDefault?: boolean;\n\tdeclare readonly threads?: string[];\n\tdeclare readonly tournamentShow?: boolean;\n\tdeclare readonly checkCanLearn?: (\n\t\tthis: TeamValidator, move: Move, species: Species, setSources: PokemonSources, set: PokemonSet\n\t) => string | null;\n\tdeclare readonly getEvoFamily?: (this: Format, speciesid: string) => ID;\n\tdeclare readonly getSharedPower?: (this: Format, pokemon: Pokemon) => Set<string>;\n\tdeclare readonly getSharedItems?: (this: Format, pokemon: Pokemon) => Set<string>;\n\tdeclare readonly onChangeSet?: (\n\t\tthis: TeamValidator, set: PokemonSet, format: Format, setHas?: AnyObject, teamHas?: AnyObject\n\t) => string[] | void;\n\tdeclare readonly onModifySpeciesPriority?: number;\n\tdeclare readonly onModifySpecies?: (\n\t\tthis: Battle, species: Species, target?: Pokemon, source?: Pokemon, effect?: Effect\n\t) => Species | void;\n\tdeclare readonly onBattleStart?: (this: Battle) => void;\n\tdeclare readonly onTeamPreview?: (this: Battle) => void;\n\tdeclare readonly onValidateSet?: (\n\t\tthis: TeamValidator, set: PokemonSet, format: Format, setHas: AnyObject, teamHas: AnyObject\n\t) => string[] | void;\n\tdeclare readonly onValidateTeam?: (\n\t\tthis: TeamValidator, team: PokemonSet[], format: Format, teamHas: AnyObject\n\t) => string[] | void;\n\tdeclare readonly validateSet?: (this: TeamValidator, set: PokemonSet, teamHas: AnyObject) => string[] | null;\n\tdeclare readonly validateTeam?: (this: TeamValidator, team: PokemonSet[], options?: {\n\t\tremoveNicknames?: boolean,\n\t\tskipSets?: { [name: string]: { [key: string]: boolean } },\n\t}) => string[] | void;\n\tdeclare readonly section?: string;\n\tdeclare readonly column?: number;\n\n\tconstructor(data: AnyObject) {\n\t\tsuper(data);\n\n\t\tthis.mod = Utils.getString(data.mod) || 'gen9';\n\t\tthis.effectType = Utils.getString(data.effectType) as FormatEffectType || 'Condition';\n\t\tthis.debug = !!data.debug;\n\t\tthis.rated = (typeof data.rated === 'string' ? data.rated : data.rated !== false);\n\t\tthis.gameType = data.gameType || 'singles';\n\t\tthis.ruleset = data.ruleset || [];\n\t\tthis.baseRuleset = data.baseRuleset || [];\n\t\tthis.banlist = data.banlist || [];\n\t\tthis.restricted = data.restricted || [];\n\t\tthis.unbanlist = data.unbanlist || [];\n\t\tthis.customRules = data.customRules || null;\n\t\tthis.ruleTable = null;\n\t\tthis.onBegin = data.onBegin || undefined;\n\t\tthis.noLog = !!data.noLog;\n\t\tthis.playerCount = (this.gameType === 'multi' || this.gameType === 'freeforall' ? 4 : 2);\n\t\tassignMissingFields(this, data);\n\t}\n}\n\n/** merges format lists from config/formats and config/custom-formats */\nfunction mergeFormatLists(main: FormatList, custom: FormatList | undefined): FormatList {\n\t// interface for the builder.\n\tinterface FormatSection {\n\t\tsection: string;\n\t\tcolumn?: number;\n\t\tformats: FormatData[];\n\t}\n\n\t// result that is return and makes the actual list for formats.\n\tconst result: FormatList = [];\n\n\t// used as a intermediary to build the final list.\n\tconst build: FormatSection[] = [];\n\n\t// used to track current section to keep formats under their sections.\n\tlet current: FormatSection | undefined = { section: \"\", formats: [] };\n\n\t// populates the original sections and formats easily\n\t// there should be no repeat sections at this point.\n\tfor (const element of main) {\n\t\tif (element.section) {\n\t\t\tcurrent = { section: element.section, column: element.column, formats: [] };\n\t\t\tbuild.push(current);\n\t\t} else if ((element as FormatData).name) {\n\t\t\tcurrent.formats.push((element as FormatData));\n\t\t}\n\t}\n\n\t// merges the second list the hard way. Accounts for repeats.\n\tif (custom !== undefined) {\n\t\tfor (const element of custom) {\n\t\t\t// finds the section and makes it if it doesn't exist.\n\t\t\tif (element.section) {\n\t\t\t\tcurrent = build.find(e => e.section === element.section);\n\n\t\t\t\t// if it's new it makes a new entry.\n\t\t\t\tif (current === undefined) {\n\t\t\t\t\tcurrent = { section: element.section, column: element.column, formats: [] };\n\t\t\t\t\tbuild.push(current);\n\t\t\t\t}\n\t\t\t} else if ((element as FormatData).name) { // otherwise, adds the element to its section.\n\t\t\t\tcurrent.formats.push(element as FormatData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// builds the final result.\n\tfor (const element of build) {\n\t\t// adds the section to the list.\n\t\tresult.push({ section: element.section, column: element.column }, ...element.formats);\n\t}\n\n\treturn result;\n}\n\nexport class DexFormats {\n\treadonly dex: ModdedDex;\n\trulesetCache = new Map<ID, Format>();\n\tformatsListCache: readonly Format[] | null;\n\n\tconstructor(dex: ModdedDex) {\n\t\tthis.dex = dex;\n\t\tthis.formatsListCache = null;\n\t}\n\n\tload(): this {\n\t\tif (!this.dex.isBase) throw new Error(`This should only be run on the base mod`);\n\t\tthis.dex.includeMods();\n\t\tif (this.formatsListCache) return this;\n\n\t\tconst formatsList = [];\n\n\t\t// Load formats\n\t\tlet customFormats;\n\t\ttry {\n\t\t\tcustomFormats = require(`${__dirname}/../config/custom-formats`).Formats;\n\t\t\tif (!Array.isArray(customFormats)) {\n\t\t\t\tthrow new TypeError(`Exported property 'Formats' from \"./config/custom-formats.ts\" must be an array`);\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tif (e.code !== 'MODULE_NOT_FOUND' && e.code !== 'ENOENT') {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tlet Formats: AnyObject[] = require(`${__dirname}/../config/formats`).Formats;\n\t\tif (!Array.isArray(Formats)) {\n\t\t\tthrow new TypeError(`Exported property 'Formats' from \"./config/formats.ts\" must be an array`);\n\t\t}\n\t\tif (customFormats) Formats = mergeFormatLists(Formats as any, customFormats);\n\n\t\tlet section = '';\n\t\tlet column = 1;\n\t\tfor (const [i, format] of Formats.entries()) {\n\t\t\tconst id = toID(format.name);\n\t\t\tif (format.section) section = format.section;\n\t\t\tif (format.column) column = format.column;\n\t\t\tif (!format.name && format.section) continue;\n\t\t\tif (!id) {\n\t\t\t\tthrow new RangeError(`Format #${i + 1} must have a name with alphanumeric characters, not '${format.name}'`);\n\t\t\t}\n\t\t\tif (!format.section) format.section = section;\n\t\t\tif (!format.column) format.column = column;\n\t\t\tif (this.rulesetCache.has(id)) throw new Error(`Format #${i + 1} has a duplicate ID: '${id}'`);\n\t\t\tformat.effectType = 'Format';\n\t\t\tformat.baseRuleset = format.ruleset ? format.ruleset.slice() : [];\n\t\t\tif (format.challengeShow === undefined) format.challengeShow = true;\n\t\t\tif (format.searchShow === undefined) format.searchShow = true;\n\t\t\tif (format.tournamentShow === undefined) format.tournamentShow = true;\n\t\t\tif (format.bestOfDefault === undefined) format.bestOfDefault = false;\n\t\t\tif (format.teraPreviewDefault === undefined) format.teraPreviewDefault = false;\n\t\t\tif (format.mod === undefined) format.mod = 'gen9';\n\t\t\tif (!this.dex.dexes[format.mod]) throw new Error(`Format \"${format.name}\" requires nonexistent mod: '${format.mod}'`);\n\n\t\t\tconst ruleset = new Format(format);\n\t\t\tthis.rulesetCache.set(id, ruleset);\n\t\t\tformatsList.push(ruleset);\n\t\t}\n\n\t\tthis.formatsListCache = formatsList;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a sanitized format ID if valid, or throws if invalid.\n\t */\n\tvalidate(name: string) {\n\t\tconst [formatName, customRulesString] = name.split('@@@', 2);\n\t\tconst format = this.get(formatName);\n\t\tif (format.effectType !== 'Format') throw new Error(`Unrecognized format \"${formatName}\"`);\n\t\tif (!customRulesString) return format.id;\n\t\tconst ruleTable = this.getRuleTable(format);\n\t\tlet hasCustomRules = false;\n\t\tlet hasPokemonRule = false;\n\t\tconst customRules = customRulesString.split(',').map(rule => {\n\t\t\trule = rule.replace(/[\\r\\n|]*/g, '').trim();\n\t\t\tconst ruleSpec = this.validateRule(rule);\n\t\t\tif (typeof ruleSpec === 'string') {\n\t\t\t\tif (ruleSpec === '-pokemontag:allpokemon' || ruleSpec === '+pokemontag:allpokemon') {\n\t\t\t\t\tif (hasPokemonRule) throw new Error(`You can't ban/unban pokemon before banning/unbanning all Pokemon.`);\n\t\t\t\t}\n\t\t\t\tif (this.isPokemonRule(ruleSpec)) hasPokemonRule = true;\n\t\t\t}\n\t\t\tif (typeof ruleSpec !== 'string' || !ruleTable.has(ruleSpec)) hasCustomRules = true;\n\t\t\treturn rule;\n\t\t});\n\t\tif (!hasCustomRules) throw new Error(`None of your custom rules change anything`);\n\t\tconst validatedFormatid = format.id + '@@@' + customRules.join(',');\n\t\tconst moddedFormat = this.get(validatedFormatid, true);\n\t\tthis.getRuleTable(moddedFormat);\n\t\treturn validatedFormatid;\n\t}\n\n\t/**\n\t * The default mode is `isTrusted = false`, which is a bit of a\n\t * footgun. PS will never do anything unsafe, but `isTrusted = true`\n\t * will throw if the format string is invalid, while\n\t * `isTrusted = false` will silently fall back to the original format.\n\t */\n\tget(name?: string | Format, isTrusted = false): Format {\n\t\tif (name && typeof name !== 'string') return name;\n\n\t\tname = (name || '').trim();\n\t\tlet id = toID(name);\n\n\t\tif (!name.includes('@@@')) {\n\t\t\tconst ruleset = this.rulesetCache.get(id);\n\t\t\tif (ruleset) return ruleset;\n\t\t}\n\n\t\tif (this.dex.getAlias(id)) {\n\t\t\tid = this.dex.getAlias(id)!;\n\t\t\tname = id;\n\t\t}\n\t\tif (this.dex.data.Rulesets.hasOwnProperty(DEFAULT_MOD + id)) {\n\t\t\tid = (DEFAULT_MOD + id) as ID;\n\t\t}\n\t\tlet supplementaryAttributes: AnyObject | null = null;\n\t\tif (name.includes('@@@')) {\n\t\t\tif (!isTrusted) {\n\t\t\t\ttry {\n\t\t\t\t\tname = this.validate(name);\n\t\t\t\t\tisTrusted = true;\n\t\t\t\t} catch {}\n\t\t\t}\n\t\t\tconst [newName, customRulesString] = name.split('@@@', 2);\n\t\t\tname = newName.trim();\n\t\t\tid = toID(name);\n\t\t\tif (isTrusted && customRulesString) {\n\t\t\t\tsupplementaryAttributes = {\n\t\t\t\t\tcustomRules: customRulesString.split(','),\n\t\t\t\t\tsearchShow: false,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tlet effect;\n\t\tif (this.dex.data.Rulesets.hasOwnProperty(id)) {\n\t\t\teffect = new Format({ name, ...this.dex.data.Rulesets[id] as any, ...supplementaryAttributes });\n\t\t} else {\n\t\t\teffect = new Format({ id, name, exists: false });\n\t\t}\n\t\treturn effect;\n\t}\n\n\tall() {\n\t\tthis.load();\n\t\treturn this.formatsListCache!;\n\t}\n\n\tisPokemonRule(ruleSpec: string) {\n\t\treturn (\n\t\t\truleSpec.slice(1).startsWith('pokemontag:') || ruleSpec.slice(1).startsWith('pokemon:') ||\n\t\t\truleSpec.slice(1).startsWith('basepokemon:')\n\t\t);\n\t}\n\tgetRuleTable(format: Format, depth = 1, repeals?: Map<string, number>): RuleTable {\n\t\tif (format.ruleTable && !repeals) return format.ruleTable;\n\t\tif (format.name.length > 50) {\n\t\t\tthrow new Error(`Format \"${format.name}\" has a name longer than 50 characters`);\n\t\t}\n\t\tif (depth === 1) {\n\t\t\tconst dex = this.dex.mod(format.mod);\n\t\t\tif (dex !== this.dex) {\n\t\t\t\treturn dex.formats.getRuleTable(format, 2, repeals);\n\t\t\t}\n\t\t}\n\t\tconst ruleTable = new RuleTable();\n\n\t\tconst ruleset = format.ruleset.slice();\n\t\tfor (const ban of format.banlist) {\n\t\t\truleset.push('-' + ban);\n\t\t}\n\t\tfor (const ban of format.restricted) {\n\t\t\truleset.push('*' + ban);\n\t\t}\n\t\tfor (const ban of format.unbanlist) {\n\t\t\truleset.push('+' + ban);\n\t\t}\n\t\tif (format.customRules) {\n\t\t\truleset.push(...format.customRules);\n\t\t}\n\t\tif (format.checkCanLearn) {\n\t\t\truleTable.checkCanLearn = [format.checkCanLearn, format.name];\n\t\t}\n\n\t\t// apply rule repeals before other rules\n\t\t// repeals is a ruleid:depth map (positive: unused, negative: used)\n\t\tconst ruleSpecs = ruleset.map(rule => this.validateRule(rule, format));\n\t\tfor (let ruleSpec of ruleSpecs) {\n\t\t\tif (typeof ruleSpec !== 'string') continue;\n\t\t\tif (ruleSpec.startsWith('^')) ruleSpec = ruleSpec.slice(1);\n\t\t\tif (ruleSpec.startsWith('!') && !ruleSpec.startsWith('!!')) {\n\t\t\t\trepeals ||= new Map();\n\t\t\t\trepeals.set(ruleSpec.slice(1), depth);\n\t\t\t}\n\t\t}\n\n\t\tlet skipPokemonBans = ruleSpecs.filter(r => r === '+pokemontag:allpokemon').length;\n\t\tlet hasPokemonBans = false;\n\t\tconst warnForNoPokemonBans = !!skipPokemonBans && !format.customRules;\n\t\tskipPokemonBans += ruleSpecs.filter(r => r === '-pokemontag:allpokemon').length;\n\n\t\t// if (format.customRules) console.log(`${format.id}: ${format.customRules.join(', ')}`);\n\n\t\tfor (let ruleSpec of ruleSpecs) {\n\t\t\t// complex ban/unban\n\t\t\tif (typeof ruleSpec !== 'string') {\n\t\t\t\tif (ruleSpec[0] === 'complexTeamBan') {\n\t\t\t\t\tconst complexTeamBan: ComplexTeamBan = ruleSpec.slice(1) as ComplexTeamBan;\n\t\t\t\t\truleTable.addComplexTeamBan(complexTeamBan[0], complexTeamBan[1], complexTeamBan[2], complexTeamBan[3]);\n\t\t\t\t} else if (ruleSpec[0] === 'complexBan') {\n\t\t\t\t\tconst complexBan: ComplexBan = ruleSpec.slice(1) as ComplexBan;\n\t\t\t\t\truleTable.addComplexBan(complexBan[0], complexBan[1], complexBan[2], complexBan[3]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Unrecognized rule spec ${ruleSpec}`);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// ^ is undocumented because I really don't want it used outside of tests\n\t\t\tconst noWarn = ruleSpec.startsWith('^');\n\t\t\tif (noWarn) ruleSpec = ruleSpec.slice(1);\n\n\t\t\t// repeal rule\n\t\t\tif (ruleSpec.startsWith('!') && !ruleSpec.startsWith('!!')) {\n\t\t\t\tconst repealDepth = repeals!.get(ruleSpec.slice(1));\n\t\t\t\tif (repealDepth === undefined) throw new Error(`Multiple \"${ruleSpec}\" rules in ${format.name}`);\n\t\t\t\tif (repealDepth === depth && !noWarn) {\n\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" did nothing because \"${ruleSpec.slice(1)}\" is not in effect`);\n\t\t\t\t}\n\t\t\t\tif (repealDepth === -depth) repeals!.delete(ruleSpec.slice(1));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// individual ban/unban\n\t\t\tif ('+*-'.includes(ruleSpec.charAt(0))) {\n\t\t\t\tif (ruleTable.has(ruleSpec)) {\n\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" in \"${format.name}\" already exists in \"${ruleTable.get(ruleSpec) || format.name}\"`);\n\t\t\t\t}\n\t\t\t\tif (skipPokemonBans) {\n\t\t\t\t\tif (ruleSpec === '-pokemontag:allpokemon' || ruleSpec === '+pokemontag:allpokemon') {\n\t\t\t\t\t\tskipPokemonBans--;\n\t\t\t\t\t} else if (this.isPokemonRule(ruleSpec)) {\n\t\t\t\t\t\tif (!format.customRules) {\n\t\t\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" must go after any \"All Pokemon\" rule in ${format.name} (\"+All Pokemon\" should go in ruleset, not unbanlist)`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const prefix of '+*-') ruleTable.delete(prefix + ruleSpec.slice(1));\n\t\t\t\truleTable.set(ruleSpec, '');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// rule\n\t\t\tlet [formatid, value] = ruleSpec.split('=');\n\t\t\tconst subformat = this.get(formatid);\n\t\t\tconst repealAndReplace = ruleSpec.startsWith('!!');\n\t\t\tif (repeals?.has(subformat.id)) {\n\t\t\t\trepeals.set(subformat.id, -Math.abs(repeals.get(subformat.id)!));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (subformat.hasValue) {\n\t\t\t\tif (value === undefined) throw new Error(`Rule \"${ruleSpec}\" should have a value (like \"${ruleSpec} = something\")`);\n\t\t\t\tif (value === 'Current Gen') value = `${this.dex.gen}`;\n\t\t\t\tif ((subformat.id === 'pickedteamsize' || subformat.id === 'evlimit') && value === 'Auto') {\n\t\t\t\t\t// can't be resolved until later\n\t\t\t\t} else if (subformat.hasValue === 'integer' || subformat.hasValue === 'positive-integer') {\n\t\t\t\t\tconst intValue = parseInt(value);\n\t\t\t\t\tif (isNaN(intValue) || value !== `${intValue}`) {\n\t\t\t\t\t\tthrow new Error(`In rule \"${ruleSpec}\", \"${value}\" must be an integer number.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (subformat.hasValue === 'positive-integer') {\n\t\t\t\t\tif (parseInt(value) === 0) {\n\t\t\t\t\t\tthrow new Error(`In rule \"${ruleSpec}\", \"${value}\" must be positive (to remove it, use the rule \"! ${subformat.name}\").`);\n\t\t\t\t\t}\n\t\t\t\t\tif (parseInt(value) <= 0) {\n\t\t\t\t\t\tthrow new Error(`In rule \"${ruleSpec}\", \"${value}\" must be positive.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst oldValue = ruleTable.valueRules.get(subformat.id);\n\t\t\t\tif (oldValue === value) {\n\t\t\t\t\tif (!noWarn) {\n\t\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" is redundant with existing rule \"${subformat.id}=${value}\"${ruleTable.blame(subformat.id)}.`);\n\t\t\t\t\t}\n\t\t\t\t} else if (repealAndReplace) {\n\t\t\t\t\tif (oldValue === undefined) {\n\t\t\t\t\t\tif (subformat.mutuallyExclusiveWith && ruleTable.valueRules.has(subformat.mutuallyExclusiveWith)) {\n\t\t\t\t\t\t\tif (this.dex.formats.get(subformat.mutuallyExclusiveWith).ruleset.length) {\n\t\t\t\t\t\t\t\tthrow new Error(`This format does not support \"!!\"`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\truleTable.valueRules.delete(subformat.mutuallyExclusiveWith);\n\t\t\t\t\t\t\truleTable.delete(subformat.mutuallyExclusiveWith);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" is not replacing anything (it should not have \"!!\")`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (oldValue !== undefined) {\n\t\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" conflicts with \"${subformat.id}=${oldValue}\"${ruleTable.blame(subformat.id)} (Use \"!! ${ruleSpec}\" to override \"${subformat.id}=${oldValue}\".)`);\n\t\t\t\t\t}\n\t\t\t\t\tif (subformat.mutuallyExclusiveWith && ruleTable.valueRules.has(subformat.mutuallyExclusiveWith)) {\n\t\t\t\t\t\tconst oldRule = `\"${subformat.mutuallyExclusiveWith}=${ruleTable.valueRules.get(subformat.mutuallyExclusiveWith)}\"`;\n\t\t\t\t\t\tthrow new Error(`Format can't simultaneously have \"${ruleSpec}\" and ${oldRule}${ruleTable.blame(subformat.mutuallyExclusiveWith)} (Use \"!! ${ruleSpec}\" to override ${oldRule}.)`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\truleTable.valueRules.set(subformat.id, value);\n\t\t\t} else {\n\t\t\t\tif (value !== undefined) throw new Error(`Rule \"${ruleSpec}\" should not have a value (no equals sign)`);\n\t\t\t\tif (repealAndReplace) throw new Error(`\"!!\" is not supported for this rule`);\n\t\t\t\tif (ruleTable.has(subformat.id) && !repealAndReplace && !noWarn) {\n\t\t\t\t\tthrow new Error(`Rule \"${ruleSpec}\" in \"${format.name}\" already exists in \"${ruleTable.get(subformat.id) || format.name}\"`);\n\t\t\t\t}\n\t\t\t}\n\t\t\truleTable.set(subformat.id, '');\n\t\t\tif (depth > 16) {\n\t\t\t\tthrow new Error(`Excessive ruleTable recursion in ${format.name}: ${ruleSpec} of ${format.ruleset}`);\n\t\t\t}\n\t\t\tconst subRuleTable = this.getRuleTable(subformat, depth + 1, repeals);\n\t\t\tfor (const [ruleid, sourceFormat] of subRuleTable) {\n\t\t\t\t// don't check for \"already exists\" here; multiple inheritance is allowed\n\t\t\t\tif (repeals?.has(ruleid)) continue;\n\n\t\t\t\tif (skipPokemonBans && '+*-'.includes(ruleid.charAt(0))) {\n\t\t\t\t\tif (this.isPokemonRule(ruleid)) {\n\t\t\t\t\t\thasPokemonBans = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst newValue = subRuleTable.valueRules.get(ruleid);\n\t\t\t\tconst oldValue = ruleTable.valueRules.get(ruleid);\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\t// set a value\n\t\t\t\t\tconst subSubFormat = this.get(ruleid);\n\t\t\t\t\tif (subSubFormat.mutuallyExclusiveWith && ruleTable.valueRules.has(subSubFormat.mutuallyExclusiveWith)) {\n\t\t\t\t\t\t// mutually exclusive conflict!\n\t\t\t\t\t\tthrow new Error(`Rule \"${ruleid}=${newValue}\" from ${subformat.name}${subRuleTable.blame(ruleid)} conflicts with \"${subSubFormat.mutuallyExclusiveWith}=${ruleTable.valueRules.get(subSubFormat.mutuallyExclusiveWith)}\"${ruleTable.blame(subSubFormat.mutuallyExclusiveWith)} (Repeal one with ! before adding another)`);\n\t\t\t\t\t}\n\t\t\t\t\tif (newValue !== oldValue) {\n\t\t\t\t\t\tif (oldValue !== undefined) {\n\t\t\t\t\t\t\t// conflict!\n\t\t\t\t\t\t\tthrow new Error(`Rule \"${ruleid}=${newValue}\" from ${subformat.name}${subRuleTable.blame(ruleid)} conflicts with \"${ruleid}=${oldValue}\"${ruleTable.blame(ruleid)} (Repeal one with ! before adding another)`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\truleTable.valueRules.set(ruleid, newValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\truleTable.set(ruleid, sourceFormat || subformat.name);\n\t\t\t}\n\t\t\tfor (const [subRule, source, limit, bans] of subRuleTable.complexBans) {\n\t\t\t\truleTable.addComplexBan(subRule, source || subformat.name, limit, bans);\n\t\t\t}\n\t\t\tfor (const [subRule, source, limit, bans] of subRuleTable.complexTeamBans) {\n\t\t\t\truleTable.addComplexTeamBan(subRule, source || subformat.name, limit, bans);\n\t\t\t}\n\t\t\tif (subRuleTable.checkCanLearn) {\n\t\t\t\tif (ruleTable.checkCanLearn) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`\"${format.name}\" has conflicting move validation rules from ` +\n\t\t\t\t\t\t`\"${ruleTable.checkCanLearn[1]}\" and \"${subRuleTable.checkCanLearn[1]}\"`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\truleTable.checkCanLearn = subRuleTable.checkCanLearn;\n\t\t\t}\n\t\t}\n\t\tif (!hasPokemonBans && warnForNoPokemonBans) {\n\t\t\tthrow new Error(`\"+All Pokemon\" rule has no effect (no species are banned by default, and it does not override obtainability rules)`);\n\t\t}\n\t\truleTable.getTagRules();\n\n\t\truleTable.resolveNumbers(format, this.dex);\n\n\t\tconst canMegaEvo = this.dex.gen <= 7 || ruleTable.has('+pokemontag:past');\n\t\tif (ruleTable.has('obtainableformes') && canMegaEvo &&\n\t\t\truleTable.isBannedSpecies(this.dex.species.get('rayquazamega')) &&\n\t\t\t!ruleTable.isBannedSpecies(this.dex.species.get('rayquaza'))\n\t\t) {\n\t\t\t// Banning Rayquaza-Mega implicitly adds Mega Rayquaza Clause\n\t\t\t// note that already having it explicitly in the ruleset is ok\n\t\t\truleTable.set('megarayquazaclause', '');\n\t\t}\n\n\t\tfor (const rule of ruleTable.keys()) {\n\t\t\tif (\"+*-!\".includes(rule.charAt(0))) continue;\n\t\t\tconst subFormat = this.dex.formats.get(rule);\n\t\t\tif (subFormat.exists) {\n\t\t\t\tconst value = subFormat.onValidateRule?.call(\n\t\t\t\t\t{ format, ruleTable, dex: this.dex }, ruleTable.valueRules.get(rule as ID)!\n\t\t\t\t);\n\t\t\t\tif (typeof value === 'string') ruleTable.valueRules.set(subFormat.id, value);\n\t\t\t}\n\t\t}\n\n\t\tif (!repeals) format.ruleTable = ruleTable;\n\t\treturn ruleTable;\n\t}\n\n\tvalidateRule(rule: string, format: Format | null = null) {\n\t\tif (rule !== rule.trim()) throw new Error(`Rule \"${rule}\" should be trimmed`);\n\t\tswitch (rule.charAt(0)) {\n\t\tcase '-':\n\t\tcase '*':\n\t\tcase '+':\n\t\t\tif (rule.slice(1).includes('>') || rule.slice(1).includes('+')) {\n\t\t\t\tlet buf = rule.slice(1);\n\t\t\t\tconst gtIndex = buf.lastIndexOf('>');\n\t\t\t\tlet limit = rule.startsWith('+') ? Infinity : 0;\n\t\t\t\tif (gtIndex >= 0 && /^[0-9]+$/.test(buf.slice(gtIndex + 1).trim())) {\n\t\t\t\t\tif (limit === 0) limit = parseInt(buf.slice(gtIndex + 1));\n\t\t\t\t\tbuf = buf.slice(0, gtIndex);\n\t\t\t\t}\n\t\t\t\tlet checkTeam = buf.includes('++');\n\t\t\t\tconst banNames = buf.split(checkTeam ? '++' : '+').map(v => v.trim());\n\t\t\t\tif (banNames.length === 1 && limit > 0) checkTeam = true;\n\t\t\t\tconst innerRule = banNames.join(checkTeam ? ' ++ ' : ' + ');\n\t\t\t\tconst bans = banNames.map(v => this.validateBanRule(v));\n\n\t\t\t\tif (checkTeam) {\n\t\t\t\t\treturn ['complexTeamBan', innerRule, '', limit, bans];\n\t\t\t\t}\n\t\t\t\tif (bans.length > 1 || limit > 0) {\n\t\t\t\t\treturn ['complexBan', innerRule, '', limit, bans];\n\t\t\t\t}\n\t\t\t\tthrow new Error(`Confusing rule ${rule}`);\n\t\t\t}\n\t\t\treturn rule.charAt(0) + this.validateBanRule(rule.slice(1));\n\t\tdefault:\n\t\t\tconst [ruleName, value] = rule.split('=');\n\t\t\tlet id: string = toID(ruleName);\n\t\t\tconst ruleset = this.dex.formats.get(id);\n\t\t\tif (!ruleset.exists) {\n\t\t\t\tthrow new Error(`Unrecognized rule \"${rule}\"`);\n\t\t\t}\n\t\t\tif (typeof value === 'string') id = `${id}=${value.trim()}`;\n\t\t\tif (rule.startsWith('^!')) return `^!${id}`;\n\t\t\tif (rule.startsWith('^')) return `^${id}`;\n\t\t\tif (rule.startsWith('!!')) return `!!${id}`;\n\t\t\tif (rule.startsWith('!')) return `!${id}`;\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tvalidPokemonTag(tagid: ID) {\n\t\tconst tag = Tags.hasOwnProperty(tagid) && Tags[tagid];\n\t\tif (!tag) return false;\n\t\treturn !!(tag.speciesFilter || tag.genericFilter);\n\t}\n\n\tvalidateBanRule(rule: string) {\n\t\tlet id = toID(rule);\n\t\tif (id === 'unreleased') return 'unreleased';\n\t\tif (id === 'nonexistent') return 'nonexistent';\n\t\tconst matches = [];\n\t\tlet matchTypes = ['pokemon', 'move', 'ability', 'item', 'nature', 'pokemontag'];\n\t\tfor (const matchType of matchTypes) {\n\t\t\tif (rule.startsWith(`${matchType}:`)) {\n\t\t\t\tmatchTypes = [matchType];\n\t\t\t\tid = id.slice(matchType.length) as ID;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst ruleid = id;\n\t\tid = this.dex.getAlias(id) || id;\n\t\tfor (const matchType of matchTypes) {\n\t\t\tif (matchType === 'item' && ruleid === 'noitem') return 'item:noitem';\n\t\t\tlet table;\n\t\t\tswitch (matchType) {\n\t\t\tcase 'pokemon': table = this.dex.data.Pokedex; break;\n\t\t\tcase 'move': table = this.dex.data.Moves; break;\n\t\t\tcase 'item': table = this.dex.data.Items; break;\n\t\t\tcase 'ability': table = this.dex.data.Abilities; break;\n\t\t\tcase 'nature': table = this.dex.data.Natures; break;\n\t\t\tcase 'pokemontag':\n\t\t\t\t// valid pokemontags\n\t\t\t\tconst validTags = [\n\t\t\t\t\t// all\n\t\t\t\t\t'allpokemon', 'allitems', 'allmoves', 'allabilities', 'allnatures',\n\t\t\t\t];\n\t\t\t\tif (validTags.includes(ruleid) || this.validPokemonTag(ruleid)) {\n\t\t\t\t\tmatches.push('pokemontag:' + ruleid);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized match type.`);\n\t\t\t}\n\t\t\tif (table.hasOwnProperty(id)) {\n\t\t\t\tif (matchType === 'pokemon') {\n\t\t\t\t\tconst species = table[id] as SpeciesData;\n\t\t\t\t\tif ((species.otherFormes || species.cosmeticFormes) && ruleid === id) {\n\t\t\t\t\t\tmatches.push('basepokemon:' + id);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmatches.push(matchType + ':' + id);\n\t\t\t} else if (matchType === 'pokemon' && id.endsWith('base')) {\n\t\t\t\tid = id.slice(0, -4) as ID;\n\t\t\t\tif (table.hasOwnProperty(id)) {\n\t\t\t\t\tmatches.push('pokemon:' + id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (matches.length > 1) {\n\t\t\tthrow new Error(`More than one thing matches \"${rule}\"; please specify one of: ` + matches.join(', '));\n\t\t}\n\t\tif (matches.length < 1) {\n\t\t\tthrow new Error(`Nothing matches \"${rule}\"`);\n\t\t}\n\t\treturn matches[0];\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
