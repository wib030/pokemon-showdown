{
  "version": 3,
  "sources": ["../../sim/battle-queue.ts"],
  "sourcesContent": ["/**\n * Simulator Battle Action Queue\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * The action queue is the core of the battle simulation. A rough overview of\n * the core battle loop:\n *\n * - chosen moves/switches are added to the action queue\n * - the action queue is sorted in speed/priority order\n * - we go through the action queue\n * - repeat\n *\n * @license MIT\n */\n\nimport type { Battle } from './battle';\n\n/** A move action */\nexport interface MoveAction {\n\t/** action type */\n\tchoice: 'move' | 'beforeTurnMove' | 'priorityChargeMove';\n\torder: 3 | 5 | 200 | 201 | 199 | 106;\n\t/** priority of the action (lower first) */\n\tpriority: number;\n\t/** fractional priority of the action (lower first) */\n\tfractionalPriority: number;\n\t/** speed of pokemon using move (higher first if priority tie) */\n\tspeed: number;\n\t/** the pokemon doing the move */\n\tpokemon: Pokemon;\n\t/** location of the target, relative to pokemon's side */\n\ttargetLoc: number;\n\t/** original target pokemon, for target-tracking moves */\n\toriginalTarget: Pokemon;\n\t/** a move to use (move action only) */\n\tmoveid: ID;\n\t/** a move to use (move action only) */\n\tmove: Move;\n\t/** true if megaing or ultra bursting */\n\tmega: boolean | 'done';\n\t/** if zmoving, the name of the zmove */\n\tzmove?: string;\n\t/** if dynamaxed, the name of the max move */\n\tmaxMove?: string;\n\t/** effect that called the move (eg Instruct) if any */\n\tsourceEffect?: Effect | null;\n}\n\n/** A switch action */\nexport interface SwitchAction {\n\t/** action type */\n\tchoice: 'switch' | 'instaswitch' | 'revivalblessing';\n\torder: 3 | 6 | 103;\n\t/** priority of the action (lower first) */\n\tpriority: number;\n\t/** speed of pokemon switching (higher first if priority tie) */\n\tspeed: number;\n\t/** the pokemon doing the switch */\n\tpokemon: Pokemon;\n\t/** pokemon to switch to */\n\ttarget: Pokemon;\n\t/** effect that called the switch (eg U */\n\tsourceEffect: Effect | null;\n}\n\n/** A Team Preview choice action */\nexport interface TeamAction {\n\t/** action type */\n\tchoice: 'team';\n\t/** priority of the action (lower first) */\n\tpriority: number;\n\t/** unused for this action type */\n\tspeed: 1;\n\t/** the pokemon switching */\n\tpokemon: Pokemon;\n\t/** new index */\n\tindex: number;\n}\n\n/** A generic action not done by a pokemon */\nexport interface FieldAction {\n\t/** action type */\n\tchoice: 'start' | 'residual' | 'pass' | 'beforeTurn';\n\t/** priority of the action (lower first) */\n\tpriority: number;\n\t/** unused for this action type */\n\tspeed: 1;\n\t/** unused for this action type */\n\tpokemon: null;\n}\n\n/** A generic action done by a single pokemon */\nexport interface PokemonAction {\n\t/** action type */\n\tchoice: 'megaEvo' | 'megaEvoX' | 'megaEvoY' | 'shift' | 'runSwitch' | 'event' | 'runDynamax' | 'terastallize';\n\t/** priority of the action (lower first) */\n\tpriority: number;\n\t/** speed of pokemon doing action (higher first if priority tie) */\n\tspeed: number;\n\t/** the pokemon doing action */\n\tpokemon: Pokemon;\n\t/** `runSwitch` only: the pokemon forcing this pokemon to switch in */\n\tdragger?: Pokemon;\n\t/** `event` only: the event to run */\n\tevent?: string;\n}\n\nexport type Action = MoveAction | SwitchAction | TeamAction | FieldAction | PokemonAction;\n\n/**\n * An ActionChoice is like an Action and has the same structure, but it doesn't need to be fully filled out.\n *\n * Any Action or ChosenAction qualifies as an ActionChoice.\n *\n * The `[k: string]: any` part is required so TypeScript won't warn about unnecessary properties.\n */\nexport interface ActionChoice {\n\tchoice: string;\n\t[k: string]: any;\n}\n\n/**\n * Kind of like a priority queue, although not sorted mid-turn in Gen 1-7.\n *\n * Sort order is documented in `BattleQueue.comparePriority`.\n */\nexport class BattleQueue {\n\tbattle: Battle;\n\tlist: Action[];\n\tconstructor(battle: Battle) {\n\t\tthis.battle = battle;\n\t\tthis.list = [];\n\t\tconst queueScripts = battle.format.queue || battle.dex.data.Scripts.queue;\n\t\tif (queueScripts) Object.assign(this, queueScripts);\n\t}\n\n\tshift() {\n\t\treturn this.list.shift();\n\t}\n\tpeek(end?: boolean): Action | undefined {\n\t\treturn this.list[end ? this.list.length - 1 : 0];\n\t}\n\tpush(action: Action) {\n\t\treturn this.list.push(action);\n\t}\n\tunshift(action: Action) {\n\t\treturn this.list.unshift(action);\n\t}\n\t[Symbol.iterator]() { return this.list[Symbol.iterator](); }\n\tentries() {\n\t\treturn this.list.entries();\n\t}\n\n\t/**\n\t * Takes an ActionChoice, and fills it out into a full Action object.\n\t *\n\t * Returns an array of Actions because some ActionChoices (like mega moves)\n\t * resolve to two Actions (mega evolution + use move)\n\t */\n\tresolveAction(action: ActionChoice, midTurn = false): Action[] {\n\t\tif (!action) throw new Error(`Action not passed to resolveAction`);\n\t\tif (action.choice === 'pass') return [];\n\t\tconst actions = [action];\n\n\t\tif (!action.side && action.pokemon) action.side = action.pokemon.side;\n\t\tif (!action.move && action.moveid) action.move = this.battle.dex.getActiveMove(action.moveid);\n\t\tif (!action.order) {\n\t\t\tconst orders: { [choice: string]: number } = {\n\t\t\t\tteam: 1,\n\t\t\t\tstart: 2,\n\t\t\t\tinstaswitch: 3,\n\t\t\t\tbeforeTurn: 4,\n\t\t\t\tbeforeTurnMove: 5,\n\t\t\t\trevivalblessing: 6,\n\n\t\t\t\trunSwitch: 101,\n\t\t\t\tswitch: 103,\n\t\t\t\tmegaEvo: 104,\n\t\t\t\tmegaEvoX: 104,\n\t\t\t\tmegaEvoY: 104,\n\t\t\t\trunDynamax: 105,\n\t\t\t\tterastallize: 106,\n\t\t\t\tpriorityChargeMove: 107,\n\n\t\t\t\tshift: 200,\n\t\t\t\t// default is 200 (for moves)\n\n\t\t\t\tresidual: 300,\n\t\t\t};\n\t\t\tif (action.choice in orders) {\n\t\t\t\taction.order = orders[action.choice];\n\t\t\t} else {\n\t\t\t\taction.order = 200;\n\t\t\t\tif (!['move', 'event'].includes(action.choice)) {\n\t\t\t\t\tthrow new Error(`Unexpected orderless action ${action.choice}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!midTurn) {\n\t\t\tif (action.choice === 'move') {\n\t\t\t\tif (!action.maxMove && !action.zmove && action.move.beforeTurnCallback) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'beforeTurnMove', pokemon: action.pokemon, move: action.move, targetLoc: action.targetLoc,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (action.mega && !action.pokemon.isSkyDropped()) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'megaEvo',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (action.megax && !action.pokemon.isSkyDropped()) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'megaEvoX',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (action.megay && !action.pokemon.isSkyDropped()) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'megaEvoY',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (action.terastallize && !action.pokemon.terastallized) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'terastallize',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (action.maxMove && !action.pokemon.volatiles['dynamax']) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'runDynamax',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tif (!action.maxMove && !action.zmove && action.move.priorityChargeCallback) {\n\t\t\t\t\tactions.unshift(...this.resolveAction({\n\t\t\t\t\t\tchoice: 'priorityChargeMove',\n\t\t\t\t\t\tpokemon: action.pokemon,\n\t\t\t\t\t\tmove: action.move,\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\taction.fractionalPriority = this.battle.runEvent('FractionalPriority', action.pokemon, null, action.move, 0);\n\t\t\t} else if (['switch', 'instaswitch'].includes(action.choice)) {\n\t\t\t\tif (typeof action.pokemon.switchFlag === 'string') {\n\t\t\t\t\taction.sourceEffect = this.battle.dex.moves.get(action.pokemon.switchFlag as ID) as any;\n\t\t\t\t}\n\t\t\t\taction.pokemon.switchFlag = false;\n\t\t\t}\n\t\t}\n\n\t\tconst deferPriority = this.battle.gen === 7 && action.mega && action.mega !== 'done';\n\t\tif (action.move) {\n\t\t\tlet target = null;\n\t\t\taction.move = this.battle.dex.getActiveMove(action.move);\n\n\t\t\tif (!action.targetLoc) {\n\t\t\t\ttarget = this.battle.getRandomTarget(action.pokemon, action.move);\n\t\t\t\t// TODO: what actually happens here?\n\t\t\t\tif (target) action.targetLoc = action.pokemon.getLocOf(target);\n\t\t\t}\n\t\t\taction.originalTarget = action.pokemon.getAtLoc(action.targetLoc);\n\t\t}\n\t\tif (!deferPriority) this.battle.getActionSpeed(action);\n\t\treturn actions as any;\n\t}\n\n\t/**\n\t * Makes the passed action happen next (skipping speed order).\n\t */\n\tprioritizeAction(action: MoveAction | SwitchAction, sourceEffect?: Effect) {\n\t\tfor (const [i, curAction] of this.list.entries()) {\n\t\t\tif (curAction === action) {\n\t\t\t\tthis.list.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\taction.sourceEffect = sourceEffect;\n\t\taction.order = 3;\n\t\tthis.list.unshift(action);\n\t}\n\n\t/**\n\t * Changes a pokemon's action, and inserts its new action\n\t * in priority order.\n\t *\n\t * You'd normally want the OverrideAction event (which doesn't\n\t * change priority order).\n\t */\n\tchangeAction(pokemon: Pokemon, action: ActionChoice) {\n\t\tthis.cancelAction(pokemon);\n\t\tif (!action.pokemon) action.pokemon = pokemon;\n\t\tthis.insertChoice(action);\n\t}\n\n\taddChoice(choices: ActionChoice | ActionChoice[]) {\n\t\tif (!Array.isArray(choices)) choices = [choices];\n\t\tfor (const choice of choices) {\n\t\t\tconst resolvedChoices = this.resolveAction(choice);\n\t\t\tthis.list.push(...resolvedChoices);\n\t\t\tfor (const resolvedChoice of resolvedChoices) {\n\t\t\t\tif (resolvedChoice && resolvedChoice.choice === 'move' && resolvedChoice.move.id !== 'recharge') {\n\t\t\t\t\tresolvedChoice.pokemon.side.lastSelectedMove = resolvedChoice.move.id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twillAct() {\n\t\tfor (const action of this.list) {\n\t\t\tif (['move', 'switch', 'instaswitch', 'shift'].includes(action.choice)) {\n\t\t\t\treturn action;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\twillMove(pokemon: Pokemon) {\n\t\tif (pokemon.fainted) return null;\n\t\tfor (const action of this.list) {\n\t\t\tif (action.choice === 'move' && action.pokemon === pokemon) {\n\t\t\t\treturn action;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tcancelAction(pokemon: Pokemon) {\n\t\tconst oldLength = this.list.length;\n\t\tfor (let i = 0; i < this.list.length; i++) {\n\t\t\tif (this.list[i].pokemon === pokemon) {\n\t\t\t\tthis.list.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\treturn this.list.length !== oldLength;\n\t}\n\n\tcancelMove(pokemon: Pokemon) {\n\t\tfor (const [i, action] of this.list.entries()) {\n\t\t\tif (action.choice === 'move' && action.pokemon === pokemon) {\n\t\t\t\tthis.list.splice(i, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\twillSwitch(pokemon: Pokemon) {\n\t\tfor (const action of this.list) {\n\t\t\tif (['switch', 'instaswitch'].includes(action.choice) && action.pokemon === pokemon) {\n\t\t\t\treturn action;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Inserts the passed action into the action queue when it normally\n\t * would have happened (sorting by priority/speed), without\n\t * re-sorting the existing actions.\n\t */\n\tinsertChoice(choices: ActionChoice | ActionChoice[], midTurn = false) {\n\t\tif (Array.isArray(choices)) {\n\t\t\tfor (const choice of choices) {\n\t\t\t\tthis.insertChoice(choice);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst choice = choices;\n\n\t\tif (choice.pokemon) {\n\t\t\tchoice.pokemon.updateSpeed();\n\t\t}\n\t\tconst actions = this.resolveAction(choice, midTurn);\n\n\t\tlet firstIndex = null;\n\t\tlet lastIndex = null;\n\t\tfor (const [i, curAction] of this.list.entries()) {\n\t\t\tconst compared = this.battle.comparePriority(actions[0], curAction);\n\t\t\tif (compared <= 0 && firstIndex === null) {\n\t\t\t\tfirstIndex = i;\n\t\t\t}\n\t\t\tif (compared < 0) {\n\t\t\t\tlastIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (firstIndex === null) {\n\t\t\tthis.list.push(...actions);\n\t\t} else {\n\t\t\tif (lastIndex === null) lastIndex = this.list.length;\n\t\t\tconst index = firstIndex === lastIndex ? firstIndex : this.battle.random(firstIndex, lastIndex + 1);\n\t\t\tthis.list.splice(index, 0, ...actions);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.list = [];\n\t}\n\n\tdebug(action?: any): string {\n\t\tif (action) {\n\t\t\treturn `${action.order || ''}:${action.priority || ''}:${action.speed || ''}:${action.subOrder || ''} - ${action.choice}${action.pokemon ? ' ' + action.pokemon : ''}${action.move ? ' ' + action.move : ''}`;\n\t\t}\n\t\treturn this.list.map(\n\t\t\tqueueAction => this.debug(queueAction)\n\t\t).join('\\n') + '\\n';\n\t}\n\n\tsort() {\n\t\t// this.log.push('SORT ' + this.debugQueue());\n\t\tthis.battle.speedSort(this.list);\n\t\treturn this;\n\t}\n}\n\nexport default BattleQueue;\n"],
  "mappings": "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",
  "names": ["choice"]
}
