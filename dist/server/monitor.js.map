{
  "version": 3,
  "sources": ["../../server/monitor.ts"],
  "sourcesContent": ["/**\n * Monitor\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * Various utility functions to make sure PS is running healthily.\n *\n * @license MIT\n */\n\nimport { exec, type ExecException, type ExecOptions } from 'child_process';\nimport { crashlogger, FS } from \"../lib\";\nimport * as pathModule from 'path';\n\nconst MONITOR_CLEAN_TIMEOUT = 2 * 60 * 60 * 1000;\n\n/**\n * This counts the number of times an action has been committed, and tracks the\n * delta of time since the last time it was committed. Actions include\n * connecting to the server, starting a battle, validating a team, and\n * sending/receiving data over a connection's socket.\n */\nexport class TimedCounter extends Map<string, [number, number]> {\n\t/**\n\t * Increments the number of times an action has been committed by one, and\n\t * updates the delta of time since it was last committed.\n\t *\n\t * @returns [action count, time delta]\n\t */\n\tincrement(key: string, timeLimit: number): [number, number] {\n\t\tconst val = this.get(key);\n\t\tconst now = Date.now();\n\t\tif (!val || now > val[1] + timeLimit) {\n\t\t\tthis.set(key, [1, Date.now()]);\n\t\t\treturn [1, 0];\n\t\t} else {\n\t\t\tval[0]++;\n\t\t\treturn [val[0], now - val[1]];\n\t\t}\n\t}\n}\n\n// Config.loglevel is:\n// 0 = everything\n// 1 = debug (same as 0 for now)\n// 2 = notice (default)\n// 3 = warning\n// (4 is currently unused)\n// 5 = supposedly completely silent, but for now a lot of PS output doesn't respect loglevel\nif (('Config' in global) &&\n\t(typeof Config.loglevel !== 'number' || Config.loglevel < 0 || Config.loglevel > 5)) {\n\tConfig.loglevel = 2;\n}\n\nexport const Monitor = new class {\n\tconnections = new TimedCounter();\n\tnetRequests = new TimedCounter();\n\tbattles = new TimedCounter();\n\tbattlePreps = new TimedCounter();\n\tgroupChats = new TimedCounter();\n\ttickets = new TimedCounter();\n\n\tactiveIp: string | null = null;\n\tnetworkUse: { [k: string]: number } = {};\n\tnetworkCount: { [k: string]: number } = {};\n\thotpatchLock: { [k: string]: { by: string, reason: string } } = {};\n\n\tTimedCounter = TimedCounter;\n\n\tupdateServerLock = false;\n\tcleanInterval: NodeJS.Timeout | null = null;\n\t/**\n\t * Inappropriate userid : has the user logged in since the FR\n\t */\n\treadonly forceRenames = new Map<ID, boolean>();\n\n\t/*********************************************************\n\t * Logging\n\t *********************************************************/\n\tcrashlog(err: any, source = 'The main process', details: AnyObject | null = null) {\n\t\tconst error = (err || {}) as Error;\n\t\tif ((error.stack || '').startsWith('@!!@')) {\n\t\t\ttry {\n\t\t\t\tconst stack = (error.stack || '');\n\t\t\t\tconst nlIndex = stack.indexOf('\\n');\n\t\t\t\t[error.name, error.message, source, details] = JSON.parse(stack.slice(4, nlIndex));\n\t\t\t\terror.stack = stack.slice(nlIndex + 1);\n\t\t\t} catch {}\n\t\t}\n\t\tconst crashType = crashlogger(error, source, details);\n\t\tRooms.global.reportCrash(error, source);\n\t\tif (crashType === 'lockdown') {\n\t\t\tConfig.autolockdown = false;\n\t\t\tRooms.global.startLockdown(error);\n\t\t}\n\t}\n\n\tlogPath(path: string) {\n\t\tif (Config.logsdir) {\n\t\t\treturn FS(pathModule.join(Config.logsdir, path));\n\t\t}\n\t\treturn FS(pathModule.join('logs', path));\n\t}\n\n\tlog(text: string) {\n\t\tthis.notice(text);\n\t\tconst staffRoom = Rooms.get('staff');\n\t\tif (staffRoom) {\n\t\t\tstaffRoom.add(`|c|~|${text}`).update();\n\t\t}\n\t}\n\n\tadminlog(text: string) {\n\t\tthis.notice(text);\n\t\tconst upperstaffRoom = Rooms.get('upperstaff');\n\t\tif (upperstaffRoom) {\n\t\t\tupperstaffRoom.add(`|c|~|${text}`).update();\n\t\t}\n\t}\n\n\tlogHTML(text: string) {\n\t\tthis.notice(text);\n\t\tconst staffRoom = Rooms.get('staff');\n\t\tif (staffRoom) {\n\t\t\tstaffRoom.add(`|html|${text}`).update();\n\t\t}\n\t}\n\n\terror(text: string) {\n\t\t(Rooms.get('development') || Rooms.get('staff') || Rooms.get('lobby'))?.add(`|error|${text}`).update();\n\t\tif (Config.loglevel <= 3) console.error(text);\n\t}\n\n\tdebug(text: string) {\n\t\tif (Config.loglevel <= 1) console.log(text);\n\t}\n\n\twarn(text: string) {\n\t\tif (Config.loglevel <= 3) console.log(text);\n\t}\n\n\tnotice(text: string) {\n\t\tif (Config.loglevel <= 2) console.log(text);\n\t}\n\n\tslow(text: string) {\n\t\tconst logRoom = Rooms.get('slowlog');\n\t\tif (logRoom) {\n\t\t\tlogRoom.add(`|c|~|/log ${text}`).update();\n\t\t} else {\n\t\t\tthis.warn(text);\n\t\t}\n\t}\n\n\t/*********************************************************\n\t * Resource Monitor\n\t *********************************************************/\n\n\tclean() {\n\t\tthis.clearNetworkUse();\n\t\tthis.battlePreps.clear();\n\t\tthis.battles.clear();\n\t\tthis.connections.clear();\n\t\tIPTools.dnsblCache.clear();\n\t}\n\n\t/**\n\t * Counts a connection. Returns true if the connection should be terminated for abuse.\n\t */\n\tcountConnection(ip: string, name = '') {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tconst [count, duration] = this.connections.increment(ip, 30 * 60 * 1000);\n\t\tif (count === 500) {\n\t\t\tthis.adminlog(`[ResourceMonitor] IP ${ip} banned for cflooding (${count} times in ${Chat.toDurationString(duration)}${name ? ': ' + name : ''})`);\n\t\t\treturn true;\n\t\t}\n\n\t\tif (count > 500) {\n\t\t\tif (count % 500 === 0) {\n\t\t\t\tconst c = count / 500;\n\t\t\t\tif (c === 2 || c === 4 || c === 10 || c === 20 || c % 40 === 0) {\n\t\t\t\t\tthis.adminlog(`[ResourceMonitor] IP ${ip} still cflooding (${count} times in ${Chat.toDurationString(duration)}${name ? ': ' + name : ''})`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Counts battles created. Returns true if the connection should be\n\t * terminated for abuse.\n\t */\n\tcountBattle(ip: string, name = '') {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tconst [count, duration] = this.battles.increment(ip, 30 * 60 * 1000);\n\t\tif (duration < 5 * 60 * 1000 && count % 30 === 0) {\n\t\t\tthis.adminlog(`[ResourceMonitor] IP ${ip} has battled ${count} times in the last ${Chat.toDurationString(duration)}${name ? ': ' + name : ''})`);\n\t\t\treturn true;\n\t\t}\n\n\t\tif (count % 150 === 0) {\n\t\t\tthis.adminlog(`[ResourceMonitor] IP ${ip} has battled ${count} times in the last ${Chat.toDurationString(duration)}${name ? ': ' + name : ''}`);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Counts team validations. Returns true if too many.\n\t */\n\tcountPrepBattle(ip: string, connection: Connection) {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tconst count = this.battlePreps.increment(ip, 3 * 60 * 1000)[0];\n\t\tif (count <= 12) return false;\n\t\tif (count < 120 && Punishments.isSharedIp(ip)) return false;\n\t\tconnection.popup('Due to high load, you are limited to 12 battles and team validations every 3 minutes.');\n\t\treturn true;\n\t}\n\n\t/**\n\t * Counts concurrent battles. Returns true if too many.\n\t */\n\tcountConcurrentBattle(count: number, connection: Connection) {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tif (count <= 5) return false;\n\t\tconnection.popup(`Due to high load, you are limited to 5 games at the same time.`);\n\t\treturn true;\n\t}\n\t/**\n\t * Counts group chat creation. Returns true if too much.\n\t */\n\tcountGroupChat(ip: string) {\n\t\tif (Config.noipchecks) return false;\n\t\tconst count = this.groupChats.increment(ip, 60 * 60 * 1000)[0];\n\t\treturn count > 4;\n\t}\n\n\t/**\n\t * Counts commands that use HTTPs requests. Returns true if too many.\n\t */\n\tcountNetRequests(ip: string) {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tconst [count] = this.netRequests.increment(ip, 1 * 60 * 1000);\n\t\tif (count <= 10) return false;\n\t\tif (count < 120 && Punishments.isSharedIp(ip)) return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Counts ticket creation. Returns true if too much.\n\t */\n\tcountTickets(ip: string) {\n\t\tif (Config.noipchecks || Config.nothrottle) return false;\n\t\tconst count = this.tickets.increment(ip, 60 * 60 * 1000)[0];\n\t\tif (Punishments.isSharedIp(ip)) {\n\t\t\treturn count >= 20;\n\t\t} else {\n\t\t\treturn count >= 5;\n\t\t}\n\t}\n\n\t/**\n\t * Counts the data length received by the last connection to send a\n\t * message, as well as the data length in the server's response.\n\t */\n\tcountNetworkUse(size: number) {\n\t\tif (\n\t\t\t!Config.emergency || typeof this.activeIp !== 'string' ||\n\t\t\tConfig.noipchecks || Config.nothrottle\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.activeIp in this.networkUse) {\n\t\t\tthis.networkUse[this.activeIp] += size;\n\t\t\tthis.networkCount[this.activeIp]++;\n\t\t} else {\n\t\t\tthis.networkUse[this.activeIp] = size;\n\t\t\tthis.networkCount[this.activeIp] = 1;\n\t\t}\n\t}\n\n\twriteNetworkUse() {\n\t\tlet buf = '';\n\t\tfor (const i in this.networkUse) {\n\t\t\tbuf += `${this.networkUse[i]}\\t${this.networkCount[i]}\\t${i}\\n`;\n\t\t}\n\t\tvoid Monitor.logPath('networkuse.tsv').write(buf);\n\t}\n\n\tclearNetworkUse() {\n\t\tif (Config.emergency) {\n\t\t\tthis.networkUse = {};\n\t\t\tthis.networkCount = {};\n\t\t}\n\t}\n\n\t/**\n\t * Counts roughly the size of an object to have an idea of the server load.\n\t */\n\tsizeOfObject(object: AnyObject) {\n\t\tconst objectCache = new Set<[] | object>();\n\t\tconst stack: any[] = [object];\n\t\tlet bytes = 0;\n\n\t\twhile (stack.length) {\n\t\t\tconst value = stack.pop();\n\t\t\tswitch (typeof value) {\n\t\t\tcase 'boolean':\n\t\t\t\tbytes += 4;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\tbytes += value.length * 2;\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\tbytes += 8;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (!objectCache.has(value)) objectCache.add(value);\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tfor (const el of value) stack.push(el);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const i in value) stack.push(value[i]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn bytes;\n\t}\n\n\tsh(command: string, options: ExecOptions = {}): Promise<[number, string, string]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\texec(command, options, (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => {\n\t\t\t\tresolve([error?.code || 0, `${stdout}`, `${stderr}`]);\n\t\t\t});\n\t\t});\n\t}\n\n\tasync version() {\n\t\tlet hash;\n\t\ttry {\n\t\t\tawait FS('.git/index').copyFile(Monitor.logPath('.gitindex').path);\n\t\t\tconst index = Monitor.logPath('.gitindex');\n\t\t\tconst options = {\n\t\t\t\tcwd: __dirname,\n\t\t\t\tenv: { GIT_INDEX_FILE: index.path },\n\t\t\t};\n\n\t\t\tlet [code, stdout, stderr] = await this.sh(`git add -A`, options);\n\t\t\tif (code || stderr) return;\n\t\t\t[code, stdout, stderr] = await this.sh(`git write-tree`, options);\n\n\t\t\tif (code || stderr) return;\n\t\t\thash = stdout.trim();\n\n\t\t\tawait this.sh(`git reset`, options);\n\t\t\tawait index.unlinkIfExists();\n\t\t} catch {}\n\t\treturn hash;\n\t}\n};\n\nMonitor.cleanInterval = setInterval(() => Monitor.clean(), MONITOR_CLEAN_TIMEOUT);\n"],
  "mappings": "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",
  "names": []
}
