{
  "version": 3,
  "sources": ["../../../server/chat-commands/moderation.ts"],
  "sourcesContent": ["/**\n * Moderation commands\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * These are commands for staff.\n *\n * For the API, see chat-plugins/COMMANDS.md\n *\n * @license MIT\n */\nimport { Utils } from '../../lib';\nimport { type RoomSection, RoomSections } from './room-settings';\n\n/* eslint no-else-return: \"error\" */\n\nconst MAX_REASON_LENGTH = 600;\nconst MUTE_LENGTH = 7 * 60 * 1000;\nconst HOURMUTE_LENGTH = 60 * 60 * 1000;\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Require reasons for punishment commands */\nconst REQUIRE_REASONS = true;\n\n/**\n * Promotes a user within a room. Returns a User object if a popup should be shown to the user,\n * and null otherwise. Throws a Chat.ErrorMessage on an error.\n *\n * @param promoter the User object of the user who is promoting\n * @param room the Room in which the promotion is happening\n * @param userid the ID of the user to promote\n * @param symbol the GroupSymbol to promote to\n * @param username the username of the user to promote\n * @param force whether or not to forcibly promote\n */\nexport function runPromote(\n\tpromoter: User,\n\troom: Room,\n\tuserid: ID,\n\tsymbol: GroupSymbol,\n\tusername?: string,\n\tforce?: boolean\n) {\n\tconst targetUser = Users.getExact(userid);\n\tusername = username || userid;\n\tif (!username) return;\n\n\tif (userid.length > 18) {\n\t\tthrow new Chat.ErrorMessage(`User '${username}' does not exist (the username is too long).`);\n\t}\n\tif (!targetUser && !Users.isUsernameKnown(userid) && !force) {\n\t\tthrow new Chat.ErrorMessage(`User '${username}' is offline and unrecognized, and so can't be promoted.`);\n\t}\n\tif (targetUser && !targetUser.registered) {\n\t\tthrow new Chat.ErrorMessage(`User '${username}' is unregistered, and so can't be promoted.`);\n\t}\n\n\tlet currentSymbol: GroupSymbol | 'whitelist' = room.auth.getDirect(userid);\n\tif (room.auth.has(userid) && currentSymbol === Users.Auth.defaultSymbol()) {\n\t\tcurrentSymbol = 'whitelist';\n\t}\n\tconst currentGroup = Users.Auth.getGroup(currentSymbol);\n\tconst currentGroupName = currentGroup.name || \"regular user\";\n\n\tconst nextGroup = Config.groups[symbol];\n\n\tif (currentSymbol === symbol) {\n\t\tthrow new Chat.ErrorMessage(`User '${username}' is already a ${nextGroup?.name || symbol || 'regular user'} in this room.`);\n\t}\n\tif (!promoter.can('makeroom')) {\n\t\tif (currentGroup.id && !promoter.can(`room${currentGroup.id || 'voice'}` as 'roomvoice', null, room)) {\n\t\t\tthrow new Chat.ErrorMessage(`Access denied for promoting/demoting ${username} from ${currentGroupName}.`);\n\t\t}\n\t\tif (symbol !== ' ' && !promoter.can(`room${nextGroup.id || 'voice'}` as 'roomvoice', null, room)) {\n\t\t\tthrow new Chat.ErrorMessage(`Access denied for promoting/demoting ${username} to ${nextGroup.name}.`);\n\t\t}\n\t}\n\tif (targetUser?.locked && room.persist && room.settings.isPrivate !== true && nextGroup.rank > 2) {\n\t\tthrow new Chat.ErrorMessage(`${username} is locked and can't be promoted.`);\n\t}\n\n\tif (symbol === Users.Auth.defaultSymbol()) {\n\t\troom.auth.delete(userid);\n\t} else {\n\t\troom.auth.set(userid, symbol);\n\t}\n\n\tif (targetUser) {\n\t\ttargetUser.updateIdentity(room.roomid);\n\t\tif (room.subRooms) {\n\t\t\tfor (const subRoom of room.subRooms.values()) {\n\t\t\t\ttargetUser.updateIdentity(subRoom.roomid);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Only show popup if: user is online and in the room, the room is public, and not a groupchat or a battle.\n\tif (targetUser && room.users[targetUser.id] && room.persist && room.settings.isPrivate !== true) {\n\t\treturn targetUser;\n\t}\n\treturn null;\n}\n\nexport function runCrisisDemote(userid: ID) {\n\tconst from = [];\n\tconst section = Users.globalAuth.sectionLeaders.get(userid);\n\tif (section) {\n\t\tfrom.push(`Section Leader (${RoomSections.sectionNames[section] || section})`);\n\t\tUsers.globalAuth.deleteSection(userid);\n\t}\n\tconst globalGroup = Users.globalAuth.get(userid);\n\tif (globalGroup && globalGroup !== ' ') {\n\t\tfrom.push(globalGroup);\n\t\tUsers.globalAuth.delete(userid);\n\t}\n\tfor (const room of Rooms.global.chatRooms) {\n\t\tif (!room.settings.isPrivate && room.auth.isStaff(userid)) {\n\t\t\tlet oldGroup: string = room.auth.getDirect(userid);\n\t\t\tif (oldGroup === ' ') {\n\t\t\t\toldGroup = 'whitelist in ';\n\t\t\t} else {\n\t\t\t\troom.auth.set(userid, '+');\n\t\t\t}\n\t\t\tfrom.push(`${oldGroup}${room.roomid}`);\n\t\t}\n\t}\n\treturn from;\n}\n\nPunishments.addPunishmentType({\n\ttype: 'YEARLOCK',\n\tdesc: \"Locked for a year\",\n\tonActivate: (user, punishment) => {\n\t\tuser.locked = user.id;\n\t\tChat.punishmentfilter(user, punishment);\n\t},\n});\n\nexport const commands: Chat.ChatCommands = {\n\troomowner(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tif (!room.persist) {\n\t\t\treturn this.sendReply(\"/roomowner - This room isn't designed for per-room moderation to be added\");\n\t\t}\n\t\tif (!target) return this.parse('/help roomowner');\n\t\tconst { targetUser, targetUsername, rest } = this.splitUser(target, { exactName: true });\n\t\tif (rest) throw new Chat.ErrorMessage(`This command does not support specifying a reason.`);\n\t\tconst userid = toID(targetUsername);\n\n\t\tif (!Users.isUsernameKnown(userid)) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${targetUsername}' is offline and unrecognized, and so can't be promoted.`);\n\t\t}\n\n\t\tthis.checkCan('makeroom');\n\t\tif (room.auth.getDirect(userid) === '#') throw new Chat.ErrorMessage(`${targetUsername} is already a room owner.`);\n\n\t\troom.auth.set(userid, '#');\n\t\tconst message = `${targetUsername} was appointed Room Owner by ${user.name}.`;\n\t\tif (room.settings.isPrivate === true) {\n\t\t\tthis.addModAction(message);\n\t\t\tRooms.get(`upperstaff`)?.addByUser(user, `<<${room.roomid}>> ${message}`).update();\n\t\t} else {\n\t\t\tthis.addGlobalModAction(message);\n\t\t}\n\t\tthis.modlog('ROOMOWNER', userid);\n\t\tif (targetUser) {\n\t\t\ttargetUser.popup(`You were appointed Room Owner by ${user.name} in ${room.roomid}.`);\n\t\t\troom.onUpdateIdentity(targetUser);\n\t\t\tif (room.subRooms) {\n\t\t\t\tfor (const subRoom of room.subRooms.values()) {\n\t\t\t\t\tsubRoom.onUpdateIdentity(targetUser);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\troom.saveSettings();\n\t},\n\troomownerhelp: [`/roomowner [username] - Appoints [username] as a room owner. Requires: ~`],\n\n\troomdemote: 'roompromote',\n\tforceroompromote: 'roompromote',\n\tforceroomdemote: 'roompromote',\n\troompromote(target, room, user, connection, cmd) {\n\t\tif (!room) {\n\t\t\t// this command isn't marked as room-only because it's usable in PMs through /invite\n\t\t\tthrow new Chat.ErrorMessage(\"This command is only available in rooms\");\n\t\t}\n\t\tthis.checkChat();\n\t\tif (!target) return this.parse('/help roompromote');\n\n\t\tconst force = cmd.startsWith('force');\n\t\tconst users = target.split(',').map(part => part.trim());\n\t\tlet nextSymbol = users.pop() as GroupSymbol | 'deauth';\n\t\tif (nextSymbol === 'deauth') nextSymbol = Users.Auth.defaultSymbol();\n\t\tconst nextGroup = Users.Auth.getGroup(nextSymbol);\n\n\t\tif (!nextSymbol) {\n\t\t\tthrow new Chat.ErrorMessage(\"Please specify a group such as /roomvoice or /roomdeauth\");\n\t\t}\n\t\tif (!Config.groups[nextSymbol]) {\n\t\t\tif (!force || !user.can('bypassall')) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Group '${nextSymbol}' does not exist.${user.can('bypassall') ? ` If you want to promote to a nonexistent group, use /forceroompromote.` : ''}`);\n\t\t\t} else if (!Users.Auth.isValidSymbol(nextSymbol)) {\n\t\t\t\t// yes I know this excludes astral-plane characters and includes combining characters\n\t\t\t\tthrow new Chat.ErrorMessage(`Admins can forcepromote to nonexistent groups only if they are one character long`);\n\t\t\t}\n\t\t}\n\n\t\tif (!force && (nextGroup.globalonly || (nextGroup.battleonly && !room.battle))) {\n\t\t\tthrow new Chat.ErrorMessage(`Group 'room${nextGroup.id || nextSymbol}' does not exist as a room rank.`);\n\t\t}\n\t\tconst nextGroupName = nextGroup.name || \"regular user\";\n\n\t\tfor (const toPromote of users) {\n\t\t\tconst userid = toID(toPromote);\n\t\t\tif (!userid) return this.parse('/help roompromote');\n\n\t\t\t// weird ts bug (?) - 7022\n\t\t\t// it implicitly is 'any' because it has no annotation and is \"is referenced directly or indirectly in its own initializer.\"\n\t\t\t// dunno why this happens, but for now we can just cast over it.\n\t\t\tconst oldSymbol: GroupSymbol = room.auth.getDirect(userid);\n\t\t\tlet shouldPopup;\n\t\t\ttry {\n\t\t\t\tshouldPopup = runPromote(user, room, userid, nextSymbol, toPromote, force);\n\t\t\t} catch (err: any) {\n\t\t\t\tif (err.name?.endsWith('ErrorMessage')) {\n\t\t\t\t\tthis.errorReply(err.message);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconst targetUser = Users.getExact(userid);\n\t\t\tconst name = targetUser?.name || toPromote;\n\n\t\t\tif (this.pmTarget && targetUser) {\n\t\t\t\tconst text = `${targetUser.name} was invited (and promoted to Room ${nextGroupName}) by ${user.name}.`;\n\t\t\t\troom.add(`|c|${user.getIdentity(room)}|/log ${text}`).update();\n\t\t\t\tthis.modlog('INVITE', targetUser, null, { noip: 1, noalts: 1 });\n\t\t\t} else if (\n\t\t\t\tnextSymbol in Config.groups && oldSymbol in Config.groups &&\n\t\t\t\tnextGroup.rank < Config.groups[oldSymbol].rank\n\t\t\t) {\n\t\t\t\tif (targetUser && room.users[targetUser.id] && !nextGroup.modlog) {\n\t\t\t\t\t// if the user can't see the demotion message (i.e. rank < %), it is shown in the chat\n\t\t\t\t\ttargetUser.send(`>${room.roomid}\\n(You were demoted to Room ${nextGroupName} by ${user.name}.)`);\n\t\t\t\t}\n\t\t\t\tthis.privateModAction(`${name} was demoted to Room ${nextGroupName} by ${user.name}.`);\n\t\t\t\tthis.modlog(`ROOM${nextGroupName.toUpperCase()}`, userid, '(demote)');\n\t\t\t\tshouldPopup?.popup(`You were demoted to Room ${nextGroupName} by ${user.name} in ${room.roomid}.`);\n\t\t\t} else if (nextSymbol === '#') {\n\t\t\t\tthis.addModAction(`${name} was promoted to ${nextGroupName} by ${user.name}.`);\n\t\t\t\tconst logRoom = Rooms.get(room.settings.isPrivate === true ? 'upperstaff' : 'staff');\n\t\t\t\tlogRoom?.addByUser(user, `<<${room.roomid}>> ${name} was appointed Room Owner by ${user.name}.`);\n\t\t\t\tthis.modlog('ROOM OWNER', userid);\n\t\t\t\tshouldPopup?.popup(`You were promoted to ${nextGroupName} by ${user.name} in ${room.roomid}.`);\n\t\t\t} else {\n\t\t\t\tthis.addModAction(`${name} was promoted to Room ${nextGroupName} by ${user.name}.`);\n\t\t\t\tthis.modlog(`ROOM${nextGroupName.toUpperCase()}`, userid);\n\t\t\t\tshouldPopup?.popup(`You were promoted to Room ${nextGroupName} by ${user.name} in ${room.roomid}.`);\n\t\t\t}\n\n\t\t\tif (targetUser) {\n\t\t\t\ttargetUser.updateIdentity(room.roomid);\n\t\t\t\tif (room.subRooms) {\n\t\t\t\t\tfor (const subRoom of room.subRooms.values()) {\n\t\t\t\t\t\ttargetUser.updateIdentity(subRoom.roomid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (targetUser.trusted && !Users.isTrusted(targetUser.id)) {\n\t\t\t\t\ttargetUser.trusted = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\troom.saveSettings();\n\t},\n\troompromotehelp: [\n\t\t`/roompromote OR /roomdemote [comma-separated usernames], [group symbol] - Promotes/demotes the user(s) to the specified room rank. Requires: @ # ~`,\n\t\t`/room[group] [comma-separated usernames] - Promotes/demotes the user(s) to the specified room rank. Requires: @ # ~`,\n\t\t`/roomdeauth [comma-separated usernames] - Removes all room rank from the user(s). Requires: @ # ~`,\n\t],\n\n\tauth: 'authority',\n\tstafflist: 'authority',\n\tglobalauth: 'authority',\n\tauthlist: 'authority',\n\tauthority(target, room, user, connection) {\n\t\tif (target && target !== '+') {\n\t\t\tconst targetRoom = Rooms.search(target);\n\t\t\tconst availableRoom = targetRoom?.checkModjoin(user);\n\t\t\tif (targetRoom && availableRoom) return this.parse(`/roomauth1 ${target}`);\n\t\t\treturn this.parse(`/userauth ${target}`);\n\t\t}\n\t\tconst showAll = !!target;\n\t\tconst rankLists: { [k: string]: string[] } = {};\n\t\tfor (const [id, symbol] of Users.globalAuth) {\n\t\t\tif (symbol === ' ' || (symbol === '+' && !showAll)) continue;\n\t\t\tif (!rankLists[symbol]) rankLists[symbol] = [];\n\t\t\trankLists[symbol].push(Users.globalAuth.usernames.get(id) || id);\n\t\t}\n\n\t\tconst buffer = Utils.sortBy(\n\t\t\tObject.entries(rankLists) as [GroupSymbol, string[]][],\n\t\t\t([symbol]) => -Users.Auth.getGroup(symbol).rank\n\t\t).map(\n\t\t\t([symbol, names]) => (\n\t\t\t\t`${(Config.groups[symbol] ? `**${Config.groups[symbol].name}s** (${symbol})` : symbol)}:\\n` +\n\t\t\t\tUtils.sortBy(names, name => toID(name)).join(\", \")\n\t\t\t)\n\t\t);\n\t\tif (!showAll) buffer.push(`(Use \\`\\`/auth +\\`\\` to show global voice users.)`);\n\n\t\tif (!buffer.length) return connection.popup(\"This server has no global authority.\");\n\t\tconnection.popup(buffer.join(\"\\n\\n\"));\n\t},\n\tauthhelp: [\n\t\t`/auth - Show global staff for the server.`,\n\t\t`/auth + - Show global staff for the server, including voices.`,\n\t\t`/auth [room] - Show what roomauth a room has.`,\n\t\t`/auth [user] - Show what global and roomauth a user has.`,\n\t],\n\n\troomstaff: 'roomauth',\n\troomauth1: 'roomauth',\n\troomauth(target, room, user, connection, cmd) {\n\t\tlet userLookup = '';\n\t\tif (cmd === 'roomauth1') userLookup = `\\n\\nTo look up auth for a user, use /userauth ${target}`;\n\t\tlet targetRoom = room;\n\t\tif (target) targetRoom = Rooms.search(target)!;\n\t\tif (!targetRoom?.checkModjoin(user)) {\n\t\t\tthrow new Chat.ErrorMessage(`The room \"${target}\" does not exist.`);\n\t\t}\n\t\tconst showAll = user.can('mute', null, targetRoom);\n\n\t\tconst rankLists: { [groupSymbol: string]: ID[] } = {};\n\t\tfor (const [id, rank] of targetRoom.auth) {\n\t\t\tif (rank === ' ' && !showAll) continue;\n\t\t\tif (!rankLists[rank]) rankLists[rank] = [];\n\t\t\trankLists[rank].push(id);\n\t\t}\n\n\t\tconst buffer = Utils.sortBy(\n\t\t\tObject.entries(rankLists) as [GroupSymbol, ID[]][],\n\t\t\t([symbol]) => -Users.Auth.getGroup(symbol).rank\n\t\t).map(([symbol, names]) => {\n\t\t\tlet group = Config.groups[symbol] ? `${Config.groups[symbol].name}s (${symbol})` : symbol;\n\t\t\tif (symbol === ' ') group = 'Whitelisted (this list is only visible to staff)';\n\t\t\treturn `${group}:\\n` +\n\t\t\t\tUtils.sortBy(names).map(userid => {\n\t\t\t\t\tconst isOnline = Users.get(userid)?.statusType === 'online';\n\t\t\t\t\t// targetRoom guaranteed to exist above\n\t\t\t\t\treturn userid in targetRoom.users && isOnline ? `**${userid}**` : userid;\n\t\t\t\t}).join(', ');\n\t\t});\n\n\t\tlet curRoom = targetRoom;\n\t\twhile (curRoom.parent) {\n\t\t\tconst modjoinSetting = curRoom.settings.modjoin === true ? curRoom.settings.modchat : curRoom.settings.modjoin;\n\t\t\tconst roomType = (modjoinSetting ? `modjoin ${modjoinSetting} ` : '');\n\t\t\tconst inheritedUserType = (modjoinSetting ? ` of rank ${modjoinSetting} and above` : '');\n\t\t\tif (curRoom.parent) {\n\t\t\t\tconst also = buffer.length === 0 ? `` : ` also`;\n\t\t\t\tbuffer.push(`${curRoom.title} is a ${roomType}subroom of ${curRoom.parent.title}, so ${curRoom.parent.title} users${inheritedUserType}${also} have authority in this room.`);\n\t\t\t}\n\t\t\tcurRoom = curRoom.parent;\n\t\t}\n\t\tif (!buffer.length) {\n\t\t\tconnection.popup(`The room '${targetRoom.title}' has no auth. ${userLookup}`);\n\t\t\treturn;\n\t\t}\n\t\tif (!curRoom.settings.isPrivate) {\n\t\t\tbuffer.push(`${curRoom.title} is a public room, so global auth with no relevant roomauth will have authority in this room.`);\n\t\t} else if (curRoom.settings.isPrivate === 'hidden' || curRoom.settings.isPrivate === 'voice') {\n\t\t\tbuffer.push(`${curRoom.title} is a hidden room, so global auth with no relevant roomauth will have authority in this room.`);\n\t\t}\n\t\tbuffer.push(`Names in **bold** are online.`);\n\t\tif (targetRoom !== room) buffer.unshift(`${targetRoom.title} room auth:`);\n\t\tconnection.popup(`${buffer.join(\"\\n\\n\")}${userLookup}`);\n\t},\n\troomauthhelp: [\n\t\t`/roomauth [room] - Shows a list of the staff and authority in the given [room].`,\n\t\t`If no room is given, it defaults to the current room.`,\n\t],\n\n\tuserauth(target, room, user, connection) {\n\t\tconst targetId = toID(target) || user.id;\n\t\tconst targetUser = Users.getExact(targetId);\n\t\tconst targetUsername = targetUser?.name || target;\n\n\t\tconst buffer = [];\n\t\tlet innerBuffer = [];\n\t\tconst group = Users.globalAuth.get(targetId);\n\t\tif (group !== ' ' || Users.isTrusted(targetId)) {\n\t\t\tbuffer.push(`Global auth: ${group === ' ' ? 'trusted' : group}`);\n\t\t}\n\t\tconst sectionLeader = Users.globalAuth.sectionLeaders.get(targetId);\n\t\tif (sectionLeader) {\n\t\t\tbuffer.push(`Section leader: ${RoomSections.sectionNames[sectionLeader]}`);\n\t\t}\n\t\tfor (const curRoom of Rooms.rooms.values()) {\n\t\t\tif (curRoom.settings.isPrivate) continue;\n\t\t\tif (!curRoom.auth.has(targetId)) continue;\n\t\t\tinnerBuffer.push(curRoom.auth.getDirect(targetId).trim() + curRoom.roomid);\n\t\t}\n\t\tif (innerBuffer.length) {\n\t\t\tbuffer.push(`Room auth: ${innerBuffer.join(', ')}`);\n\t\t}\n\t\tif (targetId === user.id || user.can('lock')) {\n\t\t\tinnerBuffer = [];\n\t\t\tfor (const curRoom of Rooms.rooms.values()) {\n\t\t\t\tif (!curRoom.settings.isPrivate) continue;\n\t\t\t\tif (curRoom.settings.isPrivate === true) continue;\n\t\t\t\tif (!curRoom.auth.has(targetId)) continue;\n\t\t\t\tinnerBuffer.push(curRoom.auth.getDirect(targetId).trim() + curRoom.roomid);\n\t\t\t}\n\t\t\tif (innerBuffer.length) {\n\t\t\t\tbuffer.push(`Hidden room auth: ${innerBuffer.join(', ')}`);\n\t\t\t}\n\t\t}\n\t\tif (targetId === user.id || user.can('makeroom')) {\n\t\t\tinnerBuffer = [];\n\t\t\tfor (const chatRoom of Rooms.global.chatRooms) {\n\t\t\t\tif (!chatRoom.settings.isPrivate) continue;\n\t\t\t\tif (chatRoom.settings.isPrivate !== true) continue;\n\t\t\t\tif (!chatRoom.auth.has(targetId)) continue;\n\t\t\t\tinnerBuffer.push(chatRoom.auth.getDirect(targetId).trim() + chatRoom.roomid);\n\t\t\t}\n\t\t\tif (innerBuffer.length) {\n\t\t\t\tbuffer.push(`Private room auth: ${innerBuffer.join(', ')}`);\n\t\t\t}\n\t\t}\n\t\tif (!buffer.length) {\n\t\t\tbuffer.push(\"No global or room auth.\");\n\t\t}\n\n\t\tbuffer.unshift(`${targetUsername} user auth:`);\n\t\tconnection.popup(buffer.join(\"\\n\\n\"));\n\t},\n\tuserauthhelp: [\n\t\t`/userauth [username] - Shows all authority visible to the user for the given [username].`,\n\t\t`If no username is given, it defaults to the current user.`,\n\t],\n\n\tsectionleaders(target, room, user, connection) {\n\t\tconst usernames = Users.globalAuth.usernames;\n\t\tconst buffer = [];\n\t\tconst sections: { [k in RoomSection]: Set<string> } = Object.create(null);\n\t\tfor (const [id, username] of usernames) {\n\t\t\tconst sectionid = Users.globalAuth.sectionLeaders.get(id);\n\t\t\tif (!sectionid) continue;\n\t\t\tif (!sections[sectionid]) sections[sectionid] = new Set();\n\t\t\tsections[sectionid].add(username);\n\t\t}\n\t\tlet sectionid: RoomSection;\n\t\tfor (sectionid in sections) {\n\t\t\tif (!sections[sectionid].size) continue;\n\t\t\tbuffer.push(`**${RoomSections.sectionNames[sectionid]}**:\\n` + Utils.sortBy([...sections[sectionid]]).join(', '));\n\t\t}\n\t\tif (!buffer.length) throw new Chat.ErrorMessage(`There are no Section Leaders currently.`);\n\t\tconnection.popup(buffer.join(`\\n\\n`));\n\t},\n\tsectionleadershelp: [\n\t\t`/sectionleaders - Shows the current room sections and their section leaders.`,\n\t],\n\n\tasync autojoin(target, room, user, connection) {\n\t\tconst targets = target.split(',').filter(Boolean);\n\t\tif (targets.length > 16 || connection.inRooms.size > 1) {\n\t\t\treturn connection.popup(\"To prevent DoS attacks, you can only use /autojoin for 16 or fewer rooms, when you haven't joined any rooms yet. Please use /join for each room separately.\");\n\t\t}\n\t\tRooms.global.autojoinRooms(user, connection);\n\t\tconst autojoins: string[] = [];\n\n\t\tconst promises = targets.map(\n\t\t\troomid => user.tryJoinRoom(roomid as RoomID, connection).then(ret => {\n\t\t\t\tif (ret === Rooms.RETRY_AFTER_LOGIN) {\n\t\t\t\t\tautojoins.push(roomid);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tawait Promise.all(promises);\n\t\t// eslint-disable-next-line require-atomic-updates\n\t\tconnection.autojoins = autojoins.join(',');\n\t},\n\tautojoinhelp: [`/autojoin [rooms] - Automatically joins all the given rooms.`],\n\n\tjoim: 'join',\n\tj: 'join',\n\tasync join(target, room, user, connection) {\n\t\ttarget = target.trim();\n\t\tif (!target) return this.parse('/help join');\n\t\tif (target.startsWith('http://')) target = target.slice(7);\n\t\tif (target.startsWith('https://')) target = target.slice(8);\n\t\tif (target.startsWith(`${Config.routes.client}/`)) target = target.slice(Config.routes.client.length + 1);\n\t\tif (target.startsWith(`${Config.routes.replays}/`)) target = `battle-${target.slice(Config.routes.replays.length + 1)}`;\n\t\tif (target.startsWith('psim.us/')) target = target.slice(8);\n\t\t// isn't in tryJoinRoom so you can still join your own battles / gameRooms etc\n\t\tconst numRooms = [...Rooms.rooms.values()].filter(r => user.id in r.users).length;\n\t\tif (!user.can('altsself') && !target.startsWith('view-') && numRooms >= 50) {\n\t\t\treturn connection.sendTo(target as RoomID, `|noinit||You can only join 50 rooms at a time.`);\n\t\t}\n\t\tconst ret = await user.tryJoinRoom(target as RoomID, connection);\n\t\tif (ret === Rooms.RETRY_AFTER_LOGIN) {\n\t\t\tconnection.sendTo(\n\t\t\t\ttarget as RoomID,\n\t\t\t\t`|noinit|namerequired|The room '${target}' does not exist or requires a login to join.`\n\t\t\t);\n\t\t}\n\t},\n\tjoinhelp: [`/join [roomname] - Attempt to join the room [roomname].`],\n\n\tleave: 'part',\n\tpart(target, room, user, connection) {\n\t\tconst targetRoom = target ? Rooms.search(target) : room;\n\t\tif (!targetRoom) {\n\t\t\tif (target.startsWith('view-')) {\n\t\t\t\tconnection.openPages?.delete(target.slice(5));\n\t\t\t\tif (!connection.openPages?.size) connection.openPages = null;\n\t\t\t\tif (target.startsWith('view-bot-')) {\n\t\t\t\t\tconst [botId, pageId] = target.slice('view-bot-'.length).split('-');\n\t\t\t\t\tconst bot = Users.get(botId);\n\t\t\t\t\tif (bot) bot.sendTo(null, `|pm|${user.getIdentity()}|${botId}||closepage|${user.name}|${pageId}`);\n\t\t\t\t}\n\t\t\t\tChat.handleRoomClose(target as RoomID, user, connection);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`The room '${target}' does not exist.`);\n\t\t}\n\t\tChat.handleRoomClose(targetRoom.roomid, user, connection);\n\t\tuser.leaveRoom(targetRoom, connection);\n\t},\n\tleavehelp: [`/leave - Leave the current room, or a given room.`],\n\n\t/*********************************************************\n\t * Moderating: Punishments\n\t *********************************************************/\n\n\tkick: 'warn',\n\tk: 'warn',\n\twarn(target, room, user) {\n\t\tif (!target) return this.parse('/help warn');\n\t\tthis.checkChat();\n\t\tif (room?.settings.isPersonal && !user.can('warn' as any)) {\n\t\t\tthrow new Chat.ErrorMessage(\"Warning is unavailable in group chats.\");\n\t\t}\n\t\t// If used in pms, staff, help tickets or battles, log the warn to the global modlog.\n\t\tconst globalWarn = (\n\t\t\t!room || ['staff', 'adminlog'].includes(room.roomid) ||\n\t\t\troom.roomid.startsWith('help-') || (room.battle && (!room.parent || room.parent.type !== 'chat'))\n\t\t);\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tconst targetID = toID(targetUsername);\n\t\tconst { privateReason, publicReason } = this.parseSpoiler(reason);\n\n\t\tconst saveReplay = globalWarn && room?.battle;\n\t\tif (!targetUser?.connected) {\n\t\t\tif (!globalWarn) throw new Chat.ErrorMessage(`User '${targetUsername}' not found.`);\n\t\t\tif (room) {\n\t\t\t\tthis.checkCan('warn', null, room);\n\t\t\t} else {\n\t\t\t\tthis.checkCan('lock');\n\t\t\t}\n\n\t\t\tthis.addGlobalModAction(\n\t\t\t\t`${targetID} was warned by ${user.name} while offline.${publicReason ? ` (${publicReason})` : ``}`\n\t\t\t);\n\t\t\tthis.globalModlog('WARN OFFLINE', targetUser || targetID, privateReason);\n\t\t\tPunishments.offlineWarns.set(targetID, publicReason);\n\t\t\tif (saveReplay) this.parse('/savereplay forpunishment');\n\t\t\treturn;\n\t\t}\n\t\tif (!globalWarn && !(targetUser.id in room.users)) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${targetUsername} is not in the room ${room.roomid}.`);\n\t\t}\n\t\tif (publicReason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tif (room) {\n\t\t\tthis.checkCan('warn', targetUser, room);\n\t\t} else {\n\t\t\tthis.checkCan('lock', targetUser);\n\t\t}\n\t\tif (targetUser.can('makeroom')) throw new Chat.ErrorMessage(\"You are not allowed to warn upper staff members.\");\n\n\t\tconst now = Date.now();\n\t\tconst timeout = now - targetUser.lastWarnedAt;\n\t\tif (timeout < 15 * 1000) {\n\t\t\tconst remainder = (15 - (timeout / 1000)).toFixed(2);\n\t\t\tthrow new Chat.ErrorMessage(`You must wait ${remainder} more seconds before you can warn ${targetUser.name} again.`);\n\t\t}\n\n\t\tconst logMessage = `${targetUser.name} was warned by ${user.name}.${(publicReason ? ` (${publicReason})` : ``)}`;\n\t\tif (globalWarn) {\n\t\t\tthis.addGlobalModAction(logMessage);\n\t\t\tthis.globalModlog('WARN', targetUser, privateReason);\n\t\t} else {\n\t\t\tthis.addModAction(logMessage);\n\t\t\tthis.modlog('WARN', targetUser, privateReason, { noalts: 1 });\n\t\t}\n\t\ttargetUser.send(`|c|~|/warn ${publicReason}`);\n\n\t\tconst userid = targetUser.getLastId();\n\n\t\tif (room) {\n\t\t\tthis.add(`|hidelines|unlink|${userid}`);\n\t\t\tif (userid !== toID(inputUsername)) this.add(`|hidelines|unlink|${toID(inputUsername)}`);\n\t\t}\n\n\t\ttargetUser.lastWarnedAt = now;\n\n\t\t// Automatically upload replays as evidence/reference to the punishment\n\t\tif (saveReplay) this.parse('/savereplay forpunishment');\n\t\treturn true;\n\t},\n\twarnhelp: [\n\t\t`/warn OR /k [username], [reason] - Warns a user showing them the site rules and [reason] in an overlay.`,\n\t\t`/warn OR /k [username], [reason] spoiler: [private reason] - Warns a user, marking [private reason] only in the modlog.`,\n\t\t`Requires: % @ # ~`,\n\t],\n\n\tredirect: 'redir',\n\tredir(target, room, user, connection) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help redirect');\n\t\tif (room.settings.isPrivate || room.settings.isPersonal) {\n\t\t\tthrow new Chat.ErrorMessage(\"Users cannot be redirected from private or personal rooms.\");\n\t\t}\n\t\tconst { targetUser, targetUsername, rest: targetRoomid } = this.splitUser(target);\n\t\tconst targetRoom = Rooms.search(targetRoomid);\n\t\tif (!targetRoom || targetRoom.settings.modjoin || targetRoom.settings.staffRoom) {\n\t\t\tthrow new Chat.ErrorMessage(`The room \"${targetRoomid}\" does not exist.`);\n\t\t}\n\t\tthis.checkCan('warn', targetUser, room);\n\t\tthis.checkCan('warn', targetUser, targetRoom);\n\n\t\tif (!user.can('rangeban', targetUser)) {\n\t\t\tthrow new Chat.ErrorMessage(`Redirects have been deprecated. Instead of /redirect, use <<room links>> or /invite to guide users to the correct room, and punish if users don't cooperate.`);\n\t\t}\n\n\t\tif (!targetUser?.connected) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${targetUsername} not found.`);\n\t\t}\n\t\tif (targetRoom.roomid === \"global\") throw new Chat.ErrorMessage(`Users cannot be redirected to the global room.`);\n\t\tif (targetRoom.settings.isPrivate || targetRoom.settings.isPersonal) {\n\t\t\tthrow new Chat.ErrorMessage(`The room \"${targetRoom.title}\" is not public.`);\n\t\t}\n\t\tif (targetUser.inRooms.has(targetRoom.roomid)) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${targetUser.name} is already in the room ${targetRoom.title}!`);\n\t\t}\n\t\tif (!targetUser.inRooms.has(room.roomid)) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${targetUsername} is not in the room ${room.roomid}.`);\n\t\t}\n\t\ttargetUser.leaveRoom(room.roomid);\n\t\ttargetUser.popup(`You are in the wrong room; please go to <<${targetRoom.roomid}>> instead`);\n\t\tthis.addModAction(`${targetUser.name} was redirected to room ${targetRoom.title} by ${user.name}.`);\n\t\tthis.modlog('REDIRECT', targetUser, `to ${targetRoom.title}`, { noip: 1, noalts: 1 });\n\t\ttargetUser.leaveRoom(room);\n\t},\n\tredirhelp: [\n\t\t`/redirect OR /redir [username], [roomname] - [DEPRECATED]`,\n\t\t`Attempts to redirect the [username] to the [roomname]. Requires: ~`,\n\t],\n\n\tm: 'mute',\n\tmute(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help mute');\n\t\tthis.checkChat();\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tif (!targetUser) throw new Chat.ErrorMessage(`User '${targetUsername}' not found.`);\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tconst { publicReason, privateReason } = this.parseSpoiler(reason);\n\n\t\tconst muteDuration = ((cmd === 'hm' || cmd === 'hourmute') ? HOURMUTE_LENGTH : MUTE_LENGTH);\n\t\tthis.checkCan('mute', targetUser, room);\n\t\tif (targetUser.can('makeroom')) throw new Chat.ErrorMessage(\"You are not allowed to mute upper staff members.\");\n\t\tconst canBeMutedFurther = ((room.getMuteTime(targetUser) || 0) <= (muteDuration * 5 / 6));\n\t\tif (targetUser.locked ||\n\t\t\t(room.isMuted(targetUser) && !canBeMutedFurther) ||\n\t\t\tPunishments.isRoomBanned(targetUser, room.roomid)) {\n\t\t\tconst alreadyPunishment = targetUser.locked ? \"locked\" : room.isMuted(targetUser) ? \"muted\" : \"room banned\";\n\t\t\tconst problem = ` but was already ${alreadyPunishment}`;\n\t\t\tif (!reason) {\n\t\t\t\treturn this.privateModAction(`${targetUser.name} would be muted by ${user.name} ${problem}.`);\n\t\t\t}\n\t\t\treturn this.addModAction(`${targetUser.name} would be muted by ${user.name} ${problem}. (${publicReason})`);\n\t\t}\n\n\t\tif (targetUser.id in room.users) {\n\t\t\ttargetUser.popup(`|modal|${user.name} has muted you in ${room.roomid} for ${Chat.toDurationString(muteDuration)}. ${publicReason}`);\n\t\t}\n\t\tthis.addModAction(`${targetUser.name} was muted by ${user.name} for ${Chat.toDurationString(muteDuration)}.${(publicReason ? ` (${publicReason})` : ``)}`);\n\t\tthis.modlog(`${cmd.includes('h') ? 'HOUR' : ''}MUTE`, targetUser, privateReason);\n\t\tthis.update(); // force an update so the (hide lines from x user) message is on the mod action above\n\n\t\tconst ids = [targetUser.getLastId()];\n\t\tif (ids[0] !== toID(inputUsername)) {\n\t\t\tids.push(toID(inputUsername));\n\t\t}\n\t\troom.hideText(ids);\n\n\t\tif (targetUser.autoconfirmed && targetUser.autoconfirmed !== targetUser.id) {\n\t\t\tconst displayMessage = `${targetUser.name}'s ac account: ${targetUser.autoconfirmed}`;\n\t\t\tthis.privateModAction(displayMessage);\n\t\t}\n\n\t\tChat.runHandlers('onPunishUser', 'MUTE', user, room);\n\t\troom.mute(targetUser, muteDuration);\n\t},\n\tmutehelp: [`/mute OR /m [username], [reason] - Mutes a user with reason for 7 minutes. Requires: % @ # ~`],\n\n\thm: 'hourmute',\n\thourmute(target) {\n\t\tif (!target) return this.parse('/help hourmute');\n\t\tthis.run('mute');\n\t},\n\thourmutehelp: [`/hourmute OR /hm [username], [reason] - Mutes a user with reason for an hour. Requires: % @ # ~`],\n\n\tum: 'unmute',\n\tunmute(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help unmute');\n\t\tconst { targetUser, targetUsername, rest } = this.splitUser(target);\n\t\tif (rest) throw new Chat.ErrorMessage(`This command does not support specifying a reason.`);\n\t\tthis.checkChat();\n\t\tthis.checkCan('mute', null, room);\n\n\t\tconst successfullyUnmuted = room.unmute(\n\t\t\ttargetUser?.id || toID(targetUsername), `Your mute in '${room.title}' has been lifted.`\n\t\t);\n\n\t\tif (successfullyUnmuted) {\n\t\t\tthis.addModAction(`${(targetUser ? targetUser.name : successfullyUnmuted)} was unmuted by ${user.name}.`);\n\t\t\tthis.modlog('UNMUTE', (targetUser || successfullyUnmuted), null, { noip: 1, noalts: 1 });\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`${(targetUser ? targetUser.name : targetUsername)} is not muted.`);\n\t\t}\n\t},\n\tunmutehelp: [`/unmute [username] - Removes mute from user. Requires: % @ # ~`],\n\n\trb: 'ban',\n\tweekban: 'ban',\n\twb: 'ban',\n\twrb: 'ban',\n\tforceroomban: 'ban',\n\tforceweekban: 'ban',\n\tweekroomban: 'ban',\n\tforcerb: 'ban',\n\troomban: 'ban',\n\tb: 'ban',\n\tban(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help ban');\n\t\tthis.checkChat();\n\t\tconst week = ['wrb', 'wb'].includes(cmd) || cmd.includes('week');\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tconst { publicReason, privateReason } = this.parseSpoiler(reason);\n\t\tif (!targetUser) throw new Chat.ErrorMessage(`User '${targetUsername}' not found.`);\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tthis.checkCan('ban', targetUser, room);\n\t\tif (targetUser.can('makeroom')) throw new Chat.ErrorMessage(\"You are not allowed to ban upper staff members.\");\n\t\tif (Punishments.hasRoomPunishType(room, toID(targetUsername), 'BLACKLIST')) {\n\t\t\tthrow new Chat.ErrorMessage(`This user is already blacklisted from ${room.roomid}.`);\n\t\t}\n\t\tconst name = targetUser.getLastName();\n\t\tconst userid = targetUser.getLastId();\n\t\tconst force = cmd.startsWith('force');\n\t\tif (targetUser.trusted) {\n\t\t\tif (!force) {\n\t\t\t\treturn this.sendReply(\n\t\t\t\t\t`${name} is a trusted user. If you are sure you would like to ban them, use /force${week ? 'week' : 'room'}ban.`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (force) {\n\t\t\tthrow new Chat.ErrorMessage(`Use /${week ? 'week' : 'room'}ban; ${name} is not a trusted user.`);\n\t\t}\n\t\tif (!reason && !week && Punishments.isRoomBanned(targetUser, room.roomid)) {\n\t\t\tconst problem = \" but was already banned\";\n\t\t\treturn this.privateModAction(`${name} would be banned by ${user.name} ${problem}.`);\n\t\t}\n\n\t\tif (targetUser.trusted && room.settings.isPrivate !== true && !room.settings.isPersonal) {\n\t\t\tMonitor.log(`[CrisisMonitor] Trusted user ${targetUser.name} ${(targetUser.trusted !== targetUser.id ? ` (${targetUser.trusted})` : ``)} was roombanned from ${room.roomid} by ${user.name}, and should probably be demoted.`);\n\t\t}\n\n\t\tif (targetUser.id in room.users || user.can('lock')) {\n\t\t\ttargetUser.popup(\n\t\t\t\t`|modal||html|<p>${Utils.escapeHTML(user.name)} has banned you from the room ${room.roomid} ` +\n\t\t\t\t`${(room.subRooms ? ` and its subrooms` : ``)}${week ? ' for 1 week' : ' for 2 days'}.` +\n\t\t\t\t`</p>${(publicReason ? `<p>Reason: ${Utils.escapeHTML(publicReason)}</p>` : ``)}` +\n\t\t\t\t`<p>To appeal the ban, PM the staff member that banned you${room.persist ? ` or a room owner. ` +\n\t\t\t\t`</p><p><button name=\"send\" value=\"/roomauth ${room.roomid}\">List Room Staff</button></p>` : `.</p>`}`\n\t\t\t);\n\t\t}\n\n\t\tthis.addModAction(\n\t\t\t`${name} was banned${week ? ' for 1 week' : ' for 2 days'} from ${room.title}` +\n\t\t\t` by ${user.name}.${publicReason ? ` (${publicReason})` : ``}`\n\t\t);\n\n\t\tconst time = week ? Date.now() + 7 * 24 * 60 * 60 * 1000 : null;\n\t\tconst affected = Punishments.roomBan(room, targetUser, time, null, privateReason);\n\n\t\tfor (const u of affected) Chat.runHandlers('onPunishUser', 'ROOMBAN', u, room);\n\t\tif (!room.settings.isPrivate && room.persist) {\n\t\t\tconst acAccount = (targetUser.autoconfirmed !== userid && targetUser.autoconfirmed);\n\t\t\tlet displayMessage = '';\n\t\t\tif (affected.length > 1) {\n\t\t\t\tdisplayMessage = `${name}'s ${(acAccount ? ` ac account: ${acAccount}, ` : ``)} banned alts: ${affected.slice(1).map(curUser => curUser.getLastName()).join(\", \")}`;\n\t\t\t\tthis.privateModAction(displayMessage);\n\t\t\t} else if (acAccount) {\n\t\t\t\tdisplayMessage = `${name}'s ac account: ${acAccount}`;\n\t\t\t\tthis.privateModAction(displayMessage);\n\t\t\t}\n\t\t}\n\t\troom.hideText([\n\t\t\t...affected.map(u => u.id),\n\t\t\ttoID(inputUsername),\n\t\t]);\n\n\t\tif (room.settings.isPrivate !== true && room.persist) {\n\t\t\tthis.globalModlog(`${week ? 'WEEK' : ''}ROOMBAN`, targetUser, privateReason);\n\t\t} else {\n\t\t\tthis.modlog(`${week ? 'WEEK' : ''}ROOMBAN`, targetUser, privateReason);\n\t\t}\n\t\treturn true;\n\t},\n\tbanhelp: [\n\t\t`/ban [username], [reason] - Bans the user from the room you are in. Requires: @ # ~`,\n\t\t`/weekban [username], [reason] - Bans the user from the room you are in for a week. Requires: @ # ~`,\n\t],\n\n\tunroomban: 'unban',\n\troomunban: 'unban',\n\tunban(target, room, user, connection) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help unban');\n\t\tthis.checkCan('ban', null, room);\n\n\t\tconst name = Punishments.roomUnban(room, target);\n\n\t\tif (name) {\n\t\t\tthis.addModAction(`${name} was unbanned from ${room.title} by ${user.name}.`);\n\t\t\tif (room.settings.isPrivate !== true && room.persist) {\n\t\t\t\tthis.globalModlog(\"UNROOMBAN\", name);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`User '${target}' is not banned from this room.`);\n\t\t}\n\t},\n\tunbanhelp: [`/unban [username] - Unbans the user from the room you are in. Requires: @ # ~`],\n\n\tforcelock: 'lock',\n\tforceweeklock: 'lock',\n\tforcemonthlock: 'lock',\n\tl: 'lock',\n\tipmute: 'lock',\n\twl: 'lock',\n\tweeklock: 'lock',\n\tmonthlock: 'lock',\n\tasync lock(target, room, user, connection, cmd) {\n\t\tconst week = cmd === 'wl' || cmd.includes('week');\n\t\tconst month = cmd.includes('month');\n\t\tconst force = cmd.includes('force');\n\n\t\tif (!target) {\n\t\t\tif (week) return this.parse('/help weeklock');\n\t\t\treturn this.parse('/help lock');\n\t\t}\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tlet userid: ID = toID(targetUsername);\n\n\t\tif (!targetUser && !Punishments.search(userid).length && !force) {\n\t\t\tthrow new Chat.ErrorMessage(\n\t\t\t\t`User '${targetUsername}' not found. Use \\`\\`/force${month ? 'month' : (week ? 'week' : '')}lock\\`\\` if you need to to lock them anyway.`\n\t\t\t);\n\t\t}\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tthis.checkCan('lock', userid);\n\t\tif (month) this.checkCan('rangeban');\n\n\t\tlet name;\n\n\t\tif (targetUser) {\n\t\t\tname = targetUser.getLastName();\n\t\t\tuserid = targetUser.getLastId();\n\n\t\t\tif (targetUser.locked && !targetUser.locked.startsWith('#') && !week && !month) {\n\t\t\t\treturn this.privateModAction(`${name} would be locked by ${user.name} but was already locked.`);\n\t\t\t}\n\t\t} else {\n\t\t\tname = targetUsername;\n\t\t\tuserid = toID(targetUsername);\n\t\t}\n\n\t\tif (Users.isTrusted(userid)) {\n\t\t\tif (force) {\n\t\t\t\tconst from = runCrisisDemote(userid);\n\t\t\t\tMonitor.log(`[CrisisMonitor] ${name} was locked by ${user.name} and demoted from ${from.join(\", \")}.`);\n\t\t\t\tthis.globalModlog(\"CRISISDEMOTE\", targetUser, ` from ${from.join(\", \")}`);\n\t\t\t} else {\n\t\t\t\treturn this.sendReply(`${name} is a trusted user. If you are sure you would like to lock them use /force${month ? 'month' : (week ? 'week' : '')}lock.`);\n\t\t\t}\n\t\t} else if (force && targetUser) {\n\t\t\tthrow new Chat.ErrorMessage(`Use /lock; ${name} is not a trusted user and is online.`);\n\t\t}\n\n\t\tconst { privateReason, publicReason } = this.parseSpoiler(reason);\n\n\t\t// Use default time for locks.\n\t\tconst duration = week ? Date.now() + 7 * 24 * 60 * 60 * 1000 : (month ? Date.now() + 30 * 24 * 60 * 60 * 1000 : null);\n\t\tlet affected = [];\n\n\t\tif (targetUser) {\n\t\t\tconst ignoreAlts = Punishments.isSharedIp(targetUser.latestIp);\n\t\t\taffected = await Punishments.lock(targetUser, duration, null, ignoreAlts, publicReason);\n\t\t} else {\n\t\t\taffected = await Punishments.lock(userid, duration, null, false, publicReason);\n\t\t}\n\n\t\tfor (const u of affected) Chat.runHandlers('onPunishUser', 'LOCK', u, room);\n\t\tthis.globalModlog(\n\t\t\t(force ? `FORCE` : ``) + (week ? \"WEEKLOCK\" : (month ? \"MONTHLOCK\" : \"LOCK\")), targetUser || userid, privateReason\n\t\t);\n\n\t\tconst durationMsg = week ? ' for a week' : (month ? ' for a month' : '');\n\t\tthis.addGlobalModAction(`${name} was locked from talking${durationMsg} by ${user.name}.` + (publicReason ? ` (${publicReason})` : \"\"));\n\n\t\tif (room && !room.settings.isHelp) {\n\t\t\troom.hideText([\n\t\t\t\t...affected.map(u => u.id),\n\t\t\t\ttoID(inputUsername),\n\t\t\t]);\n\t\t}\n\n\t\tconst acAccount = (targetUser && targetUser.autoconfirmed !== userid && targetUser.autoconfirmed);\n\t\tlet displayMessage = '';\n\t\tif (affected.length > 1) {\n\t\t\tdisplayMessage = `${name}'s ${(acAccount ? ` ac account: ${acAccount}, ` : \"\")} locked alts: ${affected.slice(1).map((curUser: User) => curUser.getLastName()).join(\", \")}`;\n\t\t\tthis.privateModAction(displayMessage);\n\t\t} else if (acAccount) {\n\t\t\tdisplayMessage = `${name}'s ac account: ${acAccount}`;\n\t\t\tthis.privateModAction(displayMessage);\n\t\t}\n\n\t\tif (targetUser) {\n\t\t\tlet message = `|popup||html|${user.name} has locked you from talking in chats, battles, and PMing regular users${durationMsg}`;\n\t\t\tif (publicReason) message += `\\n\\nReason: ${publicReason}`;\n\n\t\t\tlet appeal = '';\n\t\t\tif (Chat.pages.help) {\n\t\t\t\tappeal += `<a href=\"view-help-request--appeal\"><button class=\"button\"><strong>Appeal your punishment</strong></button></a>`;\n\t\t\t} else if (Config.appealurl) {\n\t\t\t\tappeal += `appeal: <a href=\"${Config.appealurl}\">${Config.appealurl}</a>`;\n\t\t\t}\n\n\t\t\tif (appeal) message += `\\n\\nIf you feel that your lock was unjustified, you can ${appeal}.`;\n\t\t\tmessage += `\\n\\nYour lock will expire in a few days.`;\n\t\t\ttargetUser.send(message);\n\n\t\t\tconst roomauth = Rooms.global.destroyPersonalRooms(userid);\n\t\t\tif (roomauth.length) {\n\t\t\t\tMonitor.log(`[CrisisMonitor] Locked user ${name} has public roomauth (${roomauth.join(', ')}), and should probably be demoted.`);\n\t\t\t}\n\t\t}\n\n\t\t// Automatically upload replays as evidence/reference to the punishment\n\t\tif (room?.battle) this.parse('/savereplay forpunishment');\n\t\treturn true;\n\t},\n\tlockhelp: [\n\t\t`/lock OR /l [username], [reason] - Locks the user from talking in all chats. Requires: % @ ~`,\n\t\t`/weeklock OR /wl [username], [reason] - Same as /lock, but locks users for a week.`,\n\t\t`/lock OR /l [username], [reason] spoiler: [private reason] - Marks [private reason] in modlog only.`,\n\t],\n\n\tunlock(target, room, user) {\n\t\tif (!target) return this.parse('/help unlock');\n\t\tthis.checkCan('lock');\n\n\t\tconst targetUser = Users.get(target);\n\t\tif (targetUser?.namelocked) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${targetUser.name} is namelocked, not locked. Use /unnamelock to unnamelock them.`);\n\t\t}\n\t\tlet reason = '';\n\t\tif (targetUser?.locked && targetUser.locked.startsWith('#')) {\n\t\t\treason = ` (${targetUser.locked})`;\n\t\t}\n\n\t\tconst unlocked = Punishments.unlock(target);\n\n\t\tif (unlocked) {\n\t\t\tthis.addGlobalModAction(`${unlocked.join(\", \")} ${((unlocked.length > 1) ? \"were\" : \"was\")} unlocked by ${user.name}.${reason}`);\n\t\t\tif (!reason) this.globalModlog(\"UNLOCK\", toID(target));\n\t\t\tif (targetUser) targetUser.popup(`${user.name} has unlocked you.`);\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`User '${target}' is not locked.`);\n\t\t}\n\t},\n\tunlockname(target, room, user) {\n\t\tif (!target) return this.parse('/help unlock');\n\t\tthis.checkCan('lock');\n\n\t\tconst userid = toID(target);\n\t\tif (userid.startsWith('guest')) {\n\t\t\tthrow new Chat.ErrorMessage(`You cannot unlock the guest userid - provide their original username instead.`);\n\t\t}\n\t\tconst punishment = Punishments.userids.getByType(userid, 'LOCK') || Punishments.userids.getByType(userid, 'NAMELOCK');\n\t\tif (!punishment) throw new Chat.ErrorMessage(\"This name isn't locked.\");\n\t\tif (punishment.id === userid || Users.get(userid)?.previousIDs.includes(punishment.id as ID)) {\n\t\t\tthrow new Chat.ErrorMessage(`\"${userid}\" was specifically locked by a staff member (check the global modlog). Use /unlock if you really want to unlock this name.`);\n\t\t}\n\t\tPunishments.userids.delete(userid);\n\t\tPunishments.savePunishments();\n\n\t\tfor (const curUser of Users.findUsers([userid], [])) {\n\t\t\tconst locked = Punishments.hasPunishType(curUser.id, ['LOCK', 'NAMELOCK'], curUser.latestIp);\n\t\t\tif (curUser.locked && !curUser.locked.startsWith('#') && !locked) {\n\t\t\t\tcurUser.locked = null;\n\t\t\t\tcurUser.namelocked = null;\n\t\t\t\tcurUser.destroyPunishmentTimer();\n\t\t\t\tcurUser.updateIdentity();\n\t\t\t}\n\t\t}\n\n\t\tthis.addGlobalModAction(`The name '${target}' was unlocked by ${user.name}.`);\n\t\tthis.globalModlog(\"UNLOCKNAME\", userid);\n\t},\n\tunrangelock: 'unlockip',\n\trangeunlock: 'unlockip',\n\tunlockip(target, room, user) {\n\t\ttarget = target.trim();\n\t\tif (!target) return this.parse('/help unlock');\n\t\tthis.checkCan('globalban');\n\t\tconst range = target.endsWith('*');\n\t\tif (range) this.checkCan('rangeban');\n\n\t\tif (!(range ? IPTools.ipRangeRegex : IPTools.ipRegex).test(target)) {\n\t\t\tthrow new Chat.ErrorMessage(\"Please enter a valid IP address.\");\n\t\t}\n\n\t\tconst punishment = Punishments.ips.get(target);\n\t\tif (!punishment) throw new Chat.ErrorMessage(`${target} is not a locked/banned IP or IP range.`);\n\n\t\tPunishments.ips.delete(target);\n\t\tPunishments.savePunishments();\n\n\t\tfor (const curUser of Users.findUsers([], [target])) {\n\t\t\tif (\n\t\t\t\t(range ? curUser.locked === '#rangelock' : !curUser.locked?.startsWith('#')) &&\n\t\t\t\t!Punishments.getPunishType(curUser.id)\n\t\t\t) {\n\t\t\t\tcurUser.locked = null;\n\t\t\t\tif (curUser.namelocked) {\n\t\t\t\t\tcurUser.namelocked = null;\n\t\t\t\t\tcurUser.resetName();\n\t\t\t\t}\n\t\t\t\tcurUser.destroyPunishmentTimer();\n\t\t\t\tcurUser.updateIdentity();\n\t\t\t}\n\t\t}\n\n\t\tthis.privateGlobalModAction(`${user.name} unlocked the ${range ? \"IP range\" : \"IP\"}: ${target}`);\n\t\tthis.globalModlog(`UNLOCK${range ? 'RANGE' : 'IP'}`, null, null, target);\n\t},\n\tunlockiphelp: [`/unlockip [ip] - Unlocks a punished ip while leaving the original punishment intact. Requires: @ ~`],\n\tunlocknamehelp: [`/unlockname [name] - Unlocks a punished alt, leaving the original lock intact. Requires: % @ ~`],\n\tunlockhelp: [\n\t\t`/unlock [username] - Unlocks the user. Requires: % @ ~`,\n\t\t`/unlockname [username] - Unlocks a punished alt while leaving the original punishment intact. Requires: % @ ~`,\n\t\t`/unlockip [ip] - Unlocks a punished ip while leaving the original punishment intact. Requires: @ ~`,\n\t],\n\n\tforceglobalban: 'globalban',\n\tgban: 'globalban',\n\tasync globalban(target, room, user, connection, cmd) {\n\t\tif (!target) return this.parse('/help globalban');\n\t\tconst force = cmd.includes('force');\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tlet userid: ID = toID(targetUsername);\n\n\t\tif (!targetUser && !force) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${targetUsername}' not found. Use /forceglobalban to ban them anyway.`);\n\t\t}\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tif (!reason && REQUIRE_REASONS) {\n\t\t\tthrow new Chat.ErrorMessage(\"Global bans require a reason.\");\n\t\t}\n\t\tthis.checkCan('globalban', targetUser);\n\t\tlet name;\n\n\t\tif (targetUser) {\n\t\t\tname = targetUser.getLastName();\n\t\t\tuserid = targetUser.getLastId();\n\t\t} else {\n\t\t\tname = targetUsername;\n\t\t}\n\n\t\tif (Users.isTrusted(userid)) {\n\t\t\tif (force) {\n\t\t\t\tconst from = runCrisisDemote(userid);\n\t\t\t\tMonitor.log(`[CrisisMonitor] ${name} was globally banned by ${user.name} and demoted from ${from?.join(\", \")}.`);\n\t\t\t\tthis.globalModlog(\"CRISISDEMOTE\", targetUser, ` from ${from?.join(\", \")}`);\n\t\t\t} else {\n\t\t\t\treturn this.sendReply(`${name} is a trusted user. If you are sure you would like to ban them use /forceglobalban.`);\n\t\t\t}\n\t\t}\n\n\t\tconst roomauth = Rooms.global.destroyPersonalRooms(userid);\n\t\tif (roomauth.length) {\n\t\t\tMonitor.log(`[CrisisMonitor] Globally banned user ${name} has public roomauth (${roomauth.join(', ')}), and should probably be demoted.`);\n\t\t}\n\t\tconst { privateReason, publicReason } = this.parseSpoiler(reason);\n\t\ttargetUser?.popup(\n\t\t\t`|modal|${user.name} has globally banned you.${(publicReason ? `\\n\\nReason: ${publicReason}` : ``)} ` +\n\t\t\t`${(Config.appealurl ? `\\n\\nIf you feel that your ban was unjustified, you can appeal:\\n${Config.appealurl}` : ``)}` +\n\t\t\t`\\n\\nYour ban will expire in a few days.`\n\t\t);\n\n\t\tthis.addGlobalModAction(`${name} was globally banned by ${user.name}.${(publicReason ? ` (${publicReason})` : ``)}`);\n\n\t\tconst affected = await Punishments.ban(userid, null, null, false, publicReason);\n\t\tfor (const u of affected) Chat.runHandlers('onPunishUser', 'BAN', u, room);\n\t\tconst acAccount = (targetUser && targetUser.autoconfirmed !== userid && targetUser.autoconfirmed);\n\t\tlet displayMessage = '';\n\t\tif (affected.length > 1) {\n\t\t\tlet guests = affected.length - 1;\n\t\t\tconst affectedAlts = affected.slice(1)\n\t\t\t\t.map(curUser => curUser.getLastName())\n\t\t\t\t.filter(alt => !alt.startsWith('[Guest '));\n\t\t\tguests -= affectedAlts.length;\n\t\t\tdisplayMessage = `${name}'s ${(acAccount ? `ac account: ${acAccount}, ` : ``)} banned alts: ${affectedAlts.join(\", \")} ${(guests ? ` [${guests} guests]` : ``)}`;\n\t\t\tthis.privateModAction(displayMessage);\n\t\t\tfor (const id of affectedAlts) {\n\t\t\t\tthis.add(`|hidelines|unlink|${toID(id)}`);\n\t\t\t}\n\t\t} else if (acAccount) {\n\t\t\tdisplayMessage = `${name}'s ac account: ${acAccount}`;\n\t\t\tthis.privateModAction(displayMessage);\n\t\t}\n\n\t\troom?.hideText([\n\t\t\t...affected.map(u => u.id),\n\t\t\ttoID(inputUsername),\n\t\t]);\n\n\t\tthis.globalModlog(`${force ? `FORCE` : ''}BAN`, targetUser, privateReason);\n\t\treturn true;\n\t},\n\tglobalbanhelp: [\n\t\t`/globalban OR /gban [username], [reason] - Kick user from all rooms and ban user's IP address with reason. Requires: @ ~`,\n\t\t`/globalban OR /gban [username], [reason] spoiler: [private reason] - Marks [private reason] in modlog only.`,\n\t],\n\n\tglobalunban: 'unglobalban',\n\tunglobalban(target, room, user) {\n\t\tif (!target) return this.parse(`/help unglobalban`);\n\t\tthis.checkCan('globalban');\n\n\t\tconst name = Punishments.unban(target);\n\n\t\tif (!name) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${target}' is not globally banned.`);\n\t\t}\n\n\t\tthis.addGlobalModAction(`${name} was globally unbanned by ${user.name}.`);\n\t\tthis.globalModlog(\"UNBAN\", target);\n\t},\n\tunglobalbanhelp: [`/unglobalban [username] - Unban a user. Requires: @ ~`],\n\n\tderoomvoiceall(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tthis.checkCan('editroom', null, room);\n\t\tif (!room.auth.size) throw new Chat.ErrorMessage(\"Room does not have roomauth.\");\n\t\tif (!target) {\n\t\t\tuser.lastCommand = '/deroomvoiceall';\n\t\t\tthrow new Chat.ErrorMessage([\"THIS WILL DEROOMVOICE ALL ROOMVOICED USERS.\",\n\t\t\t\t\"To confirm, use: /deroomvoiceall confirm\"]);\n\t\t}\n\t\tif (user.lastCommand !== '/deroomvoiceall' || target !== 'confirm') {\n\t\t\treturn this.parse('/help deroomvoiceall');\n\t\t}\n\t\tuser.lastCommand = '';\n\t\tlet count = 0;\n\t\tfor (const [userid, symbol] of room.auth) {\n\t\t\tif (symbol === '+') {\n\t\t\t\troom.auth.delete(userid);\n\t\t\t\tif (userid in room.users) room.users[userid].updateIdentity(room.roomid);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (!count) {\n\t\t\treturn this.sendReply(\"(This room has zero roomvoices)\");\n\t\t}\n\t\troom.saveSettings();\n\t\tthis.addModAction(`All ${count} roomvoices have been cleared by ${user.name}.`);\n\t\tthis.modlog('DEROOMVOICEALL');\n\t},\n\tderoomvoiceallhelp: [`/deroomvoiceall - Devoice all roomvoiced users. Requires: # ~`],\n\n\t// this is a separate command for two reasons\n\t// a - yearticketban is preferred over /ht yearban\n\t// b - it would be messy to switch\n\t//   from both Punishments.punishRange and #punish in /ht ban\n\t//   since this takes ips / userids\n\tasync yearticketban(target, room, user) {\n\t\tthis.checkCan('rangeban');\n\t\ttarget = target.trim();\n\t\tlet reason = '';\n\t\t[target, reason] = this.splitOne(target);\n\t\tlet isIP = false;\n\t\tlet descriptor = '';\n\t\tif (IPTools.ipRangeRegex.test(target)) {\n\t\t\tisIP = true;\n\t\t\tif (IPTools.ipRegex.test(target)) {\n\t\t\t\tdescriptor = 'the IP ';\n\t\t\t} else {\n\t\t\t\tdescriptor = 'the IP range ';\n\t\t\t}\n\t\t} else {\n\t\t\ttarget = toID(target);\n\t\t}\n\t\tif (!target) return this.parse(`/help yearticketban`);\n\t\tconst expireTime = Date.now() + 365 * 24 * 60 * 60 * 1000;\n\t\tif (isIP) {\n\t\t\tPunishments.punishRange(target, reason, expireTime, 'TICKETBAN');\n\t\t} else {\n\t\t\tawait Punishments.punish(target as ID, {\n\t\t\t\ttype: 'TICKETBAN',\n\t\t\t\tid: target as ID,\n\t\t\t\texpireTime,\n\t\t\t\treason,\n\t\t\t\trest: [],\n\t\t\t}, true);\n\t\t}\n\t\tthis.addGlobalModAction(\n\t\t\t`${user.name} banned ${descriptor}${target} from opening tickets for a year` +\n\t\t\t`${reason ? ` (${reason})` : \"\"}`\n\t\t);\n\t\tthis.globalModlog(\n\t\t\t'YEARTICKETBAN',\n\t\t\tisIP ? null : target,\n\t\t\treason,\n\t\t\tisIP ? target : undefined\n\t\t);\n\t},\n\tyearticketbanhelp: [\n\t\t`/yearticketban [IP/userid] - Ban an IP or a userid from opening tickets for a year. `,\n\t\t`Accepts wildcards to ban ranges. Requires: ~`,\n\t],\n\n\trangeban: 'banip',\n\tyearbanip: 'banip',\n\tbanip(target, room, user, connection, cmd) {\n\t\tconst [ip, reason] = this.splitOne(target);\n\t\tif (!ip || !/^[0-9.]+(?:\\.\\*)?$/.test(ip)) return this.parse('/help banip');\n\t\tif (!reason) throw new Chat.ErrorMessage(\"/banip requires a ban reason\");\n\n\t\tthis.checkCan('rangeban');\n\t\tconst ipDesc = `IP ${(ip.endsWith('*') ? `range ` : ``)}${ip}`;\n\n\t\tconst year = cmd.startsWith('year');\n\t\tconst time = year ? Date.now() + 365 * 24 * 60 * 60 * 1000 : null;\n\n\t\tconst curPunishment = Punishments.ipSearch(ip, 'BAN');\n\t\tif (curPunishment?.type === 'BAN' && !time) {\n\t\t\tthrow new Chat.ErrorMessage(`The ${ipDesc} is already temporarily banned.`);\n\t\t}\n\t\tPunishments.punishRange(ip, reason, time, 'BAN');\n\n\t\tconst duration = year ? 'year' : 'hour';\n\t\tif (!this.room || this.room.roomid !== 'staff') {\n\t\t\tthis.sendReply(`You ${duration}-banned the ${ipDesc}.`);\n\t\t}\n\t\tthis.room = Rooms.get('staff') || null;\n\t\tthis.addGlobalModAction(\n\t\t\t`${user.name} ${duration}-banned the ${ipDesc}: ${reason}`\n\t\t);\n\t\tthis.globalModlog(\n\t\t\t`${year ? \"YEAR\" : \"\"}RANGEBAN`,\n\t\t\tnull,\n\t\t\t`${ip.endsWith('*') ? ip : `[${ip}]`}: ${reason}`\n\t\t);\n\t},\n\tbaniphelp: [\n\t\t`/banip [ip] OR /yearbanip [ip] - Globally bans this IP or IP range for an hour. Accepts wildcards to ban ranges.`,\n\t\t`Existing users on the IP will not be banned. Requires: ~`,\n\t],\n\n\tunrangeban: 'unbanip',\n\tunbanip(target, room, user) {\n\t\ttarget = target.trim();\n\t\tif (!target) {\n\t\t\treturn this.parse('/help unbanip');\n\t\t}\n\t\tthis.checkCan('rangeban');\n\t\tif (!Punishments.ips.has(target)) {\n\t\t\tthrow new Chat.ErrorMessage(`${target} is not a locked/banned IP or IP range.`);\n\t\t}\n\t\tPunishments.ips.delete(target);\n\n\t\tthis.addGlobalModAction(`${user.name} unbanned the ${(target.endsWith('*') ? \"IP range\" : \"IP\")}: ${target}`);\n\t\tthis.modlog('UNRANGEBAN', null, target);\n\t},\n\tunbaniphelp: [`/unbanip [ip] - Unbans. Accepts wildcards to ban ranges. Requires: ~`],\n\n\tforceyearlockname: 'yearlockname',\n\tyearlockid: 'yearlockname',\n\tforceyearlockid: 'yearlockname',\n\tyearlockuserid: 'yearlockname',\n\tforceyearlockuserid: 'yearlockname',\n\tyearlockname(target, room, user) {\n\t\tthis.checkCan('rangeban');\n\t\tconst [targetUsername, rest] = Utils.splitFirst(target, ',').map(k => k.trim());\n\t\tconst targetUser = Users.get(targetUsername);\n\t\tconst targetUserid = toID(targetUsername);\n\t\tif (!targetUserid || targetUserid.length > 18) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid userid.`);\n\t\t}\n\t\tconst force = this.cmd.includes('force');\n\t\tif (targetUser?.registered && !force) {\n\t\t\tthrow new Chat.ErrorMessage(`That user is registered. Either permalock them normally or use /forceyearlockname.`);\n\t\t}\n\t\tconst punishment = {\n\t\t\ttype: 'YEARLOCK',\n\t\t\tid: targetUserid,\n\t\t\texpireTime: Date.now() + 365 * 24 * 60 * 60 * 1000,\n\t\t\treason: rest || \"\",\n\t\t};\n\t\tPunishments.userids.add(targetUserid, punishment);\n\t\tPunishments.savePunishments();\n\t\tthis.addGlobalModAction(`${user.name} locked the userid '${targetUserid}' for a year${rest ? ` (${rest})` : ''}.`);\n\t\tthis.globalModlog(`${force ? `FORCE` : ''}YEARLOCKNAME`, targetUserid, rest);\n\t\tif (targetUser) {\n\t\t\tChat.punishmentfilter(targetUser, punishment);\n\t\t\ttargetUser.locked = targetUserid;\n\t\t}\n\t},\n\trangelock: 'lockip',\n\tyearlockip: 'lockip',\n\tyearnamelockip: 'lockip',\n\tlockip(target, room, user, connection, cmd) {\n\t\tconst [ip, reason] = this.splitOne(target);\n\t\tif (!ip || !/^[0-9.]+(?:\\.\\*)?$/.test(ip)) return this.parse('/help lockip');\n\t\tif (!reason) throw new Chat.ErrorMessage(\"/lockip requires a lock reason\");\n\n\t\tthis.checkCan('rangeban');\n\t\tconst ipDesc = ip.endsWith('*') ? `IP range ${ip}` : `IP ${ip}`;\n\n\t\tconst year = cmd.startsWith('year');\n\t\tconst curPunishment = Punishments.byWeight(Punishments.ipSearch(ip) || [])[0];\n\t\tif (!year && curPunishment && (curPunishment.type === 'BAN' || curPunishment.type === 'LOCK')) {\n\t\t\tconst punishDesc = curPunishment.type === 'BAN' ? `temporarily banned` : `temporarily locked`;\n\t\t\tthrow new Chat.ErrorMessage(`The ${ipDesc} is already ${punishDesc}.`);\n\t\t}\n\n\t\tconst time = year ? Date.now() + 365 * 24 * 60 * 60 * 1000 : null;\n\t\tconst type = cmd.includes('name') ? 'NAMELOCK' : 'LOCK';\n\t\tPunishments.punishRange(ip, reason, time, type);\n\n\t\tthis.addGlobalModAction(`${user.name} ${year ? 'year' : 'hour'}-${type.toLowerCase()}ed the ${ipDesc}: ${reason}`);\n\t\tthis.globalModlog(\n\t\t\t`${year ? 'YEAR' : 'RANGE'}${type}`,\n\t\t\tnull,\n\t\t\t`${ip.endsWith('*') ? ip : `[${ip}]`}: ${reason}`,\n\t\t\tip.endsWith('*') ? `${ip.slice(0, -2)}` : ip\n\t\t);\n\t},\n\tlockiphelp: [\n\t\t`/lockip [ip] - Globally locks this IP or IP range for an hour. Accepts wildcards to ban ranges.`,\n\t\t`/yearlockip [ip] - Globally locks this IP or IP range for one year. Accepts wildcards to ban ranges.`,\n\t\t`/yearnamelockip [ip] - Namelocks this IP or IP range for one year. Accepts wildcards to ban ranges.`,\n\t\t`Existing users on the IP will not be banned. Requires: ~`,\n\t],\n\n\t/*********************************************************\n\t * Moderating: Other\n\t *********************************************************/\n\n\tmn: 'modnote',\n\tmodnote(target, room, user, connection) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help modnote');\n\t\tthis.checkChat();\n\n\t\tif (target.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The note is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tthis.checkCan('receiveauthmessages', null, room);\n\t\ttarget = target.replace(/\\n/g, \"; \");\n\t\tlet targeted = /\\[([^\\]]+)\\]/.exec(target)?.[1] || null;\n\t\tif (!targeted) {\n\t\t\t// allow `name, note` and `name - note` syntax\n\t\t\ttargeted = target.split(/[,-]/)[0]?.trim() || \"\";\n\t\t\tif (!targeted || !(\n\t\t\t\tUsers.get(targeted) || Punishments.search(target).length || IPTools.ipRegex.test(targeted)\n\t\t\t) || toID(targeted) === toID(target)) {\n\t\t\t\ttargeted = null;\n\t\t\t}\n\t\t}\n\t\tlet targetUserid, targetIP;\n\n\t\tif (targeted) {\n\t\t\tif (IPTools.ipRegex.test(targeted)) {\n\t\t\t\ttargetIP = targeted;\n\t\t\t} else {\n\t\t\t\ttargetUserid = toID(targeted);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t['staff', 'upperstaff'].includes(room.roomid) ||\n\t\t\t(Rooms.Modlog.getSharedID(room.roomid) && user.can('modlog'))\n\t\t) {\n\t\t\tthis.globalModlog('NOTE', targetUserid || null, target, targetIP);\n\t\t} else {\n\t\t\tthis.modlog('NOTE', targetUserid || null, target);\n\t\t}\n\n\t\tthis.privateModAction(`${user.name} notes: ${target}`);\n\t},\n\tmodnotehelp: [\n\t\t`/modnote <note> - Adds a moderator note that can be read through modlog. Requires: % @ # ~`,\n\t\t`/modnote [<userid>] <note> - Adds a moderator note to a user's modlog that can be read through modlog. Requires: % @ # ~`,\n\t],\n\n\tglobalpromote: 'promote',\n\tpromote(target, room, user, connection, cmd) {\n\t\tif (!target) return this.parse('/help promote');\n\n\t\tconst { targetUser, targetUsername, rest: nextGroupName } = this.splitUser(target, { exactName: true });\n\t\tconst userid = toID(targetUsername);\n\t\tconst name = targetUser?.name || targetUsername;\n\n\t\tif (!userid) return this.parse('/help promote');\n\n\t\tconst currentGroup = targetUser?.tempGroup || Users.globalAuth.get(userid);\n\t\tlet nextGroup = nextGroupName as GroupSymbol;\n\t\tif (nextGroupName === 'deauth') nextGroup = Users.Auth.defaultSymbol();\n\t\tif (!nextGroup) {\n\t\t\tthrow new Chat.ErrorMessage(\"Please specify a group such as /globalvoice or /globaldeauth\");\n\t\t}\n\t\tif (!Config.groups[nextGroup]) {\n\t\t\tthrow new Chat.ErrorMessage(`Group '${nextGroup}' does not exist.`);\n\t\t}\n\t\tif (!cmd.startsWith('global')) {\n\t\t\tlet groupid = Config.groups[nextGroup].id;\n\t\t\tif (!groupid && nextGroup === Users.Auth.defaultSymbol()) groupid = 'deauth' as ID;\n\t\t\tif (Config.groups[nextGroup].globalonly) throw new Chat.ErrorMessage(`Did you mean \"/global${groupid}\"?`);\n\t\t\tif (Config.groups[nextGroup].roomonly) throw new Chat.ErrorMessage(`Did you mean \"/room${groupid}\"?`);\n\t\t\tthrow new Chat.ErrorMessage(`Did you mean \"/room${groupid}\" or \"/global${groupid}\"?`);\n\t\t}\n\t\tif (Config.groups[nextGroup].roomonly || Config.groups[nextGroup].battleonly) {\n\t\t\tthrow new Chat.ErrorMessage(`Group '${nextGroup}' does not exist as a global rank.`);\n\t\t}\n\n\t\tconst groupName = Config.groups[nextGroup].name || \"regular user\";\n\t\tif (currentGroup === nextGroup) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${name}' is already a ${groupName}`);\n\t\t}\n\t\tif (!Users.Auth.hasPermission(user, 'promote', currentGroup)) {\n\t\t\tthrow new Chat.ErrorMessage([`/${cmd} - Access denied for promoting from ${currentGroup}`,\n\t\t\t\t`You can only promote to/from: ${Users.Auth.listJurisdiction(user, 'promote')}`]);\n\t\t}\n\t\tif (!Users.Auth.hasPermission(user, 'promote', nextGroup)) {\n\t\t\tthrow new Chat.ErrorMessage([`/${cmd} - Access denied for promoting to ${groupName}`,\n\t\t\t\t`You can only promote to/from: ${Users.Auth.listJurisdiction(user, 'promote')}`]);\n\t\t}\n\n\t\tif (!Users.isUsernameKnown(userid)) {\n\t\t\tthrow new Chat.ErrorMessage(`/globalpromote - WARNING: '${name}' is offline and unrecognized. The username might be misspelled (either by you or the person who told you) or unregistered. Use /forcepromote if you're sure you want to risk it.`);\n\t\t}\n\t\tif (targetUser && !targetUser.registered) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${name}' is unregistered, and so can't be promoted.`);\n\t\t}\n\t\tif (nextGroup === Users.Auth.defaultSymbol()) {\n\t\t\tUsers.globalAuth.delete(targetUser ? targetUser.id : userid);\n\t\t} else {\n\t\t\tUsers.globalAuth.set(targetUser ? targetUser.id : userid, nextGroup);\n\t\t}\n\t\tif (Users.Auth.getGroup(nextGroup).rank < Users.Auth.getGroup(currentGroup).rank) {\n\t\t\tthis.privateGlobalModAction(`${name} was demoted to Global ${groupName} by ${user.name}.`);\n\t\t\tthis.globalModlog(`GLOBAL ${groupName.toUpperCase()}`, userid, `(demote)`);\n\t\t\tif (targetUser) targetUser.popup(`You were demoted to Global ${groupName} by ${user.name}.`);\n\t\t} else {\n\t\t\tthis.addGlobalModAction(`${name} was promoted to Global ${groupName} by ${user.name}.`);\n\t\t\tthis.globalModlog(`GLOBAL ${groupName.toUpperCase()}`, userid);\n\t\t\tif (targetUser) targetUser.popup(`You were promoted to Global ${groupName} by ${user.name}.`);\n\t\t}\n\n\t\tif (targetUser) {\n\t\t\ttargetUser.updateIdentity();\n\t\t\tRooms.global.checkAutojoin(targetUser);\n\t\t\tif (targetUser.trusted && !Users.isTrusted(targetUser.id)) {\n\t\t\t\ttargetUser.trusted = '';\n\t\t\t}\n\t\t}\n\t},\n\tpromotehelp: [`/promote [username], [group] - Promotes the user to the specified group. Requires: ~`],\n\n\tuntrustuser: 'trustuser',\n\tunconfirmuser: 'trustuser',\n\tconfirmuser: 'trustuser',\n\tforceconfirmuser: 'trustuser',\n\tforcetrustuser: 'trustuser',\n\ttrustuser(target, room, user, connection, cmd) {\n\t\tif (!target) return this.parse('/help trustuser');\n\t\tthis.checkCan('promote');\n\n\t\tconst force = cmd.includes('force');\n\t\tconst untrust = cmd.includes('un');\n\t\tconst { targetUser, targetUsername, rest } = this.splitUser(target, { exactName: true });\n\t\tif (rest) throw new Chat.ErrorMessage(`This command does not support specifying a reason.`);\n\t\tconst userid = toID(targetUsername);\n\t\tconst name = targetUser?.name || targetUsername;\n\n\t\tconst currentGroup = Users.globalAuth.get(userid);\n\n\t\tif (untrust) {\n\t\t\tif (currentGroup !== Users.Auth.defaultSymbol()) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${name}' is trusted indirectly through global rank ${currentGroup}. Demote them from that rank to remove trusted status.`);\n\t\t\t}\n\t\t\tconst trustedSourceRooms = Rooms.global.chatRooms\n\t\t\t\t.filter(authRoom => authRoom.persist && authRoom.settings.isPrivate !== true && authRoom.auth.isStaff(userid))\n\t\t\t\t.map(authRoom => authRoom.auth.get(userid) + authRoom.roomid).join(' ');\n\t\t\tif (trustedSourceRooms.length && !Users.globalAuth.has(userid)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${name}' is trusted indirectly through room ranks ${trustedSourceRooms}. Demote them from those ranks to remove trusted status.`);\n\t\t\t}\n\t\t\tif (!Users.globalAuth.has(userid)) throw new Chat.ErrorMessage(`User '${name}' is not trusted.`);\n\n\t\t\tif (targetUser) {\n\t\t\t\ttargetUser.setGroup(Users.Auth.defaultSymbol());\n\t\t\t} else {\n\t\t\t\tUsers.globalAuth.delete(userid);\n\t\t\t}\n\n\t\t\tthis.privateGlobalModAction(`${name} was set to no longer be a trusted user by ${user.name}.`);\n\t\t\tthis.globalModlog('UNTRUSTUSER', userid);\n\t\t} else {\n\t\t\tif (!targetUser && !force) throw new Chat.ErrorMessage(`User '${name}' is offline. Use /force${cmd} if you're sure.`);\n\t\t\tif (currentGroup) {\n\t\t\t\tif (Users.globalAuth.has(userid)) {\n\t\t\t\t\tif (currentGroup === Users.Auth.defaultSymbol()) throw new Chat.ErrorMessage(`User '${name}' is already trusted.`);\n\t\t\t\t\tthrow new Chat.ErrorMessage(`User '${name}' has a global rank higher than trusted.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (targetUser) {\n\t\t\t\ttargetUser.setGroup(Users.Auth.defaultSymbol(), true);\n\t\t\t} else {\n\t\t\t\tUsers.globalAuth.set(userid, Users.Auth.defaultSymbol());\n\t\t\t}\n\n\t\t\tthis.privateGlobalModAction(`${name} was set as a trusted user by ${user.name}.`);\n\t\t\tthis.globalModlog('TRUSTUSER', userid);\n\t\t}\n\t},\n\ttrustuserhelp: [\n\t\t`/trustuser [username] - Trusts the user (makes them immune to locks). Requires: ~`,\n\t\t`/untrustuser [username] - Removes the trusted user status from the user. Requires: ~`,\n\t],\n\n\tdesectionleader: 'sectionleader',\n\tsectionleader(target, room, user, connection, cmd) {\n\t\tthis.checkCan('gdeclare');\n\t\troom = this.requireRoom();\n\t\tconst demoting = cmd === 'desectionleader';\n\t\tif (!target || (target.split(',').length < 2 && !demoting)) return this.parse(`/help sectionleader`);\n\n\t\tconst { targetUser, targetUsername, rest: sectionid } = this.splitUser(target, { exactName: true });\n\t\tconst userid = toID(targetUsername);\n\t\tconst section = demoting ? Users.globalAuth.sectionLeaders.get(userid)! : room.validateSection(sectionid);\n\t\tconst name = targetUser ? targetUser.name : targetUsername;\n\t\tif (Users.globalAuth.sectionLeaders.has(targetUser?.id || userid) && !demoting) {\n\t\t\tthrow new Chat.ErrorMessage(`${name} is already a Section Leader of ${RoomSections.sectionNames[section]}.`);\n\t\t} else if (!Users.globalAuth.sectionLeaders.has(targetUser?.id || userid) && demoting) {\n\t\t\tthrow new Chat.ErrorMessage(`${name} is not a Section Leader.`);\n\t\t}\n\t\tif (!demoting) {\n\t\t\tUsers.globalAuth.setSection(userid, section);\n\t\t\tthis.addGlobalModAction(`${name} was appointed Section Leader of ${RoomSections.sectionNames[section]} by ${user.name}.`);\n\t\t\tthis.globalModlog(`SECTION LEADER`, userid, section);\n\t\t\ttargetUser?.popup(`You were appointed Section Leader of ${RoomSections.sectionNames[section]} by ${user.name}.`);\n\t\t} else {\n\t\t\tconst group = Users.globalAuth.get(userid);\n\t\t\tUsers.globalAuth.deleteSection(userid);\n\t\t\tthis.privateGlobalModAction(`${name} was demoted from Section Leader of ${RoomSections.sectionNames[section]} by ${user.name}.`);\n\t\t\tif (group === ' ') this.sendReply(`They are also no longer manually trusted. If they should be, use '/trustuser'.`);\n\t\t\tthis.globalModlog(`DESECTION LEADER`, userid, section);\n\t\t\ttargetUser?.popup(`You were demoted from Section Leader of ${RoomSections.sectionNames[section]} by ${user.name}.`);\n\t\t}\n\n\t\tif (targetUser) {\n\t\t\ttargetUser.updateIdentity();\n\t\t\tRooms.global.checkAutojoin(targetUser);\n\t\t\tif (targetUser.trusted && !Users.isTrusted(targetUser.id)) {\n\t\t\t\ttargetUser.trusted = '';\n\t\t\t}\n\t\t}\n\t},\n\tsectionleaderhelp: [\n\t\t`/sectionleader [target user], [sectionid] - Appoints [target user] Section Leader.`,\n\t\t`/desectionleader [target user] - Demotes [target user] from Section Leader.`,\n\t\t`Valid sections: ${RoomSections.sections.join(', ')}`,\n\t\t`If you want to change which section someone leads, demote them and then re-promote them in the desired section.`,\n\t\t`Requires: ~`,\n\t],\n\n\tglobaldemote: 'demote',\n\tdemote(target) {\n\t\tif (!target) return this.parse('/help demote');\n\t\tthis.run('promote');\n\t},\n\tdemotehelp: [`/demote [username], [group] - Demotes the user to the specified group. Requires: ~`],\n\n\tforcepromote(target, room, user, connection) {\n\t\t// warning: never document this command in /help\n\t\tthis.checkCan('forcepromote');\n\t\tconst { targetUsername, rest: nextGroupName } = this.splitUser(target, { exactName: true });\n\t\tlet name = this.filter(targetUsername);\n\t\tif (!name) return;\n\t\tname = name.slice(0, 18);\n\t\tconst nextGroup = nextGroupName as GroupSymbol;\n\t\tif (!Config.groups[nextGroup]) throw new Chat.ErrorMessage(`Group '${nextGroup}' does not exist.`);\n\t\tif (Config.groups[nextGroup].roomonly || Config.groups[nextGroup].battleonly) {\n\t\t\tthrow new Chat.ErrorMessage(`Group '${nextGroup}' does not exist as a global rank.`);\n\t\t}\n\n\t\tif (Users.isUsernameKnown(name)) {\n\t\t\tthrow new Chat.ErrorMessage(\"/forcepromote - Don't forcepromote unless you have to.\");\n\t\t}\n\t\tUsers.globalAuth.set(name as ID, nextGroup);\n\n\t\tthis.addGlobalModAction(`${name} was promoted to Global ${(Config.groups[nextGroup].name || \"regular user\")} by ${user.name}.`);\n\t\tthis.globalModlog(`GLOBAL${(Config.groups[nextGroup].name || \"regular\").toUpperCase()}`, toID(name));\n\t},\n\n\tdevoice: 'deauth',\n\tdeauth(target, room, user) {\n\t\treturn this.parse(`/demote ${target}, deauth`);\n\t},\n\n\tdeglobalvoice: 'globaldeauth',\n\tdeglobalauth: 'globaldeauth',\n\tglobaldevoice: 'globaldeauth',\n\tglobaldeauth(target, room, user) {\n\t\treturn this.parse(`/globaldemote ${target}, deauth`);\n\t},\n\n\tderoomvoice: 'roomdeauth',\n\troomdevoice: 'roomdeauth',\n\tderoomauth: 'roomdeauth',\n\troomdeauth(target, room, user) {\n\t\treturn this.parse(`/roomdemote ${target}, deauth`);\n\t},\n\n\tdeclare(target, room, user) {\n\t\ttarget = target.trim();\n\t\tif (!target) return this.parse('/help declare');\n\t\troom = this.requireRoom();\n\t\tthis.checkCan('declare', null, room);\n\t\tthis.checkChat();\n\t\tif (target.length > 2000) throw new Chat.ErrorMessage(\"Declares should not exceed 2000 characters.\");\n\n\t\tfor (const id in room.users) {\n\t\t\troom.users[id].sendTo(room, `|notify|${room.title} announcement!|${target}`);\n\t\t}\n\t\tthis.add(Utils.html`|raw|<div class=\"broadcast-blue\"><b>${target}</b></div>`);\n\t\tthis.modlog('DECLARE', null, target);\n\t},\n\tdeclarehelp: [`/declare [message] - Anonymously announces a message. Requires: # * ~`],\n\n\thtmldeclare(target, room, user) {\n\t\tif (!target) return this.parse('/help htmldeclare');\n\t\troom = this.requireRoom();\n\t\tthis.checkCan('declare', null, room);\n\t\tthis.checkChat();\n\t\tthis.checkHTML(target);\n\n\t\tfor (const u in room.users) {\n\t\t\tUsers.get(u)?.sendTo(\n\t\t\t\troom,\n\t\t\t\t`|notify|${room.title} announcement!|${Utils.stripHTML(target)}`\n\t\t\t);\n\t\t}\n\t\tthis.add(`|raw|<div class=\"broadcast-blue\"><b>${target}</b></div>`);\n\t\tthis.modlog(`HTMLDECLARE`, null, target);\n\t},\n\thtmldeclarehelp: [`/htmldeclare [message] - Anonymously announces a message using safe HTML. Requires: # * ~`],\n\n\tgdeclare: 'globaldeclare',\n\tglobaldeclare(target, room, user) {\n\t\tif (!target) return this.parse('/help globaldeclare');\n\t\tthis.checkCan('gdeclare');\n\t\tthis.checkHTML(target);\n\n\t\tfor (const u of Users.users.values()) {\n\t\t\tif (u.connected) u.send(`|pm|~|${u.tempGroup}${u.name}|/raw <div class=\"broadcast-blue\"><b>${target}</b></div>`);\n\t\t}\n\t\tthis.globalModlog(`GLOBALDECLARE`, null, target);\n\t},\n\tglobaldeclarehelp: [`/globaldeclare [message] - Anonymously sends a private message to all the users on the site. Requires: ~`],\n\n\tcdeclare: 'chatdeclare',\n\tchatdeclare(target, room, user) {\n\t\tif (!target) return this.parse('/help chatdeclare');\n\t\tthis.checkCan('gdeclare');\n\t\tthis.checkHTML(target);\n\n\t\tfor (const curRoom of Rooms.rooms.values()) {\n\t\t\tif (curRoom.type !== 'battle') {\n\t\t\t\tcurRoom.addRaw(`<div class=\"broadcast-blue\"><b>${target}</b></div>`).update();\n\t\t\t}\n\t\t}\n\t\tthis.globalModlog(`CHATDECLARE`, null, target);\n\t},\n\tchatdeclarehelp: [`/cdeclare [message] - Anonymously announces a message to all chatrooms on the server. Requires: ~`],\n\n\twall: 'announce',\n\tannounce(target, room, user) {\n\t\tif (!target) return this.parse('/help announce');\n\n\t\tif (room) this.checkCan('announce', null, room);\n\n\t\tthis.checkChat(target);\n\n\t\treturn `/announce ${target}`;\n\t},\n\tannouncehelp: [`/announce OR /wall [message] - Makes an announcement. Requires: % @ # ~`],\n\n\tnotifyoffrank: 'notifyrank',\n\tnotifyrank(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse(`/help notifyrank`);\n\t\tthis.checkCan('addhtml', null, room);\n\t\tthis.checkChat();\n\t\tlet [rank, titleNotification] = this.splitOne(target);\n\t\tif (rank === 'all') rank = ` `;\n\t\tif (!(rank in Config.groups)) throw new Chat.ErrorMessage(`Group '${rank}' does not exist.`);\n\t\tconst id = `${room.roomid}-rank-${(Config.groups[rank].id || `all`)}`;\n\t\tif (cmd === 'notifyoffrank') {\n\t\t\tif (rank === ' ') {\n\t\t\t\troom.send(`|tempnotifyoff|${id}`);\n\t\t\t} else {\n\t\t\t\troom.sendRankedUsers(`|tempnotifyoff|${id}`, rank as GroupSymbol);\n\t\t\t}\n\t\t} else {\n\t\t\tlet [title, notificationHighlight] = this.splitOne(titleNotification);\n\t\t\tif (!title) title = `${room.title} ${(Config.groups[rank].name ? `${Config.groups[rank].name}+ ` : ``)}message!`;\n\t\t\tif (!user.can('addhtml')) {\n\t\t\t\ttitle += ` (notification from ${user.name})`;\n\t\t\t}\n\t\t\tconst [notification, highlight] = this.splitOne(notificationHighlight);\n\t\t\tif (notification.length > 300) throw new Chat.ErrorMessage(`Notifications should not exceed 300 characters.`);\n\t\t\tconst message = `|tempnotify|${id}|${title}|${notification}${(highlight ? `|${highlight}` : ``)}`;\n\t\t\tif (rank === ' ') {\n\t\t\t\troom.send(message);\n\t\t\t} else {\n\t\t\t\troom.sendRankedUsers(message, rank as GroupSymbol);\n\t\t\t}\n\t\t\tthis.modlog(`NOTIFYRANK`, null, target);\n\t\t}\n\t},\n\tnotifyrankhelp: [\n\t\t`/notifyrank [rank], [title], [message], [highlight] - Sends a notification to users who are [rank] or higher (and highlight on [highlight], if specified). Requires: # * ~`,\n\t\t`/notifyoffrank [rank] - Closes the notification previously sent with /notifyrank [rank]. Requires: # * ~`,\n\t],\n\n\tnotifyoffuser: 'notifyuser',\n\tnotifyuser(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse(`/help notifyuser`);\n\t\tthis.checkCan('addhtml', null, room);\n\t\tthis.checkChat();\n\t\tconst { targetUser, targetUsername, rest: titleNotification } = this.splitUser(target);\n\t\tif (!targetUser?.connected) throw new Chat.ErrorMessage(`User '${targetUsername}' not found.`);\n\t\tconst id = `${room.roomid}-user-${toID(targetUsername)}`;\n\t\tif (cmd === 'notifyoffuser') {\n\t\t\troom.sendUser(targetUser, `|tempnotifyoff|${id}`);\n\t\t\tthis.sendReply(`Closed the notification previously sent to ${targetUser.name}.`);\n\t\t} else {\n\t\t\tlet [title, notification] = this.splitOne(titleNotification);\n\t\t\tif (!title) title = `${room.title} notification!`;\n\t\t\tif (!user.can('addhtml')) {\n\t\t\t\ttitle += ` (notification from ${user.name})`;\n\t\t\t}\n\t\t\tif (notification.length > 300) throw new Chat.ErrorMessage(`Notifications should not exceed 300 characters.`);\n\t\t\tconst message = `|tempnotify|${id}|${title}|${notification}`;\n\t\t\troom.sendUser(targetUser, message);\n\t\t\tthis.sendReply(`Sent a notification to ${targetUser.name}.`);\n\t\t}\n\t},\n\tnotifyuserhelp: [\n\t\t`/notifyuser [username], [title], [message] - Sends a notification to [user]. Requires: # * ~`,\n\t\t`/notifyoffuser [user] - Closes the notification previously sent with /notifyuser [user]. Requires: # * ~`,\n\t],\n\n\tfr: 'forcerename',\n\tofr: 'forcerename',\n\tofflineforcerename: 'forcerename',\n\tforcerename(target, room, user) {\n\t\tif (!target) return this.parse('/help forcerename');\n\n\t\tconst { targetUser, targetUsername, rest: reason } = this.splitUser(target, { exactName: true });\n\t\tconst offline = this.cmd.startsWith('o');\n\t\tconst targetID = targetUser?.id || toID(targetUsername);\n\t\t// && !offline because maybe we're trying to disallow the name after they namechanged\n\t\tif (!targetUser && !offline) {\n\t\t\tconst { targetUser: targetUserInexact, inputUsername } = this.splitUser(target);\n\t\t\tif (targetUserInexact) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User has already changed their name to '${targetUserInexact.name}'.`);\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`User '${inputUsername}' not found. (use /offlineforcerename to rename anyway.)`);\n\t\t}\n\t\tif (Punishments.namefilterwhitelist.has(targetID)) {\n\t\t\tconst errorMessage = [`That name is blocked from being forcerenamed.`];\n\t\t\tif (user.can('bypassall')) {\n\t\t\t\terrorMessage.push(`Use /noforcerename remove to remove it from the list if you wish to rename it.`);\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(errorMessage);\n\t\t}\n\t\tthis.checkCan('forcerename', targetID);\n\t\tconst { publicReason, privateReason } = this.parseSpoiler(reason);\n\n\t\tMonitor.forceRenames.set(targetID, false);\n\n\t\tlet forceRenameMessage;\n\t\tif (targetUser?.connected) {\n\t\t\tforceRenameMessage = `was forced to choose a new name by ${user.name}${(publicReason ? `: ${publicReason}` : ``)}`;\n\t\t\tthis.globalModlog('FORCERENAME', targetUser, reason);\n\t\t\tLadders.cancelSearches(targetUser);\n\t\t\ttargetUser.send(`|nametaken||${user.name} considers your name inappropriate${(publicReason ? `: ${publicReason}` : ``)}`);\n\t\t} else {\n\t\t\tforceRenameMessage = `was forced to choose a new name by ${user.name} while offline${(publicReason ? `: ${publicReason}` : ``)}`;\n\t\t\tthis.globalModlog('FORCERENAME OFFLINE', targetUser, privateReason);\n\t\t}\n\t\tMonitor.forceRenames.set(targetID, false);\n\n\t\tif (room?.roomid !== 'staff') {\n\t\t\tif (room?.roomid.startsWith('help-')) {\n\t\t\t\tthis.addModAction(`${targetUser?.name || targetID} ${forceRenameMessage}`);\n\t\t\t} else {\n\t\t\t\tthis.privateModAction(`${targetUser?.name || targetID} ${forceRenameMessage}`);\n\t\t\t}\n\t\t}\n\t\tconst roomMessage = this.pmTarget ? `<PM:${this.pmTarget.id}>` :\n\t\t\troom && room.roomid !== 'staff' ? `\u00AB<a href=\"/${room.roomid}\" target=\"_blank\">${room.roomid}</a>\u00BB ` :\n\t\t\t'';\n\t\tconst rankMessage = targetUser?.getAccountStatusString() || \"\";\n\t\tRooms.global.notifyRooms(\n\t\t\t['staff'],\n\t\t\t`|html|${roomMessage}` + Utils.html`<span class=\"username\">${targetUser?.name || targetID}</span> ${rankMessage} ${forceRenameMessage}`\n\t\t);\n\n\t\ttargetUser?.resetName(true);\n\t\treturn true;\n\t},\n\tforcerenamehelp: [\n\t\t`/forcerename OR /fr [username], [reason] - Forcibly change a user's name and shows them the [reason]. Requires: % @ ~`,\n\t\t`/allowname [username] - Unmarks a forcerenamed username, stopping staff from being notified when it is used. Requires % @ ~`,\n\t],\n\n\tnfr: 'noforcerename',\n\tnoforcerename: {\n\t\tadd(target, room, user) {\n\t\t\tconst [targetUsername, rest] = Utils.splitFirst(target, ',').map(f => f.trim());\n\t\t\tconst targetId = toID(targetUsername);\n\t\t\tif (!targetId) return this.parse('/help noforcerename');\n\t\t\tthis.checkCan('bypassall');\n\t\t\tif (!Punishments.whitelistName(targetId, user.name)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUsername} is already on the noforcerename list.`);\n\t\t\t}\n\t\t\tthis.addGlobalModAction(`${user.name} added the name ${targetId} to the no forcerename list.${rest ? ` (${rest})` : ''}`);\n\t\t\tthis.globalModlog('NOFORCERENAME', targetId, rest);\n\t\t},\n\t\tremove(target, room, user) {\n\t\t\tconst { targetUsername, rest } = this.splitUser(target);\n\t\t\tconst targetId = toID(targetUsername);\n\t\t\tif (!targetId) return this.parse('/help noforcerename');\n\t\t\tthis.checkCan('bypassall');\n\t\t\tif (!Punishments.namefilterwhitelist.has(targetId)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUsername} is not on the noforcerename list.`);\n\t\t\t}\n\t\t\tPunishments.unwhitelistName(targetId);\n\t\t\tthis.addGlobalModAction(`${user.name} removed ${targetId} from the no forcerename list.${rest ? ` (${rest})` : ''}`);\n\t\t\tthis.globalModlog('UNNOFORCERENAME', targetId, rest);\n\t\t},\n\t},\n\tnoforcerenamehelp: [\n\t\t`/noforcerename add OR /nfr add [username] - Adds [username] to the list of users who can't be forcerenamed by staff.`,\n\t\t`/noforcerename remove OR /nfr remove [username] - Removes [username] from the list of users who can't be forcerenamed by staff.`,\n\t],\n\n\tforceclearstatus(target, room, user) {\n\t\tconst { targetUser, rest: reason } = this.requireUser(target, { allowOffline: true });\n\t\tthis.checkCan('forcerename', targetUser);\n\n\t\tif (!targetUser.userMessage) throw new Chat.ErrorMessage(this.tr`${targetUser.name} does not have a status set.`);\n\n\t\tconst displayReason = reason ? `: ${reason}` : ``;\n\t\tthis.privateGlobalModAction(this.tr`${targetUser.name}'s status \"${targetUser.userMessage}\" was cleared by ${user.name}${displayReason}.`);\n\t\tthis.globalModlog('CLEARSTATUS', targetUser, ` from \"${targetUser.userMessage}\"${displayReason}`);\n\t\ttargetUser.clearStatus();\n\t\ttargetUser.popup(`${user.name} has cleared your status message for being inappropriate${displayReason || '.'}`);\n\t},\n\n\tnl: 'namelock',\n\tforcenamelock: 'namelock',\n\tweeknamelock: 'namelock',\n\twnl: 'namelock',\n\tfwnl: 'namelock',\n\tforceweeknamelock: 'namelock',\n\tasync namelock(target, room, user, connection, cmd) {\n\t\tif (!target) return this.parse('/help namelock');\n\t\tconst week = cmd.includes('w');\n\t\tconst force = cmd.includes('f');\n\n\t\tconst { targetUser, inputUsername, targetUsername, rest: reason } = this.splitUser(target);\n\t\tconst userid = toID(targetUsername);\n\n\t\tif (!targetUser && !force) {\n\t\t\tthrow new Chat.ErrorMessage(\n\t\t\t\t`User '${targetUsername}' not found. Use \\`\\`/force${week ? 'week' : ''}namelock\\`\\` if you need to namelock them anyway.`\n\t\t\t);\n\t\t}\n\t\tif (targetUser && targetUser.id !== toID(inputUsername) && !force) {\n\t\t\tthrow new Chat.ErrorMessage(`${inputUsername} has already changed their name to ${targetUser.name}. To namelock anyway, use /force${week ? 'week' : ''}namelock.`);\n\t\t}\n\t\tthis.checkCan('forcerename', userid);\n\t\tif (targetUser?.namelocked && !week) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' is already namelocked.`);\n\t\t}\n\t\tif (!force && !week) {\n\t\t\tconst existingPunishments = Punishments.search(userid);\n\t\t\tfor (const [,, punishment] of existingPunishments) {\n\t\t\t\tif (punishment.type === 'LOCK' && (punishment.expireTime - Date.now()) > (2 * DAY)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage([\n\t\t\t\t\t\t`User '${userid}' is already normally locked for more than 2 days.`,\n\t\t\t\t\t\t`Use /weeknamelock to namelock them instead, so you don't decrease the existing punishment.`,\n\t\t\t\t\t\t`If you really need to override this, use /forcenamelock.`,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst { privateReason, publicReason } = this.parseSpoiler(reason);\n\t\tconst reasonText = publicReason ? ` (${publicReason})` : `.`;\n\t\tthis.privateGlobalModAction(`${targetUser?.name || userid} was ${week ? 'week' : ''}namelocked by ${user.name}${reasonText}`);\n\t\tthis.globalModlog(`${force ? `FORCE` : ``}${week ? 'WEEK' : \"\"}NAMELOCK`, targetUser || userid, privateReason);\n\n\t\tconst roomauth = Rooms.global.destroyPersonalRooms(userid);\n\t\tif (roomauth.length) {\n\t\t\tMonitor.log(`[CrisisMonitor] Namelocked user ${userid} has public roomauth (${roomauth.join(', ')}), and should probably be demoted.`);\n\t\t}\n\t\tif (targetUser) {\n\t\t\tLadders.cancelSearches(targetUser);\n\t\t\ttargetUser.popup(`|modal|${user.name} has locked your name and you can't change names anymore${reasonText}`);\n\t\t}\n\t\tconst duration = week ? 7 * 24 * 60 * 60 * 1000 : 48 * 60 * 60 * 1000;\n\t\tawait Punishments.namelock(userid, Date.now() + duration, null, false, publicReason);\n\t\tif (targetUser) Chat.runHandlers('onPunishUser', 'NAMELOCK', targetUser, room);\n\t\t// Automatically upload replays as evidence/reference to the punishment\n\t\tif (room?.battle) this.parse('/savereplay forpunishment');\n\t\tMonitor.forceRenames.set(userid, false);\n\t\tif (connection.openPages) {\n\t\t\t// this hardcode is necessary because when /namelock and /uspage are send together in one button\n\t\t\t// the uspage output is sent before the user's name is reset\n\t\t\t// so it takes two clicks, which is bad behavior\n\t\t\tfor (const page of connection.openPages) {\n\t\t\t\tif (page.includes('usersearch-')) {\n\t\t\t\t\tthis.refreshPage(page);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\tnamelockhelp: [`/namelock OR /nl [user], [reason] - Name locks a [user] and shows the [reason]. Requires: % @ ~`],\n\n\tunl: 'unnamelock',\n\tunnamelock(target, room, user) {\n\t\tif (!target) return this.parse('/help unnamelock');\n\t\tthis.checkCan('forcerename');\n\n\t\tconst targetUser = Users.get(target);\n\t\tlet reason = '';\n\t\tif (targetUser?.namelocked) {\n\t\t\treason = ` (${targetUser.namelocked})`;\n\t\t}\n\n\t\tconst unlocked = Punishments.unnamelock(target);\n\n\t\tif (!unlocked) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${target}' is not namelocked.`);\n\t\t}\n\n\t\tthis.addGlobalModAction(`${unlocked} was unnamelocked by ${user.name}.${reason}`);\n\t\tthis.globalModlog(\"UNNAMELOCK\", toID(target));\n\t\tthis.parse(`/allowname ${toID(target)}`);\n\t\tif (targetUser) targetUser.popup(`${user.name} has unnamelocked you.`);\n\t},\n\tunnamelockhelp: [`/unnamelock [username] - Unnamelocks the user. Requires: % @ ~`],\n\n\thidetextalts: 'hidetext',\n\thidealttext: 'hidetext',\n\thidealtstext: 'hidetext',\n\thtext: 'hidetext',\n\tforcehidetext: 'hidetext',\n\thidelines: 'hidetext',\n\thlines: 'hidetext',\n\tcleartext: 'hidetext',\n\tctext: 'hidetext',\n\tclearaltstext: 'hidetext',\n\tclearlines: 'hidetext',\n\tforcecleartext: 'hidetext',\n\thidetext(target, room, user, connection, cmd) {\n\t\tif (!target) return this.parse(`/help hidetext`);\n\t\troom = this.requireRoom();\n\t\tconst hasLineCount = cmd.includes('lines');\n\t\tconst hideRevealButton = cmd.includes('clear') || cmd === 'ctext';\n\t\tlet { targetUser, inputUsername, targetUsername: name, rest: reason } = this.splitUser(target);\n\t\tlet lineCount = 0;\n\t\tif (/^[0-9]+\\s*(,|$)/.test(reason)) {\n\t\t\tif (hasLineCount) {\n\t\t\t\tlet lineCountString;\n\t\t\t\t[lineCountString, reason] = Utils.splitFirst(reason, ',').map(p => p.trim());\n\t\t\t\tlineCount = parseInt(lineCountString);\n\t\t\t} else if (!cmd.includes('force')) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Your reason was a number; use /hidelines if you wanted to clear a specific number of lines, or /forcehidetext if you really wanted your reason to be a number.`);\n\t\t\t}\n\t\t}\n\t\tconst showAlts = cmd.includes('alt');\n\t\tif (!lineCount && hasLineCount) {\n\t\t\tthrow new Chat.ErrorMessage(`You must specify a number of messages to clear. To clear all messages, use /hidetext.`);\n\t\t}\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\n\t\tif (!targetUser && !room.log.hasUsername(name)) {\n\t\t\tthrow new Chat.ErrorMessage(`User ${name} not found or has no roomlogs.`);\n\t\t}\n\t\tif (lineCount && showAlts) {\n\t\t\tthrow new Chat.ErrorMessage(`You can't specify a line count when using /hidealtstext.`);\n\t\t}\n\t\tconst userid = toID(inputUsername);\n\n\t\tthis.checkCan('mute', null, room);\n\n\t\t// if the user hiding their own text, it would clear the \"cleared\" message,\n\t\t// so we can't attribute it in that case\n\t\t// and sending the message after `|unlink|` puts the \"show lines\" button in the wrong place\n\t\tconst sender = user === targetUser ? null : user;\n\n\t\tlet message = '';\n\t\tif (targetUser && showAlts) {\n\t\t\tmessage = `${name}'s alts messages were cleared from ${room.title} by ${user.name}.${(reason ? ` (${reason})` : ``)}`;\n\t\t\troom.sendByUser(sender, message);\n\t\t\tthis.modlog('HIDEALTSTEXT', targetUser, reason, { noip: 1 });\n\t\t\troom.hideText([\n\t\t\t\tuserid,\n\t\t\t\t...targetUser.previousIDs,\n\t\t\t\t...targetUser.getAltUsers(true).map((curUser: User) => curUser.getLastId()),\n\t\t\t] as ID[]);\n\t\t} else {\n\t\t\tif (lineCount > 0) {\n\t\t\t\tmessage = `${lineCount} of ${name}'s messages were cleared from ${room.title} by ${user.name}.${(reason ? ` (${reason})` : ``)}`;\n\t\t\t\troom.sendByUser(sender, message);\n\t\t\t} else {\n\t\t\t\tmessage = `${name}'s messages were cleared from ${room.title} by ${user.name}.${(reason ? ` (${reason})` : ``)}`;\n\t\t\t\troom.sendByUser(sender, message);\n\t\t\t}\n\t\t\tthis.modlog('HIDETEXT', targetUser || userid, reason, { noip: 1, noalts: 1 });\n\t\t\troom.hideText([userid], lineCount, hideRevealButton);\n\t\t\tthis.roomlog(`|c|${user.getIdentity()}|/log ${message}`);\n\t\t}\n\t},\n\thidetexthelp: [\n\t\t`/hidetext [username], [optional reason] - Removes a user's messages from chat, with an optional reason. Requires: % @ # ~`,\n\t\t`/hidealtstext [username], [optional reason] - Removes a user's messages and their alternate accounts' messages from the chat, with an optional reason.  Requires: % @ # ~`,\n\t\t`/hidelines [username], [number], [optional reason] - Removes the [number] most recent messages from a user, with an optional reason. Requires: % @ # ~`,\n\t\t`Use /cleartext, /clearaltstext, and /clearlines to remove messages without displaying a button to reveal them.`,\n\t],\n\n\tab: 'blacklist',\n\tbl: 'blacklist',\n\tforceblacklist: 'blacklist',\n\tforcebl: 'blacklist',\n\tpermanentblacklist: 'blacklist',\n\tpermablacklist: 'blacklist',\n\tpermabl: 'blacklist',\n\tblacklist(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help blacklist');\n\t\tthis.checkChat();\n\t\tif (toID(target) === 'show') throw new Chat.ErrorMessage(`You're looking for /showbl`);\n\n\t\tconst { targetUser, targetUsername, rest: reason } = this.splitUser(target);\n\t\tif (!targetUser) {\n\t\t\tthrow new Chat.ErrorMessage([`User ${targetUsername} not found.`,\n\t\t\t\t`If you want to blacklist an offline account by name (not IP), consider /blacklistname`]);\n\t\t}\n\t\tthis.checkCan('editroom', targetUser, room);\n\t\tif (!room.persist) {\n\t\t\tthrow new Chat.ErrorMessage(`This room is not going to last long enough for a blacklist to matter - just ban the user`);\n\t\t}\n\t\tconst punishment = Punishments.isRoomBanned(targetUser, room.roomid);\n\t\tif (punishment && punishment.type === 'BLACKLIST') {\n\t\t\tthrow new Chat.ErrorMessage(`This user is already blacklisted from this room.`);\n\t\t}\n\t\tconst force = cmd === 'forceblacklist' || cmd === 'forcebl';\n\t\tif (targetUser.trusted) {\n\t\t\tif (!force) {\n\t\t\t\treturn this.sendReply(\n\t\t\t\t\t`${targetUser.name} is a trusted user. If you are sure you would like to blacklist them use /forceblacklist.`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (force) {\n\t\t\tthrow new Chat.ErrorMessage(`Use /blacklist; ${targetUser.name} is not a trusted user.`);\n\t\t}\n\t\tif (!reason && REQUIRE_REASONS) {\n\t\t\tthrow new Chat.ErrorMessage(`Blacklists require a reason.`);\n\t\t}\n\t\tif (reason.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tconst name = targetUser.getLastName();\n\t\tconst userid = targetUser.getLastId();\n\n\t\tif (targetUser.trusted && room.settings.isPrivate !== true) {\n\t\t\tMonitor.log(`[CrisisMonitor] Trusted user ${targetUser.name}${targetUser.trusted !== targetUser.id ? ` (${targetUser.trusted})` : ''} was blacklisted from ${room.roomid} by ${user.name}, and should probably be demoted.`);\n\t\t}\n\n\t\tif (targetUser.id in room.users || user.can('lock')) {\n\t\t\ttargetUser.popup(\n\t\t\t\t`|modal||html|<p>${Utils.escapeHTML(user.name)} has blacklisted you from the room ${room.roomid}${(room.subRooms ? ` and its subrooms` : '')}. Reason: ${Utils.escapeHTML(reason)}</p>` +\n\t\t\t\t`<p>To appeal the ban, PM the staff member that blacklisted you${room.persist ? ` or a room owner. </p><p><button name=\"send\" value=\"/roomauth ${room.roomid}\">List Room Staff</button></p>` : `.</p>`}`\n\t\t\t);\n\t\t}\n\n\t\tconst expireTime = cmd.includes('perma') ? Date.now() + (10 * 365 * 24 * 60 * 60 * 1000) : null;\n\t\tconst action = expireTime ? 'PERMABLACKLIST' : 'BLACKLIST';\n\n\t\tthis.privateModAction(\n\t\t\t`${name} was blacklisted from ${room.title} by ${user.name}${expireTime ? ' for ten years' : ''}.` +\n\t\t\t`${reason ? ` (${reason})` : ''}`\n\t\t);\n\n\t\tconst affected = Punishments.roomBlacklist(room, targetUser, expireTime, null, reason);\n\n\t\tfor (const u of affected) Chat.runHandlers('onPunishUser', 'BLACKLIST', u, room);\n\t\tif (!room.settings.isPrivate && room.persist) {\n\t\t\tconst acAccount = (targetUser.autoconfirmed !== userid && targetUser.autoconfirmed);\n\t\t\tlet displayMessage = '';\n\t\t\tif (affected.length > 1) {\n\t\t\t\tdisplayMessage = `${name}'s ${(acAccount ? ` ac account: ${acAccount},` : '')} blacklisted alts: ${affected.slice(1).map(curUser => curUser.getLastName()).join(\", \")}`;\n\t\t\t\tthis.privateModAction(displayMessage);\n\t\t\t} else if (acAccount) {\n\t\t\t\tdisplayMessage = `${name}'s ac account: ${acAccount}`;\n\t\t\t\tthis.privateModAction(displayMessage);\n\t\t\t}\n\t\t}\n\n\t\tif (!room.settings.isPrivate && room.persist) {\n\t\t\tthis.globalModlog(action, targetUser, reason);\n\t\t} else {\n\t\t\t// Room modlog only\n\t\t\tthis.modlog(action, targetUser, reason);\n\t\t}\n\t\treturn true;\n\t},\n\tblacklisthelp: [\n\t\t`/blacklist [username], [reason] - Blacklists the user from the room you are in for a year. Requires: # ~`,\n\t\t`/permablacklist OR /permabl - blacklist a user for 10 years. Requires: # ~`,\n\t\t`/unblacklist [username] - Unblacklists the user from the room you are in. Requires: # ~`,\n\t\t`/showblacklist OR /showbl - show a list of blacklisted users in the room. Requires: % @ # ~`,\n\t\t`/expiringblacklists OR /expiringbls - show a list of blacklisted users from the room whose blacklists are expiring in 3 months or less. Requires: % @ # ~`,\n\t],\n\n\tforcebattleban: 'battleban',\n\tasync battleban(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse(`/help battleban`);\n\n\t\tconst { targetUser, targetUsername, rest: reason } = this.splitUser(target);\n\t\tif (!targetUser) throw new Chat.ErrorMessage(`User ${targetUsername} not found.`);\n\t\tif (target.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\t\tif (!reason) {\n\t\t\tthrow new Chat.ErrorMessage(`Battle bans require a reason.`);\n\t\t}\n\t\tconst includesUrl = reason.includes(`.${Config.routes.root}/`); // lgtm [js/incomplete-url-substring-sanitization]\n\t\tif (!room.battle && !includesUrl && cmd !== 'forcebattleban') {\n\t\t\tthrow new Chat.ErrorMessage(`Battle bans require a battle replay if used outside of a battle; if the battle has expired, use /forcebattleban.`);\n\t\t}\n\t\tif (!user.can('rangeban', targetUser)) {\n\t\t\tthrow new Chat.ErrorMessage([\n\t\t\t\t`Battlebans have been deprecated. Alternatives:`,\n\t\t\t\t`- timerstalling and bragging about it: lock`,\n\t\t\t\t`- other timerstalling: they're not timerstalling, leave them alone`,\n\t\t\t\t`- bad nicknames: lock, locks prevent nicknames from appearing; you should always have been locking for this`,\n\t\t\t\t`- ladder cheating: gban, get a moderator if necessary`,\n\t\t\t\t`- serious ladder cheating: permaban, get an administrator`,\n\t\t\t\t`- other: get an administrator`,\n\t\t\t]);\n\t\t}\n\t\tif (Punishments.isBattleBanned(targetUser)) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' is already banned from battling.`);\n\t\t}\n\t\tthis.privateGlobalModAction(`${targetUser.name} was banned from starting new battles by ${user.name} (${reason})`);\n\n\t\tif (targetUser.trusted) {\n\t\t\tMonitor.log(`[CrisisMonitor] Trusted user ${targetUser.name} was banned from battling by ${user.name}, and should probably be demoted.`);\n\t\t}\n\n\t\tthis.globalModlog(\"BATTLEBAN\", targetUser, reason);\n\t\tLadders.cancelSearches(targetUser);\n\t\tawait Punishments.battleban(targetUser, null, null, reason);\n\t\ttargetUser.popup(`|modal|${user.name} has prevented you from starting new battles for 2 days (${reason})`);\n\n\t\t// Automatically upload replays as evidence/reference to the punishment\n\t\tif (room.battle) this.parse('/savereplay forpunishment');\n\t\treturn true;\n\t},\n\tbattlebanhelp: [\n\t\t`/battleban [username], [reason] - [DEPRECATED]`,\n\t\t`Prevents the user from starting new battles for 2 days and shows them the [reason]. Requires: ~`,\n\t],\n\n\tunbattleban(target, room, user) {\n\t\tif (!target) return this.parse('/help unbattleban');\n\t\tthis.checkCan('lock');\n\n\t\tconst targetUser = Users.get(target);\n\t\tconst unbanned = Punishments.unbattleban(target);\n\n\t\tif (unbanned) {\n\t\t\tthis.addModAction(`${unbanned} was allowed to battle again by ${user.name}.`);\n\t\t\tthis.globalModlog(\"UNBATTLEBAN\", toID(target));\n\t\t\tif (targetUser) targetUser.popup(`${user.name} has allowed you to battle again.`);\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`User ${target} is not banned from battling.`);\n\t\t}\n\t},\n\tunbattlebanhelp: [`/unbattleban [username] - [DEPRECATED] Allows a user to battle again. Requires: % @ ~`],\n\n\tmonthgroupchatban: 'groupchatban',\n\tmonthgcban: 'groupchatban',\n\tgcban: 'groupchatban',\n\tasync groupchatban(target, room, user, connection, cmd) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse(`/help groupchatban`);\n\t\tif (!user.can('rangeban')) {\n\t\t\tthrow new Chat.ErrorMessage([`/groupchatban has been deprecated.`,\n\t\t\t\t`For future groupchat misuse, lock the creator, it will take away their trusted status and their ability to make groupchats.`]);\n\t\t}\n\n\t\tconst { targetUser, targetUsername, rest: reason } = this.splitUser(target);\n\t\tif (!targetUser) throw new Chat.ErrorMessage(`User ${targetUsername} not found.`);\n\t\tif (target.length > MAX_REASON_LENGTH) {\n\t\t\tthrow new Chat.ErrorMessage(`The reason is too long. It cannot exceed ${MAX_REASON_LENGTH} characters.`);\n\t\t}\n\n\t\tconst isMonth = cmd.startsWith('month');\n\n\t\tif (!isMonth && Punishments.isGroupchatBanned(targetUser)) {\n\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' is already banned from using groupchats.`);\n\t\t}\n\n\t\tconst reasonText = reason ? `: ${reason}` : ``;\n\t\tthis.privateGlobalModAction(`${targetUser.name} was banned from using groupchats for a ${isMonth ? 'month' : 'week'} by ${user.name}${reasonText}.`);\n\n\t\tif (targetUser.trusted) {\n\t\t\tMonitor.log(`[CrisisMonitor] Trusted user ${targetUser.name} was banned from using groupchats by ${user.name}, and should probably be demoted.`);\n\t\t}\n\n\t\tconst createdGroupchats = await Punishments.groupchatBan(\n\t\t\ttargetUser, (isMonth ? Date.now() + 30 * DAY : null), null, reason\n\t\t);\n\t\ttargetUser.popup(`|modal|${user.name} has banned you from using groupchats for a ${isMonth ? 'month' : 'week'}${reasonText}`);\n\t\tthis.globalModlog(\"GROUPCHATBAN\", targetUser, ` by ${user.id}${reasonText}`);\n\n\t\tfor (const roomid of createdGroupchats) {\n\t\t\tconst targetRoom = Rooms.get(roomid);\n\t\t\tif (!targetRoom) continue;\n\t\t\tconst participants = targetRoom.warnParticipants?.(\n\t\t\t\t`This groupchat (${targetRoom.title}) has been deleted due to inappropriate conduct by its creator, ${targetUser.name}.` +\n\t\t\t\t` Do not attempt to recreate it, or you may be punished.${reason ? ` (reason: ${reason})` : ``}`\n\t\t\t);\n\n\t\t\tif (participants) {\n\t\t\t\tconst modlogEntry = {\n\t\t\t\t\taction: 'NOTE',\n\t\t\t\t\tloggedBy: user.id,\n\t\t\t\t\tisGlobal: true,\n\t\t\t\t\tnote: `participants in ${roomid} (creator: ${targetUser.id}): ${participants.join(', ')}`,\n\t\t\t\t};\n\t\t\t\ttargetRoom.modlog(modlogEntry);\n\t\t\t}\n\n\t\t\ttargetRoom.destroy();\n\t\t}\n\t},\n\tgroupchatbanhelp: [\n\t\t`/groupchatban [user], [optional reason]`,\n\t\t`/monthgroupchatban [user], [optional reason]`,\n\t\t`Bans the user from joining or creating groupchats for a week (or month). Requires: % @ ~`,\n\t],\n\n\tungcban: 'ungroupchatban',\n\tgcunban: 'ungroupchatban',\n\tgroucphatunban: 'ungroupchatban',\n\tungroupchatban(target, room, user) {\n\t\tif (!target) return this.parse('/help ungroupchatban');\n\t\tthis.checkCan('lock');\n\n\t\tconst targetUser = Users.get(target);\n\t\tconst unbanned = Punishments.groupchatUnban(targetUser || toID(target));\n\n\t\tif (unbanned) {\n\t\t\tthis.addGlobalModAction(`${unbanned} was ungroupchatbanned by ${user.name}.`);\n\t\t\tthis.globalModlog(\"UNGROUPCHATBAN\", toID(target), ` by ${user.id}`);\n\t\t\tif (targetUser) targetUser.popup(`${user.name} has allowed you to use groupchats again.`);\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`User ${target} is not banned from using groupchats.`);\n\t\t}\n\t},\n\tungroupchatbanhelp: [`/ungroupchatban [user] - Allows a groupchatbanned user to use groupchats again. Requires: % @ ~`],\n\n\tnameblacklist: 'blacklistname',\n\tpermablacklistname: 'blacklistname',\n\tblacklistname(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help blacklistname');\n\t\tthis.checkChat();\n\t\tthis.checkCan('editroom', null, room);\n\t\tif (!room.persist) {\n\t\t\tthrow new Chat.ErrorMessage(\"This room is not going to last long enough for a blacklist to matter - just ban the user\");\n\t\t}\n\n\t\tconst [targetStr, reason] = target.split('|').map(val => val.trim());\n\t\tif (!targetStr || (!reason && REQUIRE_REASONS)) {\n\t\t\tthrow new Chat.ErrorMessage(\"Usage: /blacklistname name1, name2, ... | reason\");\n\t\t}\n\n\t\tconst targets = targetStr.split(',').map(s => toID(s));\n\n\t\tconst duplicates = targets.filter(userid => (\n\t\t\t// can be asserted, room should always exist\n\t\t\tPunishments.roomUserids.nestedGetByType(room.roomid, userid, 'BLACKLIST')\n\t\t));\n\t\tif (duplicates.length) {\n\t\t\tthrow new Chat.ErrorMessage(`[${duplicates.join(', ')}] ${Chat.plural(duplicates, \"are\", \"is\")} already blacklisted.`);\n\t\t}\n\t\tconst expireTime = this.cmd.includes('perma') ? Date.now() + (10 * 365 * 24 * 60 * 60 * 1000) : null;\n\t\tconst action = expireTime ? 'PERMANAMEBLACKLIST' : 'NAMEBLACKLIST';\n\n\t\tfor (const userid of targets) {\n\t\t\tif (!userid) throw new Chat.ErrorMessage(`User '${userid}' is not a valid userid.`);\n\t\t\tif (!Users.Auth.hasPermission(user, 'ban', room.auth.get(userid), room)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`/blacklistname - Access denied: ${userid} is of equal or higher authority than you.`);\n\t\t\t}\n\n\t\t\tPunishments.roomBlacklist(room, userid, expireTime, null, reason);\n\n\t\t\tconst trusted = Users.isTrusted(userid);\n\t\t\tif (trusted && room.settings.isPrivate !== true) {\n\t\t\t\tMonitor.log(`[CrisisMonitor] Trusted user ${userid}${(trusted !== userid ? ` (${trusted})` : ``)} was nameblacklisted from ${room.roomid} by ${user.name}, and should probably be demoted.`);\n\t\t\t}\n\t\t\tif (!room.settings.isPrivate && room.persist) {\n\t\t\t\tthis.globalModlog(action, userid, reason);\n\t\t\t}\n\t\t}\n\n\t\tthis.privateModAction(\n\t\t\t`${targets.join(', ')}${Chat.plural(targets, \" were\", \" was\")} nameblacklisted from ${room.title} by ${user.name}` +\n\t\t\t`${expireTime ? ' for ten years' : ''}.`\n\t\t);\n\t\treturn true;\n\t},\n\tblacklistnamehelp: [\n\t\t`/blacklistname OR /nameblacklist [name1, name2, etc.] | reason - Blacklists all name(s) from the room you are in for a year. Requires: # ~`,\n\t\t`/permablacklistname [name1, name2, etc.] | reason - Blacklists all name(s) from the room you are in for 10 years. Requires: # ~`,\n\t],\n\n\tunab: 'unblacklist',\n\tunblacklist(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tif (!target) return this.parse('/help unblacklist');\n\t\tthis.checkCan('editroom', null, room);\n\n\t\tconst name = Punishments.roomUnblacklist(room, target);\n\n\t\tif (name) {\n\t\t\tthis.privateModAction(`${name} was unblacklisted by ${user.name}.`);\n\t\t\tif (!room.settings.isPrivate && room.persist) {\n\t\t\t\tthis.globalModlog(\"UNBLACKLIST\", name);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Chat.ErrorMessage(`User '${target}' is not blacklisted.`);\n\t\t}\n\t},\n\tunblacklisthelp: [`/unblacklist [username] - Unblacklists the user from the room you are in. Requires: # ~`],\n\n\tunblacklistall(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tthis.checkCan('editroom', null, room);\n\n\t\tif (!target) {\n\t\t\tuser.lastCommand = '/unblacklistall';\n\t\t\tthrow new Chat.ErrorMessage([\"THIS WILL UNBLACKLIST ALL BLACKLISTED USERS IN THIS ROOM.\",\n\t\t\t\t\"To confirm, use: /unblacklistall confirm\"]);\n\t\t}\n\t\tif (user.lastCommand !== '/unblacklistall' || target !== 'confirm') {\n\t\t\treturn this.parse('/help unblacklistall');\n\t\t}\n\t\tuser.lastCommand = '';\n\t\tconst unblacklisted = Punishments.roomUnblacklistAll(room);\n\t\tif (!unblacklisted) throw new Chat.ErrorMessage(\"No users are currently blacklisted in this room to unblacklist.\");\n\t\tthis.addModAction(`All blacklists in this room have been lifted by ${user.name}.`);\n\t\tthis.modlog('UNBLACKLISTALL');\n\t\tthis.roomlog(`Unblacklisted users: ${unblacklisted.join(', ')}`);\n\t},\n\tunblacklistallhelp: [`/unblacklistall - Unblacklists all blacklisted users in the current room. Requires: # ~`],\n\n\texpiringbls: 'showblacklist',\n\texpiringblacklists: 'showblacklist',\n\tblacklists: 'showblacklist',\n\tshowbl: 'showblacklist',\n\tshowblacklist(target, room, user, connection, cmd) {\n\t\tif (target) room = Rooms.search(target)!;\n\t\tif (!room) throw new Chat.ErrorMessage(`The room \"${target}\" was not found.`);\n\t\tthis.checkCan('mute', null, room);\n\t\tconst SOON_EXPIRING_TIME = 3 * 30 * 24 * 60 * 60 * 1000; // 3 months\n\n\t\tif (!room.persist) throw new Chat.ErrorMessage(\"This room does not support blacklists.\");\n\n\t\tconst roomUserids = Punishments.roomUserids.get(room.roomid);\n\t\tif (!roomUserids || roomUserids.size === 0) {\n\t\t\treturn this.sendReply(\"This room has no blacklisted users.\");\n\t\t}\n\t\tconst blMap = new Map<ID | PunishType, any[]>();\n\t\tlet ips = '';\n\n\t\tfor (const [userid, punishmentList] of roomUserids) {\n\t\t\tfor (const punishment of punishmentList) {\n\t\t\t\tconst { type, id, expireTime } = punishment;\n\t\t\t\tif (type === 'BLACKLIST') {\n\t\t\t\t\tif (!blMap.has(id)) blMap.set(id, [expireTime]);\n\t\t\t\t\tif (id !== userid) blMap.get(id)!.push(userid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (user.can('ip')) {\n\t\t\tconst roomIps = Punishments.roomIps.get(room.roomid);\n\n\t\t\tif (roomIps) {\n\t\t\t\tips = '/ips';\n\t\t\t\tfor (const [ip, punishments] of roomIps) {\n\t\t\t\t\tfor (const punishment of punishments) {\n\t\t\t\t\t\tconst { type, id } = punishment;\n\t\t\t\t\t\tif (type === 'BLACKLIST') {\n\t\t\t\t\t\t\tif (!blMap.has(id)) blMap.set(id, []);\n\t\t\t\t\t\t\tblMap.get(id)!.push(ip);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst soonExpiring = (cmd === 'expiringblacklists' || cmd === 'expiringbls');\n\t\tlet buf = Utils.html`Blacklist for ${room.title}${soonExpiring ? ` (expiring within 3 months)` : ''}:<br />`;\n\n\t\tfor (const [userid, data] of blMap) {\n\t\t\tconst [expireTime, ...alts] = data;\n\t\t\tif (soonExpiring && expireTime > Date.now() + SOON_EXPIRING_TIME) continue;\n\t\t\tconst expiresIn = new Date(expireTime).getTime() - Date.now();\n\t\t\tconst expiresDays = Math.round(expiresIn / 1000 / 60 / 60 / 24);\n\t\t\tbuf += `- <strong>${userid}</strong>, for ${Chat.count(expiresDays, \"days\")}`;\n\t\t\tif (alts.length) buf += `, alts${ips}: ${alts.join(', ')}`;\n\t\t\tbuf += `<br />`;\n\t\t}\n\n\t\tthis.sendReplyBox(buf);\n\t},\n\tshowblacklisthelp: [\n\t\t`/showblacklist OR /showbl - show a list of blacklisted users in the room. Requires: % @ # ~`,\n\t\t`/expiringblacklists OR /expiringbls - show a list of blacklisted users from the room whose blacklists are expiring in 3 months or less. Requires: % @ # ~`,\n\t],\n};\n"],
  "mappings": "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",
  "names": ["sectionid"]
}
