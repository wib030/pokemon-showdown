{
  "version": 3,
  "sources": ["../../../server/chat-plugins/username-prefixes.ts"],
  "sourcesContent": ["/**\n * Code to manage username prefixes that force battles to be public or disable modchat.\n * @author Annika\n */\n\nimport { FS } from '../../lib';\n\nconst PREFIXES_FILE = 'config/chat-plugins/username-prefixes.json';\nconst PREFIX_DURATION = 10 * 24 * 60 * 60 * 1000;\n\nexport class PrefixManager {\n\tconstructor() {\n\t\t// after a restart/newly using the plugin, load prefixes from config.js\n\t\tif (!Chat.oldPlugins['username-prefixes']) this.refreshConfig(true);\n\t}\n\n\tsave() {\n\t\tFS(PREFIXES_FILE).writeUpdate(() => JSON.stringify(Config.forcedprefixes || []));\n\t}\n\n\trefreshConfig(configJustLoaded = false) {\n\t\tif (!Config.forcedprefixes) Config.forcedprefixes = [];\n\t\t// ensure everything is in the right format\n\t\tif (!Array.isArray(Config.forcedprefixes)) {\n\t\t\tconst convertedPrefixes = [];\n\t\t\tfor (const type in Config.forcedprefixes) {\n\t\t\t\tfor (const prefix of Config.forcedprefixes[type].map(toID)) {\n\t\t\t\t\tconvertedPrefixes.push({ type, prefix, expireAt: Date.now() + PREFIX_DURATION });\n\t\t\t\t}\n\t\t\t}\n\t\t\tConfig.forcedprefixes = convertedPrefixes;\n\t\t}\n\t\tif (configJustLoaded) {\n\t\t\tfor (const entry of Config.forcedprefixes) {\n\t\t\t\tentry.prefix = toID(entry.prefix);\n\t\t\t}\n\t\t}\n\n\t\tlet data: AnyObject[];\n\t\ttry {\n\t\t\tdata = JSON.parse(FS(PREFIXES_FILE).readSync());\n\t\t} catch (e: any) {\n\t\t\tif (e.code !== 'ENOENT') throw e;\n\t\t\treturn;\n\t\t}\n\t\tif (data.length) {\n\t\t\tfor (const entry of data) {\n\t\t\t\tif (Config.forcedprefixes.includes(entry)) continue;\n\t\t\t\tConfig.forcedprefixes.push(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\taddPrefix(prefix: ID, type: 'privacy' | 'modchat') {\n\t\tif (!Config.forcedprefixes) Config.forcedprefixes = [];\n\t\tconst entry = Config.forcedprefixes.find((x: AnyObject) => x.prefix === prefix && x.type === type);\n\t\tif (entry) {\n\t\t\tthrow new Chat.ErrorMessage(`Username prefix '${prefix}' is already configured to force ${type}.`);\n\t\t}\n\n\t\tConfig.forcedprefixes.push({ type, prefix, expireAt: Date.now() + PREFIX_DURATION });\n\t\tthis.save();\n\t}\n\n\tremovePrefix(prefix: ID, type: 'privacy' | 'modchat') {\n\t\tconst entry = Config.forcedprefixes.findIndex((x: AnyObject) => x.prefix === prefix && x.type === type);\n\t\tif (entry < 0) {\n\t\t\tthrow new Chat.ErrorMessage(`Username prefix '${prefix}' is not configured to force ${type}!`);\n\t\t}\n\n\t\tConfig.forcedprefixes.splice(entry, 1);\n\t\tthis.save();\n\t}\n\n\tvalidateType(type: string) {\n\t\tif (type !== 'privacy' && type !== 'modchat') {\n\t\t\tthrow new Chat.ErrorMessage(`'${type}' is not a valid type of forced prefix. Valid types are 'privacy' and 'modchat'.`);\n\t\t}\n\t\treturn type;\n\t}\n}\n\nexport const prefixManager = new PrefixManager();\n\nexport const commands: Chat.ChatCommands = {\n\tforceprefix: 'usernameprefix',\n\tforcedprefix: 'usernameprefix',\n\tforcedprefixes: 'usernameprefix',\n\tusernameprefixes: 'usernameprefix',\n\tusernameprefix: {\n\t\thelp: '',\n\t\t''() {\n\t\t\tthis.parse(`/help forcedprefix`);\n\t\t},\n\n\t\tdelete: 'add',\n\t\tremove: 'add',\n\t\tadd(target, room, user, connection, cmd) {\n\t\t\tthis.checkCan('addhtml');\n\n\t\t\tconst isAdding = cmd.includes('add');\n\n\t\t\tconst [prefix, type] = target.split(',').map(toID);\n\t\t\tif (!prefix || !type) return this.parse(`/help usernameprefix`);\n\t\t\tif (prefix.length > 18) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Specified prefix '${prefix}' is longer than the maximum user ID length.`);\n\t\t\t}\n\n\t\t\tif (isAdding) {\n\t\t\t\tprefixManager.addPrefix(prefix, prefixManager.validateType(type));\n\t\t\t} else {\n\t\t\t\tprefixManager.removePrefix(prefix, prefixManager.validateType(type));\n\t\t\t}\n\n\t\t\tthis.globalModlog(`FORCEDPREFIX ${isAdding ? 'ADD' : 'REMOVE'}`, null, `'${prefix}' ${isAdding ? 'to' : 'from'} ${type}`);\n\t\t\tthis.addGlobalModAction(`${user.name} set the username prefix ${prefix} to${isAdding ? '' : ' no longer'} disable ${type}.`);\n\t\t},\n\n\t\tview(target) {\n\t\t\tthis.checkCan('addhtml');\n\n\t\t\tconst types = target ? [prefixManager.validateType(toID(target))] : ['privacy', 'modchat'];\n\n\t\t\tconst entries = Config.forcedprefixes.filter((x: any) => types.includes(x.type));\n\n\t\t\treturn this.sendReplyBox(types.map(type => {\n\t\t\t\tconst prefixes = entries.filter((x: any) => x.type === type).map((x: any) => x.prefix);\n\t\t\t\tconst info = prefixes.length ?\n\t\t\t\t\t`<code>${prefixes.join('</code>, <code>')}</code>` : `none`;\n\t\t\t\treturn `Username prefixes that disable <strong>${type}</strong>: ${info}.`;\n\t\t\t}).join(`<br />`));\n\t\t},\n\t},\n\tusernameprefixhelp() {\n\t\treturn this.sendReplyBox(\n\t\t\t`<code>/usernameprefix add [prefix], [type]</code>: Sets the username prefix [prefix] to disable privacy or modchat on battles where at least one player has the prefix.<br />` +\n\t\t\t`<code>/usernameprefix remove [prefix], [type]</code>: Removes a prefix configuration.<br />` +\n\t\t\t`<code>/usernameprefix view [optional type]</code>: Displays the currently configured username prefixes.<br />` +\n\t\t\t`Valid types are <code>privacy</code> (which forces battles to take place in public rooms) and <code>modchat</code> (which prevents players from setting moderated chat).<br />` +\n\t\t\t`Requires: * ~`\n\t\t);\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
