{
  "version": 3,
  "sources": ["../../../server/chat-plugins/sample-teams.ts"],
  "sourcesContent": ["/**\n * A sample teams plugin\n *\n * @author Kris\n */\n\nimport { FS, Utils } from \"../../lib\";\n\nconst SAMPLE_TEAMS = 'config/chat-plugins/sample-teams.json';\n\ninterface SampleTeamsData {\n\twhitelist: { [formatid: string]: RoomID[] };\n\t/** Teams are stored in the packed format */\n\tteams: {\n\t\t[formatid: string]: {\n\t\t\tuncategorized: { [k: string]: string },\n\t\t\t[category: string]: { [teamName: string]: string },\n\t\t},\n\t};\n}\n\nexport const teamData: SampleTeamsData = (() => {\n\ttry {\n\t\treturn JSON.parse(FS(SAMPLE_TEAMS).readIfExistsSync());\n\t} catch {\n\t\treturn {\n\t\t\twhitelist: {},\n\t\t\tteams: {},\n\t\t};\n\t}\n})();\n\nfunction save() {\n\tFS(SAMPLE_TEAMS).writeUpdate(() => JSON.stringify(teamData));\n}\n\nfor (const formatid in teamData.teams) {\n\tif (!teamData.teams[formatid].uncategorized) teamData.teams[formatid].uncategorized = {};\n}\nsave();\n\nexport const SampleTeams = new class SampleTeams {\n\tprivate isRoomStaff(user: User, roomids: RoomID[]) {\n\t\tlet matched = false;\n\t\tif (!roomids?.length) return false;\n\t\tfor (const roomid of roomids) {\n\t\t\tconst room = Rooms.search(roomid);\n\t\t\t// Malformed entry from botched room rename\n\t\t\tif (!room) continue;\n\t\t\tmatched = room.auth.isStaff(user.id);\n\t\t\tif (matched) break;\n\t\t}\n\t\treturn matched;\n\t}\n\n\tisDevMod(user: User) {\n\t\treturn !!Rooms.get('development')?.auth.atLeast(user, '@');\n\t}\n\n\tcheckPermissions(user: User, roomids: RoomID[]) {\n\t\t// Give Development room mods access to help fix crashes\n\t\treturn this.isRoomStaff(user, roomids) || user.can('bypassall') || this.isDevMod(user);\n\t}\n\n\twhitelistedRooms(formatid: string, names = false) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!teamData.whitelist[formatid]?.length) return null;\n\t\treturn Utils.sortBy(teamData.whitelist[formatid], x => {\n\t\t\tif (!names) return x;\n\t\t\tconst room = Rooms.search(x);\n\t\t\tif (!room) return x;\n\t\t\treturn room.title;\n\t\t});\n\t}\n\n\twhitelistRooms(formatids: string[], roomids: string[]) {\n\t\tfor (const unsanitizedFormatid of formatids) {\n\t\t\tconst formatid = this.sanitizeFormat(unsanitizedFormatid);\n\t\t\tif (!teamData.whitelist[formatid]) teamData.whitelist[formatid] = [];\n\t\t\tfor (const roomid of roomids) {\n\t\t\t\tconst targetRoom = Rooms.search(roomid);\n\t\t\t\tif (!targetRoom?.persist) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Room ${roomid} not found. Check spelling?`);\n\t\t\t\t}\n\t\t\t\tif (teamData.whitelist[formatid].includes(targetRoom.roomid)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Room ${targetRoom.title} is already added.`);\n\t\t\t\t}\n\t\t\t\tteamData.whitelist[formatid].push(targetRoom.roomid);\n\t\t\t\tsave();\n\t\t\t}\n\t\t}\n\t}\n\n\tunwhitelistRoom(formatid: string, roomid: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tconst targetRoom = Rooms.search(roomid);\n\t\tif (!targetRoom?.persist) throw new Chat.ErrorMessage(`Room ${roomid} not found. Check spelling?`);\n\t\tif (!teamData.whitelist[formatid]?.length) throw new Chat.ErrorMessage(`No rooms are whitelisted for ${formatid}.`);\n\t\tif (!teamData.whitelist[formatid].includes(targetRoom.roomid)) {\n\t\t\tthrow new Chat.ErrorMessage(`Room ${targetRoom.title} isn't whitelisted.`);\n\t\t}\n\t\tconst index = teamData.whitelist[formatid].indexOf(targetRoom.roomid);\n\t\tteamData.whitelist[formatid].splice(index, 1);\n\t\tif (!teamData.whitelist[formatid].length) delete teamData.whitelist[formatid];\n\t\tsave();\n\t}\n\n\tsanitizeFormat(formatid: string, checkExists = false) {\n\t\tconst format = Dex.formats.get(formatid);\n\t\tif (checkExists && format.effectType !== 'Format') {\n\t\t\tthrow new Chat.ErrorMessage(`Format \"${formatid.trim()}\" not found. Check spelling?`);\n\t\t}\n\t\tif (format.team) {\n\t\t\tthrow new Chat.ErrorMessage(`Formats with computer-generated teams can't have team storage.`);\n\t\t}\n\t\treturn format.id;\n\t}\n\n\tinitializeFormat(formatid: string) {\n\t\tif (!teamData.teams[formatid]) {\n\t\t\tteamData.teams[formatid] = { uncategorized: {} };\n\t\t\tsave();\n\t\t}\n\t}\n\n\taddCategory(user: User, formatid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tcategory = category.trim();\n\t\tthis.initializeFormat(formatid);\n\t\tif (this.findCategory(formatid, category)) {\n\t\t\tthrow new Chat.ErrorMessage(`The category named ${category} already exists.`);\n\t\t}\n\t\tteamData.teams[formatid][category] = {};\n\t\tsave();\n\t}\n\n\tremoveCategory(user: User, formatid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tconst categoryName = this.findCategory(formatid, category);\n\t\tif (!categoryName) {\n\t\t\tthrow new Chat.ErrorMessage(`There's no category named \"${category.trim()}\" for the format ${formatid}.`);\n\t\t}\n\t\tdelete teamData.teams[formatid][categoryName];\n\t\tsave();\n\t}\n\n\t/**\n\t * @param user\n\t * @param formatid\n\t * @param teamName\n\t * @param team - Can be a team in the packed, JSON, or exported format\n\t * @param category - Category the team will go in, defaults to uncategorized\n\t */\n\taddTeam(user: User, formatid: string, teamName: string, team: string, category = \"uncategorized\") {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]?.length) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tteamName = teamName.trim();\n\t\tcategory = category.trim();\n\t\tthis.initializeFormat(formatid);\n\t\tif (this.findTeamName(formatid, category, teamName)) {\n\t\t\tthrow new Chat.ErrorMessage(`There is already a team for ${formatid} with the name ${teamName} in the ${category} category.`);\n\t\t}\n\t\tif (!teamData.teams[formatid][category]) this.addCategory(user, formatid, category);\n\t\tteamData.teams[formatid][category][teamName] = Teams.pack(Teams.import(team.trim()));\n\t\tsave();\n\t\treturn teamData.teams[formatid][category][teamName];\n\t}\n\n\tremoveTeam(user: User, formatid: string, teamid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tcategory = category.trim();\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet required = `an administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trequired = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${required} to add teams for ${formatid}`);\n\t\t}\n\t\tconst categoryName = this.findCategory(formatid, category);\n\t\tif (!categoryName) {\n\t\t\tthrow new Chat.ErrorMessage(`There are no teams for ${formatid} under the category ${category.trim()}. Check spelling?`);\n\t\t}\n\t\tconst teamName = this.findTeamName(formatid, category, teamid);\n\t\tif (!teamName) {\n\t\t\tthrow new Chat.ErrorMessage(`There is no team for ${formatid} with the name of \"${teamid}\". Check spelling?`);\n\t\t}\n\t\tconst oldTeam = teamData.teams[formatid][categoryName][teamName];\n\t\tdelete teamData.teams[formatid][categoryName][teamName];\n\t\tif (!Object.keys(teamData.teams[formatid][categoryName]).length) delete teamData.teams[formatid][categoryName];\n\t\tif (!Object.keys(teamData.teams[formatid]).filter(x => x !== 'uncategorized').length) delete teamData.teams[formatid];\n\t\tsave();\n\t\treturn oldTeam;\n\t}\n\n\tformatTeam(teamName: string, teamStr: string, broadcasting = false) {\n\t\tconst team = Teams.unpack(teamStr);\n\t\tif (!team) return `Team is not correctly formatted. PM room staff to fix the formatting.`;\n\t\tlet buf = ``;\n\t\tif (!broadcasting) {\n\t\t\tbuf += `<center><strong style=\"letter-spacing:1.2pt\">${team.map(x => `<psicon pokemon=\"${x.species}\" />`).join('')}`;\n\t\t\tbuf += `<br />${Utils.escapeHTML(teamName.toUpperCase())}</strong></center>`;\n\t\t\tbuf += Chat.getReadmoreCodeBlock(Teams.export(team).trim());\n\t\t} else {\n\t\t\tbuf += `<details><summary>${team.map(x => `<psicon pokemon=\"${x.species}\" />`).join('')} &ndash; ${Utils.escapeHTML(teamName)}</summary>`;\n\t\t\tbuf += `<code style=\"white-space: pre-wrap; display: table; tab-size: 3\">${Teams.export(team).trim().replace(/\\n/g, '<br />')}</code></details>`;\n\t\t}\n\t\treturn buf;\n\t}\n\n\tmodlog(context: Chat.CommandContext, formatid: string, action: string, note: string, log: string) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tconst whitelistedRooms = this.whitelistedRooms(formatid);\n\t\tif (whitelistedRooms?.length) {\n\t\t\tfor (const roomid of whitelistedRooms) {\n\t\t\t\tconst room = Rooms.get(roomid);\n\t\t\t\tif (!room) continue;\n\t\t\t\tcontext.room = room;\n\t\t\t\tcontext.modlog(action, null, `${formatid}: ${note}`);\n\t\t\t\tcontext.privateModAction(log);\n\t\t\t}\n\t\t} else {\n\t\t\tcontext.room = Rooms.get('staff') || null;\n\t\t\tcontext.globalModlog(action, null, `${formatid}: ${note}`);\n\t\t\tcontext.privateGlobalModAction(log);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the category name of the provided category ID if there is one.\n\t */\n\tfindCategory(formatid: string, categoryid: string) {\n\t\tformatid = toID(formatid);\n\t\tcategoryid = toID(categoryid);\n\t\tlet match: string | null = null;\n\t\tfor (const categoryName in teamData.teams[formatid] || {}) {\n\t\t\tif (toID(categoryName) === categoryid) {\n\t\t\t\tmatch = categoryName;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tfindTeamName(formatid: string, categoryid: string, teamid: string) {\n\t\tconst categoryName = this.findCategory(formatid, categoryid);\n\t\tif (!categoryName) return null;\n\t\tlet match: string | null = null;\n\t\tfor (const teamName in teamData.teams[formatid][categoryName] || {}) {\n\t\t\tif (toID(teamName) === teamid) {\n\t\t\t\tmatch = teamName;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tgetFormatName(formatid: string) {\n\t\treturn Dex.formats.get(formatid).exists ? Dex.formats.get(formatid).name : formatid;\n\t}\n\n\tdestroy() {\n\t\tfor (const formatid in teamData.whitelist) {\n\t\t\tfor (const [i, roomid] of teamData.whitelist[formatid].entries()) {\n\t\t\t\tconst room = Rooms.search(roomid);\n\t\t\t\tif (room) continue;\n\t\t\t\tteamData.whitelist[formatid].splice(i, 1);\n\t\t\t\tif (!teamData.whitelist[formatid].length) delete teamData.whitelist[formatid];\n\t\t\t\tsave();\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const destroy = SampleTeams.destroy;\n\nexport const handlers: Chat.Handlers = {\n\tonRenameRoom(oldID, newID) {\n\t\tfor (const formatid in teamData.whitelist) {\n\t\t\tif (!SampleTeams.whitelistedRooms(formatid)?.includes(oldID)) continue;\n\t\t\tSampleTeams.unwhitelistRoom(formatid, oldID);\n\t\t\tSampleTeams.whitelistRooms([formatid], [newID]);\n\t\t}\n\t},\n};\n\nexport const commands: Chat.ChatCommands = {\n\tsampleteams(target, room, user) {\n\t\tthis.sendReply(`Sample Teams are being deprecated. Please do \\`\\`/tier [formatid]\\`\\` to view their resources.`);\n\t\tthis.sendReply(`If you are room staff for a room and would like to access old samples for your room's formats, please contact an admin.`);\n\t},\n\t/* sampleteams: {\n\t\t''(target, room, user) {\n\t\t\tthis.runBroadcast();\n\t\t\tlet [formatid, category] = target.split(',');\n\t\t\tif (!this.broadcasting) {\n\t\t\t\tif (!formatid) return this.parse(`/j view-sampleteams-view`);\n\t\t\t\tformatid = SampleTeams.sanitizeFormat(formatid);\n\t\t\t\tif (!category) return this.parse(`/j view-sampleteams-view-${formatid}`);\n\t\t\t\tconst categoryName = SampleTeams.findCategory(formatid, category);\n\t\t\t\treturn this.parse(`/j view-sampleteams-view-${formatid}${categoryName ? '-' + toID(categoryName) : ''}`);\n\t\t\t}\n\t\t\tif (!formatid) return this.parse(`/help sampleteams`);\n\t\t\tformatid = SampleTeams.sanitizeFormat(formatid);\n\t\t\tif (!teamData.teams[formatid]) {\n\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} found. Check spelling?`);\n\t\t\t}\n\t\t\tlet buf = ``;\n\t\t\tif (!category) {\n\t\t\t\tfor (const categoryName in teamData.teams[formatid]) {\n\t\t\t\t\tif (!Object.keys(teamData.teams[formatid][categoryName]).length) continue;\n\t\t\t\t\tif (buf) buf += `<hr />`;\n\t\t\t\t\tbuf += `<details${Object.keys(teamData.teams[formatid]).length < 2 ? ` open` : ``}><summary><strong style=\"letter-spacing:1.2pt\">${categoryName.toUpperCase()}</strong></summary>`;\n\t\t\t\t\tfor (const [i, teamName] of Object.keys(teamData.teams[formatid][categoryName]).entries()) {\n\t\t\t\t\t\tif (i) buf += `<hr />`;\n\t\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, teamData.teams[formatid][categoryName][teamName], true);\n\t\t\t\t\t}\n\t\t\t\t\tbuf += `</details>`;\n\t\t\t\t}\n\t\t\t\tif (!buf) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} found. Check spelling?`);\n\t\t\t\t} else {\n\t\t\t\t\tbuf = `<center><h3>Sample Teams for ${SampleTeams.getFormatName(formatid)}</h3></center><hr />${buf}`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst categoryName = SampleTeams.findCategory(formatid, category);\n\t\t\t\tif (!categoryName) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} in the ${category} category found. Check spelling?`);\n\t\t\t\t}\n\t\t\t\tfor (const teamName in teamData.teams[formatid][categoryName]) {\n\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, teamData.teams[formatid][categoryName][teamName], true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sendReplyBox(buf);\n\t\t},\n\t\taddcategory(target, room, user) {\n\t\t\tlet [formatid, categoryName] = target.split(',');\n\t\t\tif (!(formatid && categoryName)) return this.parse(`/help sampleteams`);\n\t\t\tif (!categoryName.trim()) categoryName = \"uncategorized\";\n\t\t\tSampleTeams.addCategory(user, formatid, categoryName.trim());\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'ADDTEAMCATEGORY', categoryName.trim(),\n\t\t\t\t`${user.name} added ${categoryName.trim()} as a category for ${formatid}.`\n\t\t\t);\n\t\t\tthis.sendReply(`Added ${categoryName.trim()} as a category for ${formatid}.`);\n\t\t},\n\t\tremovecategory(target, room, user) {\n\t\t\tconst [formatid, categoryName] = target.split(',');\n\t\t\tif (!(formatid && categoryName)) return this.parse(`/help sampleteams`);\n\t\t\tif (toID(categoryName) === 'uncategorized') {\n\t\t\t\tthrow new Chat.ErrorMessage(`The uncategorized category cannot be removed.`);\n\t\t\t}\n\t\t\tSampleTeams.removeCategory(user, formatid, categoryName);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'REMOVETEAMCATEGORY', categoryName.trim(),\n\t\t\t\t`${user.name} removed ${categoryName.trim()} as a category for ${formatid}.`\n\t\t\t);\n\t\t\tthis.sendReply(`Removed ${categoryName.trim()} as a category for ${formatid}.`);\n\t\t},\n\t\tadd(target, room, user) {\n\t\t\tconst [formatid, category, teamName, team] = target.split(',');\n\t\t\tif (!(formatid && category?.trim() && teamName && team)) return this.parse('/j view-sampleteams-add');\n\t\t\tconst packedTeam = SampleTeams.addTeam(user, formatid, teamName, team, category);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'ADDTEAM', `${category}: ${teamName}: ${packedTeam}`,\n\t\t\t\t`${user.name} added a team for ${formatid} in the ${category} category.`\n\t\t\t);\n\t\t\tthis.sendReply(`Added a team for ${formatid} in the ${category} category.`);\n\t\t},\n\t\tremove(target, room, user) {\n\t\t\tconst [formatid, category, teamName] = target.split(',').map(x => x.trim());\n\t\t\tif (!(formatid && category && teamName)) return this.parse(`/help sampleteams`);\n\t\t\tconst team = SampleTeams.removeTeam(user, formatid, toID(teamName), category);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'REMOVETEAM', `${category}: ${teamName}: ${team}`,\n\t\t\t\t`${user.name} removed a team from ${formatid} in the ${category} category.`\n\t\t\t);\n\t\t\tthis.sendReply(`Removed a team from ${formatid} in the ${category} category.`);\n\t\t},\n\t\twhitelist: {\n\t\t\tadd(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tconst [formatids, roomids] = target.split('|').map(x => x.split(','));\n\t\t\t\tif (!(formatids?.length && roomids?.length)) return this.parse(`/help sampleteams`);\n\t\t\t\tSampleTeams.whitelistRooms(formatids, roomids);\n\t\t\t\tthis.privateGlobalModAction(`${user.name} whitelisted ${Chat.toListString(roomids.map(x => Rooms.search(x)!.title))} to handle sample teams for ${Chat.toListString(formatids)}.`);\n\t\t\t\tthis.globalModlog(`SAMPLETEAMS WHITELIST`, null, roomids.join(', '));\n\t\t\t\tthis.sendReply(`Whitelisted ${Chat.toListString(roomids)} to handle sample teams for ${Chat.toListString(formatids)}.`);\n\t\t\t},\n\t\t\tremove(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tconst [formatid, roomid] = target.split(',');\n\t\t\t\tif (!(formatid && roomid)) return this.parse(`/help sampleteams`);\n\t\t\t\tSampleTeams.unwhitelistRoom(formatid, roomid);\n\t\t\t\tthis.refreshPage('sampleteams-whitelist');\n\t\t\t},\n\t\t\t'': 'view',\n\t\t\tview(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tthis.parse(`/j view-sampleteams-whitelist`);\n\t\t\t},\n\t\t},\n\t},\n\tsampleteamshelp: [\n\t\t`/sampleteams [format] - Lists the sample teams for [format], if there are any.`,\n\t\t`/sampleteams addcategory/removecategory [format], [category] - Adds/removes categories for [format].`,\n\t\t`/sampleteams add - Pulls up the interface to add sample teams. Requires: Room staff in dedicated tier room, ~`,\n\t\t`/sampleteams remove [format], [category], [team name] - Removes a sample team for [format] in [category].`,\n\t\t`/sampleteams whitelist add [formatid], [formatid] | [roomid], [roomid], ... - Whitelists room staff for the provided roomids to add sample teams. Requires: ~`,\n\t\t`/sampleteams whitelist remove [formatid], [roomid] - Unwhitelists room staff for the provided room to add sample teams. Requires: ~`,\n\t], */\n};\n"],
  "mappings": "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",
  "names": ["SampleTeams"]
}
