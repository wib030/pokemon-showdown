{
  "version": 3,
  "sources": ["../../../server/chat-plugins/mafia.ts"],
  "sourcesContent": ["import { Utils, FS } from '../../lib';\n\ninterface MafiaData {\n\t// keys for all of these are IDs\n\talignments: { [k: string]: MafiaDataAlignment };\n\troles: { [k: string]: MafiaDataRole };\n\tthemes: { [k: string]: MafiaDataTheme };\n\tIDEAs: { [k: string]: MafiaDataIDEA };\n\tterms: { [k: string]: MafiaDataTerm };\n\taliases: { [k: string]: ID };\n}\ninterface MafiaDataAlignment {\n\tname: string;\n\tplural: string;\n\tcolor?: string;\n\tbuttonColor?: string;\n\tmemo: string[];\n\timage?: string;\n}\ninterface MafiaDataRole {\n\tname: string;\n\tmemo: string[];\n\talignment?: string;\n\timage?: string;\n}\ninterface MafiaDataTheme {\n\tname: string;\n\tmemo?: undefined;\n\tdesc: string;\n\t// roles\n\t[players: number]: string;\n}\ninterface MafiaDataIDEA {\n\tname: string;\n\tmemo?: undefined;\n\troles: string[];\n\tpicks: string[];\n\tchoices: number;\n}\ninterface MafiaDataTerm {\n\tname: string;\n\tmemo: string[];\n}\n\ninterface MafiaLogTable {\n\t[date: string]: { [userid: string]: number };\n}\ntype MafiaLogSection = 'leaderboard' | 'mvps' | 'hosts' | 'plays' | 'leavers';\ntype MafiaLog = { [section in MafiaLogSection]: MafiaLogTable };\n\ninterface MafiaRole {\n\tname: string;\n\tsafeName: string;\n\tid: string;\n\tmemo: string[];\n\talignment: string;\n\timage: string;\n}\n\ninterface MafiaVote {\n\t// number of people on this vote\n\tcount: number;\n\t// number of votes, accounting for doublevoter etc\n\ttrueCount: number;\n\tlastVote: number;\n\tdir: 'up' | 'down';\n\tvoters: ID[];\n}\n\ninterface MafiaIDEAData {\n\tname: string;\n\t// do we trust the roles to parse properly\n\tuntrusted?: true;\n\troles: string[];\n\t// eg, GestI has 3 choices\n\tchoices: number;\n\t// eg, GestI has 2 things to pick, role and alignment\n\tpicks: string[];\n}\n\ninterface MafiaIDEAModule {\n\tdata: MafiaIDEAData | null;\n\ttimer: NodeJS.Timeout | null;\n\tdiscardsHidden: boolean;\n\tdiscardsHTML: string;\n\t// users that haven't picked a role yet\n\twaitingPick: string[];\n}\n\ninterface MafiaIDEAPlayerData {\n\tchoices: string[];\n\toriginalChoices: string[];\n\tpicks: { [choice: string]: string | null };\n}\n\n// The different possible ways for a player to be eliminated\nconst MafiaEliminateType = {\n\tELIMINATE: \"was eliminated\", // standard (vote + faction kill + anything else)\n\tKICK: \"was kicked from the game\", // staff kick\n\tTREESTUMP: \"was treestumped\", // can still talk\n\tSPIRIT: \"became a restless spirit\", // can still vote\n\tSPIRITSTUMP: \"became a restless treestump\", // treestump + spirit\n} as const;\ntype MafiaEliminateType = typeof MafiaEliminateType[keyof typeof MafiaEliminateType];\n\nconst DATA_FILE = 'config/chat-plugins/mafia-data.json';\nconst LOGS_FILE = 'config/chat-plugins/mafia-logs.json';\n\n// see: https://play.pokemonshowdown.com/fx/\nconst VALID_IMAGES = [\n\t'cop', 'dead', 'doctor', 'fool', 'godfather', 'goon', 'hooker', 'mafia', 'mayor', 'villager', 'werewolf',\n];\n\nlet MafiaData: MafiaData = Object.create(null);\nlet logs: MafiaLog = { leaderboard: {}, mvps: {}, hosts: {}, plays: {}, leavers: {} };\n\nPunishments.addRoomPunishmentType({\n\ttype: 'MAFIAGAMEBAN',\n\tdesc: 'banned from playing mafia games',\n});\nPunishments.addRoomPunishmentType({\n\ttype: 'MAFIAHOSTBAN',\n\tdesc: 'banned from hosting mafia games',\n});\n\nconst hostQueue: ID[] = [];\n\nconst IDEA_TIMER = 60 * 1000;\n\nconst MAX_ROLE_LENGTH = 1000;\n\nfunction readFile(path: string) {\n\ttry {\n\t\tconst json = FS(path).readIfExistsSync();\n\t\tif (!json) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Object.assign(Object.create(null), JSON.parse(json));\n\t} catch (e: any) {\n\t\tif (e.code !== 'ENOENT') throw e;\n\t}\n}\nfunction writeFile(path: string, data: AnyObject) {\n\tFS(path).writeUpdate(() => (\n\t\tJSON.stringify(data)\n\t));\n}\n\nfunction mafiaSearch(\n\tentries: [string, MafiaDataAlignment | MafiaDataRole | MafiaDataTheme | MafiaDataIDEA | MafiaDataTerm][],\n\tsearchTarget: string, searchType: keyof MafiaData\n) {\n\tif (typeof (entries) === 'undefined' || searchType === `aliases` || searchTarget.length === 0) return entries;\n\n\t// Handle negation\n\tconst negation = searchTarget.startsWith('!');\n\tif (negation) searchTarget = searchTarget.substring(1).trim();\n\n\tconst entriesCopy = entries.slice();\n\n\t// Check if the search term is an alias of something\n\tconst alias = toID((toID(searchTarget) in MafiaData[`aliases`]) ?\n\t\tMafiaData[`aliases`][toID(searchTarget)] : searchTarget);\n\n\tif (searchType === `themes` && searchTarget.includes(`players`) && searchTarget.includes(`pl`)) {\n\t\t// Search themes by playercount\n\t\tconst inequalities = ['<=', '>=', '=', '<', '>'];\n\t\tconst inequality = inequalities.find(x => searchTarget.includes(x));\n\t\tif (!inequality) return entries;\n\n\t\tconst players = Number(searchTarget.split(inequality)[1].trim());\n\t\tif (!!players && !isNaN(players)) {\n\t\t\tif (inequality === '=') {\n\t\t\t\t// Filter based on themes with the exact player count\n\t\t\t\tentries = entries.filter(([key]) => players in MafiaData[`themes`][key]);\n\t\t\t} else if (inequality === '<' || inequality === '<=') {\n\t\t\t\t// Filter based on themes less than / at most a certain amount of players\n\t\t\t\t// Creates an array of the potential playercounts, and then looks if any in the theme matches that\n\t\t\t\tentries = entries.filter(([key]) => ([...Array(players + (inequality === '<=' ? 1 : 0)).keys()])\n\t\t\t\t\t.some(playerCount => playerCount in (MafiaData[`themes`][key])));\n\t\t\t} else if (inequality === '>' || inequality === '>=') {\n\t\t\t\t// Filter based on themes greater than / at least a certain amount of players\n\t\t\t\t// Creates an array of the potential playercounts, and then looks if any in the theme matches that\n\t\t\t\tentries = entries.filter(([key]) => ([...Array(50 - Number(players)).keys()]\n\t\t\t\t\t.map(num => num + players + (inequality === '>=' ? 0 : 1)))\n\t\t\t\t\t.some(playerCount => playerCount in (MafiaData[`themes`][key])));\n\t\t\t}\n\t\t} else {\n\t\t\treturn entries;\n\t\t}\n\t} else if (searchType === `themes` && alias in MafiaData[`roles`]) {\n\t\t// Search themes that contain a role\n\t\t// Creates a list of all potential playercounts, then verifies if any of them contains the role that we seek\n\t\tentries = entries.filter(([key, data]) => ([...Array(50).keys()])\n\t\t\t.some(playerCount => playerCount in (MafiaData[`themes`][key]) &&\n\t\t\t\t(MafiaData[`themes`][key])[playerCount].toString().toLowerCase().includes(alias)));\n\t} else if (searchType === `IDEAs` && alias in MafiaData[`roles`]) {\n\t\t// Search IDEAs that contain a role\n\t\tentries = entries.filter(([key, data]) => MafiaData[`IDEAs`][key].roles.map(role =>\n\t\t\ttoID((toID(role) in MafiaData[`aliases`]) ? MafiaData[`aliases`][toID(role)] : role)).includes(alias));\n\t} else if (searchType === `roles` && alias in MafiaData[`themes`]) {\n\t\t// Search roles that appear in a theme\n\t\t// Filters entries based on whether the list of roles in the given theme contains it (or an alias of it)\n\t\tentries = entries.filter(([key, data]) => Object.keys(MafiaData[`themes`][alias])\n\t\t\t.filter((newKey: any) => toID((MafiaData[`themes`][alias])[newKey].toString()).includes(key)).length > 0);\n\t} else if (searchType === `roles` && alias in MafiaData[`IDEAs`]) {\n\t\t// Search roles that appear in an IDEA\n\t\t// Filters entries based on whether the list of roles in the given IDEA contains it (or an alias of it)\n\t\tentries = entries.filter(([key, data]) => MafiaData[`IDEAs`][alias].roles.map(role =>\n\t\t\ttoID((toID(role) in MafiaData[`aliases`]) ? MafiaData[`aliases`][toID(role)] : role)).includes(toID(key)));\n\t} else {\n\t\t// Any other search type matches just on whether it is included in the text\n\t\t// Filters entries based on whether it contains the given string anywhere\n\t\tentries = entries.filter(([key]) => Object.entries(MafiaData[searchType][key])\n\t\t\t.some(([newKey, value]) => value.toString().toLowerCase().includes(searchTarget)));\n\t}\n\t// Inverses the found results for negation\n\treturn negation ? entriesCopy.filter(element => !entries.includes(element)) : entries;\n}\n\n// data assumptions -\n// the alignments \"town\" and \"solo\" always exist (defaults)\n// <role>.alignment is always a valid key in data.alignments\n// roles and alignments have no common keys (looked up together in the role parser)\n// themes and IDEAs have no common keys (looked up together when setting themes)\n\n// Load data\nMafiaData = readFile(DATA_FILE) || { alignments: {}, roles: {}, themes: {}, IDEAs: {}, terms: {}, aliases: {} };\nif (!MafiaData.alignments.town) {\n\tMafiaData.alignments.town = {\n\t\tname: 'Town',\n\t\tplural: 'Town',\n\t\tmemo: [`This alignment is required for the script to function properly.`],\n\t};\n}\nif (!MafiaData.alignments.solo) {\n\tMafiaData.alignments.solo = {\n\t\tname: 'Solo',\n\t\tplural: 'Solo',\n\t\tmemo: [`This alignment is required for the script to function properly.`],\n\t};\n}\n\nlogs = readFile(LOGS_FILE) || { leaderboard: {}, mvps: {}, hosts: {}, plays: {}, leavers: {} };\n\nconst tables: MafiaLogSection[] = ['leaderboard', 'mvps', 'hosts', 'plays', 'leavers'];\nfor (const section of tables) {\n\t// Check to see if we need to eliminate an old month's data.\n\tconst month = new Date().toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\tif (!logs[section]) logs[section] = {};\n\tif (!logs[section][month]) logs[section][month] = {};\n\tif (Object.keys(logs[section]).length >= 3) {\n\t\t// eliminate the oldest month(s)\n\t\tconst keys = Utils.sortBy(Object.keys(logs[section]), key => {\n\t\t\tconst [monthStr, yearStr] = key.split('/');\n\t\t\treturn [parseInt(yearStr), parseInt(monthStr)];\n\t\t});\n\t\twhile (keys.length > 2) {\n\t\t\tconst curKey = keys.shift();\n\t\t\tif (!curKey) break; // should never happen\n\t\t\tdelete logs[section][curKey];\n\t\t}\n\t}\n}\nwriteFile(LOGS_FILE, logs);\n\nclass MafiaPlayer extends Rooms.RoomGamePlayer<Mafia> {\n\tsafeName: string;\n\trole: MafiaRole | null;\n\tvoting: ID;\n\t/** false - can't hammer (priest), true - can only hammer (actor) */\n\thammerRestriction: null | boolean;\n\tlastVote: number;\n\teliminated: MafiaEliminateType | null;\n\teliminationOrder: number;\n\tsilenced: boolean;\n\tnighttalk: boolean;\n\trevealed: string;\n\tIDEA: MafiaIDEAPlayerData | null;\n\t/** false - used an action, true - idled, null - no response */\n\taction: null | boolean | string;\n\tactionArr: string[];\n\tconstructor(user: User, game: Mafia) {\n\t\tsuper(user, game);\n\t\tthis.safeName = Utils.escapeHTML(this.name);\n\t\tthis.role = null;\n\t\tthis.voting = '';\n\t\tthis.hammerRestriction = null;\n\t\tthis.lastVote = 0;\n\t\tthis.eliminated = null;\n\t\tthis.eliminationOrder = 0;\n\t\tthis.silenced = false;\n\t\tthis.nighttalk = false;\n\t\tthis.revealed = '';\n\t\tthis.IDEA = null;\n\t\tthis.action = null;\n\t\tthis.actionArr = [];\n\t}\n\n\t/**\n\t * Called if the player's name changes.\n\t */\n\tupdateSafeName() {\n\t\tthis.safeName = Utils.escapeHTML(this.name);\n\t}\n\n\tgetStylizedRole(button = false) {\n\t\tif (!this.role) return;\n\t\tlet color = MafiaData.alignments[this.role.alignment].color;\n\t\tif (button && MafiaData.alignments[this.role.alignment].buttonColor) {\n\t\t\tcolor = MafiaData.alignments[this.role.alignment].buttonColor;\n\t\t}\n\t\treturn `<span style=\"font-weight:bold;color:${color}\">${this.role.safeName}</span>`;\n\t}\n\n\tisEliminated() {\n\t\treturn this.eliminated !== null;\n\t}\n\n\tisTreestump() {\n\t\treturn this.eliminated === MafiaEliminateType.TREESTUMP ||\n\t\t\tthis.eliminated === MafiaEliminateType.SPIRITSTUMP;\n\t}\n\n\tisSpirit() {\n\t\treturn this.eliminated === MafiaEliminateType.SPIRIT ||\n\t\t\tthis.eliminated === MafiaEliminateType.SPIRITSTUMP;\n\t}\n\n\t// Only call updateHtmlRoom if the player is still involved in the game in some way\n\ttryUpdateHtmlRoom() {\n\t\tif ([null, MafiaEliminateType.SPIRIT, MafiaEliminateType.TREESTUMP,\n\t\t\tMafiaEliminateType.SPIRITSTUMP].includes(this.eliminated as any)) {\n\t\t\tthis.updateHtmlRoom();\n\t\t}\n\t}\n\n\t/**\n\t * Updates the mafia HTML room for this player.\n\t * @param id Only provided during the destruction process to update the HTML one last time after player.id is cleared.\n\t */\n\tupdateHtmlRoom() {\n\t\tif (this.game.ended) return this.closeHtmlRoom();\n\t\tconst user = Users.get(this.id);\n\t\tif (!user?.connected) return;\n\t\tfor (const conn of user.connections) {\n\t\t\tvoid Chat.resolvePage(`view-mafia-${this.game.room.roomid}`, user, conn);\n\t\t}\n\t}\n\n\tcloseHtmlRoom() {\n\t\tconst user = Users.get(this.id);\n\t\tif (!user?.connected) return;\n\t\treturn user.send(`>view-mafia-${this.game.room.roomid}\\n|deinit`);\n\t}\n\n\tupdateHtmlVotes() {\n\t\tconst user = Users.get(this.id);\n\t\tif (!user?.connected) return;\n\t\tconst votes = this.game.voteBoxFor(this.id);\n\t\tuser.send(`>view-mafia-${this.game.room.roomid}\\n|selectorhtml|#mafia-votes|` + votes);\n\t}\n}\n\nclass Mafia extends Rooms.RoomGame<MafiaPlayer> {\n\toverride readonly gameid = 'mafia' as ID;\n\tstarted: boolean;\n\ttheme: MafiaDataTheme | null;\n\thostid: ID;\n\thost: string;\n\tcohostids: ID[];\n\tcohosts: string[];\n\n\tsubs: ID[];\n\tautoSub: boolean;\n\trequestedSub: ID[];\n\thostRequestedSub: ID[];\n\tplayed: ID[];\n\n\thammerCount: number;\n\tvotes: { [userid: string]: MafiaVote };\n\tvoteModifiers: { [userid: string]: number };\n\thammerModifiers: { [userid: string]: number };\n\thasPlurality: ID | null;\n\n\tenableNV: boolean;\n\tvoteLock: boolean;\n\tvotingEnabled: boolean;\n\tforceVote: boolean;\n\tclosedSetup: boolean;\n\tnoReveal: boolean;\n\tselfEnabled: boolean | 'hammer';\n\ttakeIdles: boolean;\n\n\toriginalRoles: MafiaRole[];\n\toriginalRoleString: string;\n\troles: MafiaRole[];\n\troleString: string;\n\n\tphase: 'signups' | 'locked' | 'IDEApicking' | 'IDEAlocked' | 'day' | 'night';\n\tdayNum: number;\n\n\toverride timer: NodeJS.Timeout | null;\n\tdlAt: number;\n\n\tIDEA: MafiaIDEAModule;\n\n\tconstructor(room: ChatRoom, host: User) {\n\t\tsuper(room);\n\n\t\tthis.title = 'Mafia';\n\t\tthis.playerCap = 20;\n\t\tthis.allowRenames = false;\n\t\tthis.started = false;\n\n\t\tthis.theme = null;\n\n\t\tthis.hostid = host.id;\n\t\tthis.host = Utils.escapeHTML(host.name);\n\n\t\tthis.cohostids = [];\n\t\tthis.cohosts = [];\n\n\t\tthis.subs = [];\n\t\tthis.autoSub = true;\n\t\tthis.requestedSub = [];\n\t\tthis.hostRequestedSub = [];\n\t\tthis.played = [];\n\n\t\tthis.hammerCount = 0;\n\t\tthis.votes = Object.create(null);\n\t\tthis.voteModifiers = Object.create(null);\n\t\tthis.hammerModifiers = Object.create(null);\n\t\tthis.hasPlurality = null;\n\n\t\tthis.enableNV = true;\n\t\tthis.voteLock = false;\n\t\tthis.votingEnabled = true;\n\t\tthis.forceVote = false;\n\t\tthis.closedSetup = false;\n\t\tthis.noReveal = true;\n\t\tthis.selfEnabled = false;\n\t\tthis.takeIdles = true;\n\n\t\tthis.originalRoles = [];\n\t\tthis.originalRoleString = '';\n\t\tthis.roles = [];\n\t\tthis.roleString = '';\n\n\t\tthis.phase = \"signups\";\n\t\tthis.dayNum = 0;\n\t\tthis.timer = null;\n\t\tthis.dlAt = 0;\n\n\t\tthis.IDEA = {\n\t\t\tdata: null,\n\t\t\ttimer: null,\n\t\t\tdiscardsHidden: false,\n\t\t\tdiscardsHTML: '',\n\t\t\twaitingPick: [],\n\t\t};\n\n\t\tthis.sendHTML(this.roomWindow());\n\t}\n\n\tjoin(user: User, staffAdd: User | null = null, force = false) {\n\t\tif (this.phase !== 'signups' && !staffAdd) {\n\t\t\treturn this.sendUser(user, `|error|The game of ${this.title} has already started.`);\n\t\t}\n\n\t\tthis.canJoin(user, !staffAdd, force);\n\t\tif (this.playerCount >= this.playerCap) return this.sendUser(user, `|error|The game of ${this.title} is full.`);\n\n\t\tconst player = this.addPlayer(user);\n\t\tif (!player) return this.sendUser(user, `|error|You have already joined the game of ${this.title}.`);\n\t\tif (this.started) {\n\t\t\tplayer.role = {\n\t\t\t\tname: `Unknown`,\n\t\t\t\tsafeName: `Unknown`,\n\t\t\t\tid: `unknown`,\n\t\t\t\talignment: 'solo',\n\t\t\t\timage: '',\n\t\t\t\tmemo: [`You were added to the game after it had started. To learn about your role, PM the host (${this.host}).`],\n\t\t\t};\n\t\t\tthis.roles.push(player.role);\n\t\t\tthis.played.push(player.id);\n\t\t} else {\n\t\t\t// TODO improve resetting roles\n\t\t\tthis.originalRoles = [];\n\t\t\tthis.originalRoleString = '';\n\t\t\tthis.roles = [];\n\t\t\tthis.roleString = '';\n\t\t}\n\n\t\tif (this.subs.includes(user.id)) this.subs.splice(this.subs.indexOf(user.id), 1);\n\t\tplayer.updateHtmlRoom();\n\t\tif (staffAdd) {\n\t\t\tthis.sendDeclare(`${player.name} has been added to the game by ${staffAdd.name}.`);\n\t\t\tthis.logAction(staffAdd, 'added player');\n\t\t} else {\n\t\t\tthis.sendRoom(`${player.name} has joined the game.`);\n\t\t}\n\t}\n\n\tleave(user: User) {\n\t\tconst player = this.getPlayer(user.id);\n\t\tif (!player) {\n\t\t\treturn this.sendUser(user, `|error|You have not joined the game of ${this.title}.`);\n\t\t}\n\t\tif (this.phase !== 'signups') return this.sendUser(user, `|error|The game of ${this.title} has already started.`);\n\t\tthis.removePlayer(player);\n\t\tlet subIndex = this.requestedSub.indexOf(user.id);\n\t\tif (subIndex !== -1) this.requestedSub.splice(subIndex, 1);\n\t\tsubIndex = this.hostRequestedSub.indexOf(user.id);\n\t\tif (subIndex !== -1) this.hostRequestedSub.splice(subIndex, 1);\n\t\tthis.sendRoom(`${user.name} has left the game.`);\n\t\tfor (const conn of user.connections) {\n\t\t\tvoid Chat.resolvePage(`view-mafia-${this.room.roomid}`, user, conn);\n\t\t}\n\t}\n\n\tstatic isGameBanned(room: Room, user: User) {\n\t\treturn Punishments.hasRoomPunishType(room, toID(user), 'MAFIAGAMEBAN');\n\t}\n\n\tstatic gameBan(room: Room, user: User | ID, reason: string, duration: number) {\n\t\tPunishments.roomPunish(room, user, {\n\t\t\ttype: 'MAFIAGAMEBAN',\n\t\t\tid: toID(user),\n\t\t\texpireTime: Date.now() + (duration * 24 * 60 * 60 * 1000),\n\t\t\treason,\n\t\t});\n\t}\n\n\tstatic ungameBan(room: Room, user: User) {\n\t\tPunishments.roomUnpunish(room, toID(user), 'MAFIAGAMEBAN', false);\n\t}\n\n\tstatic isHostBanned(room: Room, user: User) {\n\t\treturn Mafia.isGameBanned(room, user) || Punishments.hasRoomPunishType(room, toID(user), 'MAFIAHOSTBAN');\n\t}\n\n\tstatic hostBan(room: Room, user: User | ID, reason: string, duration: number) {\n\t\tPunishments.roomPunish(room, user, {\n\t\t\ttype: 'MAFIAHOSTBAN',\n\t\t\tid: toID(user),\n\t\t\texpireTime: Date.now() + (duration * 24 * 60 * 60 * 1000),\n\t\t\treason,\n\t\t});\n\t}\n\n\tstatic unhostBan(room: Room, user: User) {\n\t\tPunishments.roomUnpunish(room, toID(user), 'MAFIAHOSTBAN', false);\n\t}\n\n\tmakePlayer(user: User) {\n\t\treturn new MafiaPlayer(user, this);\n\t}\n\n\tgetPlayer(userid: ID) {\n\t\tconst matches = this.players.filter(p => p.id === userid);\n\t\tif (matches.length > 1) {\n\t\t\t// Should never happen\n\t\t\tthrow new Error(`Duplicate player IDs in Mafia game! Matches: ${matches.map(p => p.id).join(', ')}`);\n\t\t}\n\n\t\treturn matches.length > 0 ? matches[0] : null;\n\t}\n\n\tsetRoles(user: User, roleString: string, force = false, reset = false) {\n\t\tlet roles = roleString.split(',').map(x => x.trim());\n\n\t\tif (roles.length === 1) {\n\t\t\t// Attempt to set roles from a theme\n\t\t\tlet themeName: string = toID(roles[0]);\n\t\t\tif (themeName in MafiaData.aliases) themeName = MafiaData.aliases[themeName];\n\n\t\t\tif (themeName in MafiaData.themes) {\n\t\t\t\t// setting a proper theme\n\t\t\t\tconst theme = MafiaData.themes[themeName];\n\t\t\t\tif (!theme[this.playerCount]) {\n\t\t\t\t\treturn user.sendTo(\n\t\t\t\t\t\tthis.room,\n\t\t\t\t\t\t`|error|The theme \"${theme.name}\" does not have a role list for ${this.playerCount} players.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst themeRoles: string = theme[this.playerCount];\n\t\t\t\troles = themeRoles.split(',').map(x => x.trim());\n\t\t\t\tthis.theme = theme;\n\t\t\t} else if (themeName in MafiaData.IDEAs) {\n\t\t\t\t// setting an IDEA's rolelist as a theme, a la Great Idea\n\t\t\t\tconst IDEA = MafiaData.IDEAs[themeName];\n\t\t\t\troles = IDEA.roles;\n\t\t\t\tthis.theme = null;\n\t\t\t} else {\n\t\t\t\treturn this.sendUser(user, `|error|${roles[0]} is not a valid theme or IDEA.`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.theme = null;\n\t\t}\n\n\t\tif (Math.max(...roles.map(role => role.length)) > MAX_ROLE_LENGTH)\n\t\t\treturn this.sendUser(user, `|error|Some role exceeds the maximum role length of ${MAX_ROLE_LENGTH}.`);\n\n\t\tif (roles.length < this.playerCount) {\n\t\t\treturn this.sendUser(user, `|error|You have not provided enough roles for the players.`);\n\t\t} else if (roles.length > this.playerCount) {\n\t\t\tuser.sendTo(\n\t\t\t\tthis.room,\n\t\t\t\t`|error|You have provided too many roles, ${roles.length - this.playerCount} ${Chat.plural(roles.length - this.playerCount, 'roles', 'role')} will not be assigned.`\n\t\t\t);\n\t\t}\n\n\t\tif (force) {\n\t\t\tthis.originalRoles = roles.map(r => ({\n\t\t\t\tname: r,\n\t\t\t\tsafeName: Utils.escapeHTML(r),\n\t\t\t\tid: toID(r),\n\t\t\t\talignment: 'solo',\n\t\t\t\timage: '',\n\t\t\t\tmemo: [`To learn more about your role, PM the host (${this.host}).`],\n\t\t\t}));\n\t\t\tUtils.sortBy(this.originalRoles, role => role.name);\n\t\t\tthis.roles = this.originalRoles.slice();\n\t\t\tthis.originalRoleString = this.originalRoles.map(\n\t\t\t\tr => `<span style=\"font-weight:bold;color:${MafiaData.alignments[r.alignment].color || '#FFF'}\">${r.safeName}</span>`\n\t\t\t).join(', ');\n\t\t\tthis.roleString = this.originalRoleString;\n\t\t\tthis.sendRoom(`The roles have been ${reset ? 're' : ''}set.`);\n\t\t\tif (reset) this.distributeRoles();\n\t\t\treturn;\n\t\t}\n\n\t\tconst newRoles: MafiaRole[] = [];\n\t\tconst problems: string[] = [];\n\t\tconst alignments: string[] = [];\n\t\tconst cache: { [k: string]: MafiaRole } = Object.create(null);\n\t\tfor (const roleName of roles) {\n\t\t\tconst roleId = roleName.toLowerCase().replace(/[^\\w\\d\\s]/g, '');\n\t\t\tif (roleId in cache) {\n\t\t\t\tnewRoles.push({ ...cache[roleId] });\n\t\t\t} else {\n\t\t\t\tconst role = Mafia.parseRole(roleName);\n\t\t\t\tif (role.problems.length) {\n\t\t\t\t\tproblems.push(...role.problems);\n\t\t\t\t}\n\t\t\t\tif (!alignments.includes(role.role.alignment)) alignments.push(role.role.alignment);\n\t\t\t\tcache[roleId] = role.role;\n\t\t\t\tnewRoles.push(role.role);\n\t\t\t}\n\t\t}\n\t\tif (alignments.length < 2 && alignments[0] !== 'solo') {\n\t\t\tproblems.push(`There must be at least 2 different alignments in a game!`);\n\t\t}\n\t\tif (problems.length) {\n\t\t\tfor (const problem of problems) {\n\t\t\t\tthis.sendUser(user, `|error|${problem}`);\n\t\t\t}\n\t\t\treturn this.sendUser(user, `|error|To forcibly set the roles, use /mafia force${reset ? \"re\" : \"\"}setroles`);\n\t\t}\n\n\t\tthis.IDEA.data = null;\n\n\t\tthis.originalRoles = newRoles;\n\t\tUtils.sortBy(this.originalRoles, role => [role.alignment, role.name]);\n\t\tthis.roles = this.originalRoles.slice();\n\t\tthis.originalRoleString = this.originalRoles.map(\n\t\t\tr => `<span style=\"font-weight:bold;color:${MafiaData.alignments[r.alignment].color || '#FFF'}\">${r.safeName}</span>`\n\t\t).join(', ');\n\t\tthis.roleString = this.originalRoleString;\n\n\t\tif (!reset) this.phase = 'locked';\n\t\tthis.updatePlayers();\n\t\tthis.sendRoom(`The roles have been ${reset ? 're' : ''}set.`);\n\t\tif (reset) this.distributeRoles();\n\t}\n\n\tresetGame() {\n\t\tif (this.playerCount > this.originalRoles.length) {\n\t\t\tthrow new Chat.ErrorMessage(\"Please set at least as many roles as there are players to run this command.\");\n\t\t}\n\t\tthis.clearVotes();\n\t\tthis.dayNum = 0;\n\t\tthis.phase = 'night';\n\t\tfor (const hostid of [...this.cohostids, this.hostid]) {\n\t\t\tconst host = Users.get(hostid);\n\t\t\tif (host?.connected) {\n\t\t\t\tif (this.playerCount < this.originalRoles.length) {\n\t\t\t\t\tthis.sendUser(host, `More roles exist than players. Not all roles in the rolelist were distributed.`);\n\t\t\t\t}\n\t\t\t\thost.send(`>${this.room.roomid}\\n|notify|It's night in your game of Mafia!`);\n\t\t\t}\n\t\t}\n\t\tfor (const player of this.players) {\n\t\t\tconst user = Users.get(player.id);\n\t\t\tif (user?.connected) {\n\t\t\t\tthis.sendUser(user, `|notify|It's night in the game of Mafia! Send in an action or idle.`);\n\t\t\t}\n\n\t\t\tplayer.actionArr.length = 0; // Yes, this works. It empties the array.\n\t\t}\n\n\t\tif (this.timer) this.setDeadline(0);\n\t\tthis.distributeRoles();\n\t\tthis.sendDeclare(`The game has been reset.`);\n\t\tif (this.takeIdles) {\n\t\t\tthis.sendDeclare(`Night ${this.dayNum}. Submit whether you are using an action or idle. If you are using an action, DM your action to the host.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`Night ${this.dayNum}. PM the host your action, or idle.`);\n\t\t}\n\t}\n\n\tstatic parseRole(roleString: string) {\n\t\tconst roleName = roleString.replace(/solo/, '').trim();\n\n\t\tconst role = {\n\t\t\tname: roleName,\n\t\t\tsafeName: Utils.escapeHTML(roleName),\n\t\t\tid: toID(roleName),\n\t\t\timage: '',\n\t\t\tmemo: ['During the Day, you may vote for someone to be eliminated.'],\n\t\t\talignment: '',\n\t\t};\n\t\tconst problems: string[] = [];\n\n\t\t// if a role has a modifier with an alignment and a proper alignment,\n\t\t// the proper alignment overrides the modifier's alignment\n\t\tlet modAlignment = '';\n\n\t\tconst roleWords = roleString\n\t\t\t.replace(/\\(.+?\\)/g, '') // remove (notes within brackets)\n\t\t\t.split(' ')\n\t\t\t.map(toID);\n\n\t\touter: while (roleWords.length) {\n\t\t\tlet iters = 0;\n\t\t\tconst currentWord = roleWords.slice();\n\n\t\t\twhile (currentWord.length) {\n\t\t\t\tif (iters++ === 1000) throw new Error(`Infinite loop.`);\n\n\t\t\t\tlet currentSearch = currentWord.join('');\n\t\t\t\tif (currentSearch in MafiaData.aliases) currentSearch = MafiaData.aliases[currentSearch];\n\n\t\t\t\tif (currentSearch in MafiaData.roles) {\n\t\t\t\t\t// we found something with our current search, remove it from the main role and restart\n\t\t\t\t\tconst mod = MafiaData.roles[currentSearch];\n\n\t\t\t\t\tif (mod.memo) role.memo.push(...mod.memo);\n\t\t\t\t\tif (mod.alignment && !modAlignment) modAlignment = mod.alignment;\n\t\t\t\t\tif (mod.image && !role.image) role.image = mod.image;\n\n\t\t\t\t\troleWords.splice(0, currentWord.length);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t} else if (currentSearch in MafiaData.alignments) {\n\t\t\t\t\tif (role.alignment && role.alignment !== currentSearch) {\n\t\t\t\t\t\tproblems.push(`The role ${roleString} has multiple possible alignments (${role.alignment} and ${currentSearch})`);\n\t\t\t\t\t}\n\t\t\t\t\trole.alignment = currentSearch;\n\n\t\t\t\t\troleWords.splice(0, currentWord.length);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\n\t\t\t\t// we didnt find something, take the last word off our current search and continue\n\t\t\t\tcurrentWord.pop();\n\t\t\t}\n\t\t\t// no matches, take the first word off and continue\n\t\t\troleWords.shift();\n\t\t}\n\n\t\trole.alignment = role.alignment || modAlignment;\n\t\tif (!role.alignment) {\n\t\t\t// Default to town\n\t\t\trole.alignment = 'town';\n\t\t}\n\t\tif (problems.length) {\n\t\t\t// multiple possible alignment, default to solo\n\t\t\trole.alignment = 'solo';\n\t\t\trole.memo.push(`Your role has multiple conflicting alignments, ask the host for details.`);\n\t\t} else {\n\t\t\tconst alignment = MafiaData.alignments[role.alignment];\n\t\t\tif (alignment) {\n\t\t\t\trole.memo.push(...MafiaData.alignments[role.alignment].memo);\n\t\t\t\tif (alignment.image && !role.image) role.image = alignment.image;\n\t\t\t} else {\n\t\t\t\tproblems.push(`Alignment desync: role ${role.name}'s alignment ${role.alignment} doesn't exist in data. Please report this to a mod.`);\n\t\t\t}\n\t\t}\n\n\t\treturn { role, problems };\n\t}\n\n\tstart(user: User, day = false) {\n\t\tif (!user) return;\n\t\tif (this.phase !== 'locked' && this.phase !== 'IDEAlocked') {\n\t\t\tif (this.phase === 'signups') return this.sendUser(user, `You need to close the signups first.`);\n\t\t\tif (this.phase === 'IDEApicking') {\n\t\t\t\treturn this.sendUser(user, `You must wait for IDEA picks to finish before starting.`);\n\t\t\t}\n\t\t\treturn this.sendUser(user, `The game is already started!`);\n\t\t}\n\t\tif (this.playerCount < 2) return this.sendUser(user, `You need at least 2 players to start.`);\n\t\tif (this.phase === 'IDEAlocked') {\n\t\t\tfor (const p of this.players) {\n\t\t\t\tif (!p.role) return this.sendUser(user, `|error|Not all players have a role.`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!Object.keys(this.roles).length) return this.sendUser(user, `You need to set the roles before starting.`);\n\t\t\tif (Object.keys(this.roles).length < this.playerCount) {\n\t\t\t\treturn this.sendUser(user, `You have not provided enough roles for the players.`);\n\t\t\t}\n\t\t}\n\t\tthis.started = true;\n\t\tthis.sendDeclare(`The game of ${this.title} is starting!`);\n\t\t// Mafia#played gets set in distributeRoles\n\t\tthis.distributeRoles();\n\t\tif (day) {\n\t\t\tthis.day(null, true);\n\t\t} else {\n\t\t\tthis.night(false, true);\n\t\t}\n\t\tif (this.IDEA.data && !this.IDEA.discardsHidden) {\n\t\t\tthis.room.add(`|html|<div class=\"infobox\"><details><summary>IDEA discards:</summary>${this.IDEA.discardsHTML}</details></div>`).update();\n\t\t}\n\t}\n\n\tdistributeRoles() {\n\t\tconst roles = Utils.shuffle(this.originalRoles.slice());\n\t\tif (roles.length) {\n\t\t\tfor (const p of this.players) {\n\t\t\t\tconst role = roles.shift();\n\t\t\t\tif (!role) throw new Error(`Ran out of roles.`);\n\t\t\t\tp.role = role;\n\t\t\t\tconst u = Users.get(p.id);\n\t\t\t\tp.revealed = '';\n\t\t\t\tif (u?.connected) {\n\t\t\t\t\tu.send(`>${this.room.roomid}\\n|notify|Your role is ${role.safeName}. For more details of your role, check your Role PM.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.clearEliminations();\n\t\tthis.played = [this.hostid, ...this.cohostids, ...(this.players.map(p => p.id))];\n\t\tthis.sendDeclare(`The roles have been distributed.`);\n\t\tthis.updatePlayers();\n\t}\n\n\tgetPartners(alignment: string, player: MafiaPlayer) {\n\t\tif (!player?.role || ['town', 'solo', 'traitor'].includes(player.role.alignment)) return \"\";\n\t\tconst partners = [];\n\t\tfor (const p of this.players) {\n\t\t\tif (p.id === player.id) continue;\n\t\t\tconst role = p.role;\n\t\t\tif (role && role.alignment === player.role.alignment) partners.push(p.name);\n\t\t}\n\t\treturn partners.join(\", \");\n\t}\n\n\tday(extension: number | null = null, initial = false) {\n\t\tif (this.phase !== 'night' && !initial) return;\n\t\tif (this.dayNum === 0 && extension !== null) return this.sendUser(this.hostid, `|error|You cannot extend on day 0.`);\n\t\tif (this.timer) this.setDeadline(0);\n\t\tif (extension === null) {\n\t\t\tif (!isNaN(this.hammerCount)) this.hammerCount = Math.floor(this.getRemainingPlayers().length / 2) + 1;\n\t\t\tthis.clearVotes();\n\t\t}\n\t\tthis.phase = 'day';\n\t\tif (extension !== null && !initial) {\n\t\t\t// Day stays same\n\t\t\tthis.setDeadline(extension);\n\t\t} else {\n\t\t\tthis.dayNum++;\n\t\t}\n\t\tif (isNaN(this.hammerCount)) {\n\t\t\tthis.sendDeclare(`Day ${this.dayNum}. Hammering is disabled.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`Day ${this.dayNum}. The hammer count is set at ${this.hammerCount}`);\n\t\t}\n\t\tfor (const p of this.players) {\n\t\t\tp.action = null;\n\t\t}\n\t\tthis.sendPlayerList();\n\t\tthis.updatePlayers();\n\t}\n\n\tnight(early = false, initial = false) {\n\t\tif (this.phase !== 'day' && !initial) return;\n\t\tif (this.timer) this.setDeadline(0, true);\n\t\tthis.phase = 'night';\n\t\tfor (const hostid of [...this.cohostids, this.hostid]) {\n\t\t\tconst host = Users.get(hostid);\n\t\t\tif (host?.connected) host.send(`>${this.room.roomid}\\n|notify|It's night in your game of Mafia!`);\n\t\t}\n\n\t\tfor (const player of this.players) {\n\t\t\tconst user = Users.get(player.id);\n\t\t\tif (user?.connected) {\n\t\t\t\tthis.sendUser(user, `|notify|It's night in the game of Mafia! Send in an action or idle.`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.takeIdles) {\n\t\t\tthis.sendDeclare(`Night ${this.dayNum}. Submit whether you are using an action or idle. If you are using an action, DM your action to the host.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`Night ${this.dayNum}. PM the host your action, or idle.`);\n\t\t}\n\n\t\tconst hasPlurality = this.getPlurality();\n\n\t\tif (!early && hasPlurality) {\n\t\t\tthis.sendRoom(`Plurality is on ${this.getPlayer(hasPlurality)?.name || 'No Vote'}`);\n\t\t}\n\t\tif (!early && !initial) this.sendRoom(`|raw|<div class=\"infobox\">${this.voteBox()}</div>`);\n\t\tif (initial && !isNaN(this.hammerCount)) this.hammerCount = Math.floor(this.getRemainingPlayers().length / 2) + 1;\n\t\tthis.updatePlayers();\n\t}\n\n\tvote(voter: MafiaPlayer, targetId: ID) {\n\t\tif (!this.votingEnabled) return this.sendUser(voter, `|error|Voting is not allowed.`);\n\t\tif (this.phase !== 'day') return this.sendUser(voter, `|error|You can only vote during the day.`);\n\t\tif (!voter || (voter.isEliminated() && !voter.isSpirit())) return;\n\n\t\tconst target = this.getPlayer(targetId);\n\t\tif ((!target || target.isEliminated()) && targetId !== 'novote') {\n\t\t\treturn this.sendUser(voter, `|error|${targetId} is not a valid player.`);\n\t\t}\n\n\t\tif (!this.enableNV && targetId === 'novote') return this.sendUser(voter, `|error|No Vote is not allowed.`);\n\t\tif (targetId === voter.id && !this.selfEnabled) return this.sendUser(voter, `|error|Self voting is not allowed.`);\n\n\t\tif (this.voteLock && voter.voting) {\n\t\t\treturn this.sendUser(voter, `|error|You cannot switch your vote because votes are locked.`);\n\t\t}\n\n\t\tconst currentVotes = this.votes[targetId] ? this.votes[targetId].count : 0;\n\t\t// 1 is added to the existing count to represent the vote we are processing now\n\t\tconst hammering = currentVotes + 1 >= this.hammerCount;\n\t\tif (targetId === voter.id && !hammering && this.selfEnabled === 'hammer') {\n\t\t\treturn this.sendUser(voter, `|error|You may only vote yourself when placing the hammer vote.`);\n\t\t}\n\n\t\tif (voter.hammerRestriction !== null) {\n\t\t\tif (voter.hammerRestriction && !hammering) {\n\t\t\t\treturn this.sendUser(voter, `|error|You can only vote when placing the hammer vote.`);\n\t\t\t} else if (!voter.hammerRestriction && hammering) {\n\t\t\t\treturn this.sendUser(voter, `|error|You cannot place the hammer vote.`);\n\t\t\t}\n\t\t}\n\n\t\tif (voter.lastVote + 2000 >= Date.now()) {\n\t\t\treturn this.sendUser(\n\t\t\t\tvoter,\n\t\t\t\t`|error|You must wait another ${Chat.toDurationString((voter.lastVote + 2000) - Date.now()) || '1 second'} before you can change your vote.`\n\t\t\t);\n\t\t}\n\n\t\t// -- VALID --\n\n\t\tconst previousVote = voter.voting;\n\t\tif (previousVote) this.unvote(voter, true);\n\t\tlet vote = this.votes[targetId];\n\t\tif (!vote) {\n\t\t\tthis.votes[targetId] = {\n\t\t\t\tcount: 1, trueCount: this.getVoteValue(voter), lastVote: Date.now(), dir: 'up', voters: [voter.id],\n\t\t\t};\n\t\t\tvote = this.votes[targetId];\n\t\t} else {\n\t\t\tvote.count++;\n\t\t\tvote.trueCount += this.getVoteValue(voter);\n\t\t\tvote.lastVote = Date.now();\n\t\t\tvote.dir = 'up';\n\t\t\tvote.voters.push(voter.id);\n\t\t}\n\t\tvoter.voting = targetId;\n\t\tvoter.lastVote = Date.now();\n\n\t\tconst name = voter.voting === 'novote' ? 'No Vote' : target?.name;\n\t\tif (previousVote) {\n\t\t\tthis.sendTimestamp(`${voter.name} has shifted their vote from ${previousVote === 'novote' ? 'No Vote' : this.getPlayer(previousVote)?.name} to ${name}`);\n\t\t} else {\n\t\t\tthis.sendTimestamp(\n\t\t\t\tname === 'No Vote' ?\n\t\t\t\t\t`${voter.name} has abstained from voting.` :\n\t\t\t\t\t`${voter.name} has voted ${name}.`\n\t\t\t);\n\t\t}\n\n\t\tthis.hasPlurality = null;\n\t\tif (this.getHammerValue(targetId) <= vote.trueCount) {\n\t\t\t// HAMMER\n\t\t\tthis.sendDeclare(`Hammer! ${targetId === 'novote' ? 'Nobody' : Utils.escapeHTML(name!)} was voted out!`);\n\t\t\tthis.sendRoom(`|raw|<div class=\"infobox\">${this.voteBox()}</div>`);\n\t\t\tif (targetId !== 'novote') this.eliminate(target!, MafiaEliminateType.ELIMINATE);\n\t\t\tthis.night(true);\n\t\t\treturn;\n\t\t}\n\t\tthis.updatePlayersVotes();\n\t}\n\n\tunvote(voter: MafiaPlayer, force = false) {\n\t\t// Force skips (most) validation\n\t\tif (!force) {\n\t\t\tif (this.phase !== 'day') return this.sendUser(voter, `|error|You can only vote during the day.`);\n\n\t\t\tif (voter.isEliminated() && !voter.isSpirit()) {\n\t\t\t\treturn; // can't vote\n\t\t\t}\n\n\t\t\t// autoselfvote blocking doesn't apply to restless spirits\n\t\t\tif (!voter.isEliminated() && this.forceVote) {\n\t\t\t\treturn this.sendUser(voter, `|error|You can only shift your vote, not unvote.`);\n\t\t\t}\n\n\t\t\tif (this.voteLock && voter.voting) {\n\t\t\t\treturn this.sendUser(voter, `|error|You cannot unvote because votes are locked.`);\n\t\t\t}\n\n\t\t\tif (voter.lastVote + 2000 >= Date.now()) {\n\t\t\t\treturn this.sendUser(\n\t\t\t\t\tvoter,\n\t\t\t\t\t`|error|You must wait another ${Chat.toDurationString((voter.lastVote + 2000) - Date.now()) || '1 second'} before you can change your vote.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!voter.voting) return this.sendUser(voter, `|error|You are not voting for anyone.`);\n\n\t\tconst vote = this.votes[voter.voting];\n\t\tvote.count--;\n\t\tvote.trueCount -= this.getVoteValue(voter);\n\t\tif (vote.count <= 0) {\n\t\t\tdelete this.votes[voter.voting];\n\t\t} else {\n\t\t\tvote.lastVote = Date.now();\n\t\t\tvote.dir = 'down';\n\t\t\tvote.voters.splice(vote.voters.indexOf(voter.id), 1);\n\t\t}\n\n\t\tconst target = this.getPlayer(voter.voting);\n\t\tif (!target && voter.voting !== 'novote') {\n\t\t\tthrow new Error(`Unable to find target when unvoting. Voter: ${voter.id}, Target: ${voter.voting}`);\n\t\t}\n\n\t\tif (!force) {\n\t\t\tthis.sendTimestamp(\n\t\t\t\tvoter.voting === 'novote' ?\n\t\t\t\t\t`${voter.name} is no longer abstaining from voting.` :\n\t\t\t\t\t`${voter.name} has unvoted ${target?.name}.`\n\t\t\t);\n\t\t}\n\t\tvoter.voting = '';\n\t\tvoter.lastVote = Date.now();\n\t\tthis.hasPlurality = null;\n\t\tthis.updatePlayersVotes();\n\t}\n\n\t/**\n\t * Returns HTML code that contains information about the current vote.\n\t */\n\tvoteBox() {\n\t\tif (!this.started) return `<strong>The game has not started yet.</strong>`;\n\t\tlet buf = `<strong>Votes (Hammer: ${this.hammerCount || \"Disabled\"})</strong><br />`;\n\t\tconst plur = this.getPlurality();\n\t\tconst list = Utils.sortBy(Object.entries(this.votes), ([key, vote]) => [\n\t\t\tkey === plur,\n\t\t\t-vote.count,\n\t\t]);\n\t\tfor (const [key, vote] of list) {\n\t\t\tconst player = this.getPlayer(toID(key));\n\t\t\tbuf += `${vote.count}${plur === key ? '*' : ''} ${player?.safeName || 'No Vote'} (${vote.voters.map(a => this.getPlayer(a)?.safeName || a).join(', ')})<br />`;\n\t\t}\n\t\treturn buf;\n\t}\n\n\tvoteBoxFor(userid: ID) {\n\t\tlet buf = '';\n\t\tbuf += `<h3>Votes (Hammer: ${this.hammerCount || 'Disabled'}) <button class=\"button\" name=\"send\" value=\"/msgroom ${this.roomid},/mafia refreshvotes\"><i class=\"fa fa-refresh\"></i> Refresh</button></h3>`;\n\t\tconst plur = this.getPlurality();\n\t\tconst self = this.getPlayer(userid);\n\n\t\tfor (const key of this.getRemainingPlayers().map(p => p.id).concat((this.enableNV ? ['novote' as ID] : []))) {\n\t\t\tconst votes = this.votes[key];\n\t\t\tconst player = this.getPlayer(key);\n\t\t\tbuf += `<p style=\"font-weight:bold\">${votes?.count || 0}${plur === key ? '*' : ''} `;\n\t\t\tif (player) {\n\t\t\t\tbuf += `${player.safeName} ${player.revealed ? `[${player.revealed}]` : ''} `;\n\t\t\t} else {\n\t\t\t\tbuf += `No Vote `;\n\t\t\t}\n\n\t\t\tif (votes) {\n\t\t\t\tbuf += `(${votes.voters.map(v => this.getPlayer(v)?.safeName || v).join(', ')}) `;\n\t\t\t}\n\n\t\t\tif (userid === this.hostid || this.cohostids.includes(userid)) {\n\t\t\t\tif (votes && votes.count !== votes.trueCount) buf += `(${votes.trueCount})`;\n\t\t\t\tif (this.hammerModifiers[key]) buf += `(${this.getHammerValue(key)} to hammer)`;\n\t\t\t} else if (self && this.votingEnabled && (!this.voteLock || !self.voting) &&\n\t\t\t\t(!self.isEliminated() || self.isSpirit())) {\n\t\t\t\tlet cmd = '';\n\t\t\t\tif (self.voting === key) {\n\t\t\t\t\tcmd = 'unvote';\n\t\t\t\t} else if (self.id !== key || (this.selfEnabled && !self.isSpirit())) {\n\t\t\t\t\tcmd = `vote ${key}`;\n\t\t\t\t}\n\n\t\t\t\tif (cmd) {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${this.roomid},/mafia ${cmd}\">${cmd === 'unvote' ? 'Unvote' : 'Vote'} ${player?.safeName || 'No Vote'}</button>`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf += `</p>`;\n\t\t}\n\t\treturn buf;\n\t}\n\n\tapplyVoteModifier(requester: User, targetPlayer: MafiaPlayer, mod: number) {\n\t\tif (!targetPlayer) return this.sendUser(requester, `|error|${targetPlayer} is not in the game of mafia.`);\n\t\tconst oldMod = this.voteModifiers[targetPlayer.id];\n\t\tif (mod === oldMod || ((isNaN(mod) || mod === 1) && oldMod === undefined)) {\n\t\t\tif (isNaN(mod) || mod === 1) return this.sendUser(requester, `|error|${targetPlayer} already has no vote modifier.`);\n\t\t\treturn this.sendUser(requester, `|error|${targetPlayer} already has a vote modifier of ${mod}`);\n\t\t}\n\t\tconst newMod = isNaN(mod) ? 1 : mod;\n\t\tif (targetPlayer.voting) {\n\t\t\tthis.votes[targetPlayer.voting].trueCount += oldMod - newMod;\n\t\t\tif (this.getHammerValue(targetPlayer.voting) <= this.votes[targetPlayer.voting].trueCount) {\n\t\t\t\tthis.sendRoom(`${targetPlayer.voting} has been voted out due to a modifier change! They have not been eliminated.`);\n\t\t\t\tthis.night(true);\n\t\t\t}\n\t\t}\n\t\tif (newMod === 1) {\n\t\t\tdelete this.voteModifiers[targetPlayer.id];\n\t\t\treturn this.sendUser(requester, `${targetPlayer.name} has had their vote modifier removed.`);\n\t\t} else {\n\t\t\tthis.voteModifiers[targetPlayer.id] = newMod;\n\t\t\treturn this.sendUser(requester, `${targetPlayer.name} has been given a vote modifier of ${newMod}`);\n\t\t}\n\t}\n\n\tapplyHammerModifier(user: User, target: MafiaPlayer, mod: number) {\n\t\tconst oldMod = this.hammerModifiers[target.id];\n\t\tif (mod === oldMod || ((isNaN(mod) || mod === 0) && oldMod === undefined)) {\n\t\t\tif (isNaN(mod) || mod === 0) return this.sendUser(user, `|error|${target} already has no hammer modifier.`);\n\t\t\treturn this.sendUser(user, `|error|${target} already has a hammer modifier of ${mod}`);\n\t\t}\n\t\tconst newMod = isNaN(mod) ? 0 : mod;\n\t\tif (this.votes[target.id]) {\n\t\t\t// do this manually since we havent actually changed the value yet\n\t\t\tif (this.hammerCount + newMod <= this.votes[target.id].trueCount) {\n\t\t\t\t// make sure these strings are the same\n\t\t\t\tthis.sendRoom(`${target} has been voted due to a modifier change! They have not been eliminated.`);\n\t\t\t\tthis.night(true);\n\t\t\t}\n\t\t}\n\t\tif (newMod === 0) {\n\t\t\tdelete this.hammerModifiers[target.id];\n\t\t\treturn this.sendUser(user, `${target} has had their hammer modifier removed.`);\n\t\t} else {\n\t\t\tthis.hammerModifiers[target.id] = newMod;\n\t\t\treturn this.sendUser(user, `${target} has been given a hammer modifier of ${newMod}`);\n\t\t}\n\t}\n\n\tclearVoteModifiers(user: User) {\n\t\tfor (const player of this.players) {\n\t\t\tif (this.voteModifiers[player.id]) this.applyVoteModifier(user, player, 1);\n\t\t}\n\t}\n\n\tclearHammerModifiers(user: User) {\n\t\tfor (const player of this.players) {\n\t\t\tif (this.hammerModifiers[player.id]) this.applyHammerModifier(user, player, 0);\n\t\t}\n\t}\n\n\tgetVoteValue(player: MafiaPlayer) {\n\t\tconst mod = this.voteModifiers[player.id];\n\t\treturn (mod === undefined ? 1 : mod);\n\t}\n\n\tgetHammerValue(player: ID) {\n\t\tconst mod = this.hammerModifiers[player];\n\t\treturn (mod === undefined ? this.hammerCount : this.hammerCount + mod);\n\t}\n\n\tresetHammer() {\n\t\tthis.setHammer(Math.floor(this.players.length / 2) + 1);\n\t}\n\n\tsetHammer(count: number) {\n\t\tthis.hammerCount = count;\n\t\tif (isNaN(count)) {\n\t\t\tthis.sendDeclare(`Hammering has been disabled, and votes have been reset.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`The hammer count has been set at ${this.hammerCount}, and votes have been reset.`);\n\t\t}\n\t\tthis.clearVotes();\n\t}\n\n\tshiftHammer(count: number) {\n\t\tthis.hammerCount = count;\n\t\tif (isNaN(count)) {\n\t\t\tthis.sendDeclare(`Hammering has been disabled. Votes have not been reset.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`The hammer count has been shifted to ${this.hammerCount}. Votes have not been reset.`);\n\t\t}\n\t\tconst hammered = [];\n\t\tfor (const vote in this.votes) {\n\t\t\tif (this.votes[vote].trueCount >= this.getHammerValue(vote as ID)) {\n\t\t\t\thammered.push(vote === 'novote' ? 'Nobody' : vote);\n\t\t\t}\n\t\t}\n\t\tif (hammered.length) {\n\t\t\tthis.sendDeclare(`${Chat.count(hammered, \"players have\")} been hammered: ${hammered.join(', ')}. They have not been removed from the game.`);\n\t\t\tthis.night(true);\n\t\t}\n\t}\n\n\tgetPlurality() {\n\t\tif (this.hasPlurality) return this.hasPlurality;\n\t\tif (!Object.keys(this.votes).length) return null;\n\t\tlet max = 0;\n\t\tlet topVotes: [ID, MafiaVote][] = [];\n\t\tfor (const [key, vote] of Object.entries(this.votes)) {\n\t\t\tif (vote.count > max) {\n\t\t\t\tmax = vote.count;\n\t\t\t\ttopVotes = [[key as ID, vote]];\n\t\t\t} else if (vote.count === max) {\n\t\t\t\ttopVotes.push([key as ID, vote]);\n\t\t\t}\n\t\t}\n\t\tif (topVotes.length <= 1) {\n\t\t\t[this.hasPlurality] = topVotes[0];\n\t\t\treturn this.hasPlurality;\n\t\t}\n\t\ttopVotes = Utils.sortBy(topVotes, ([key, vote]) => [\n\t\t\tvote.dir === 'down',\n\t\t\tvote.dir === 'up' ? vote.lastVote : -vote.lastVote,\n\t\t]);\n\t\t[this.hasPlurality] = topVotes[0];\n\t\treturn this.hasPlurality;\n\t}\n\n\toverride removePlayer(player: MafiaPlayer) {\n\t\tplayer.closeHtmlRoom();\n\t\tconst result = super.removePlayer(player);\n\t\treturn result;\n\t}\n\n\teliminate(toEliminate: MafiaPlayer, ability: MafiaEliminateType) {\n\t\tif (!this.started) {\n\t\t\t// Game has not started, simply kick the player\n\t\t\tthis.sendDeclare(`${toEliminate.safeName} was kicked from the game!`);\n\t\t\tif (this.hostRequestedSub.includes(toEliminate.id)) {\n\t\t\t\tthis.hostRequestedSub.splice(this.hostRequestedSub.indexOf(toEliminate.id), 1);\n\t\t\t}\n\t\t\tif (this.requestedSub.includes(toEliminate.id)) {\n\t\t\t\tthis.requestedSub.splice(this.requestedSub.indexOf(toEliminate.id), 1);\n\t\t\t}\n\t\t\tthis.removePlayer(toEliminate);\n\t\t\treturn;\n\t\t}\n\n\t\ttoEliminate.eliminationOrder = this.getEliminatedPlayers() // Before eliminating, get other eliminated players\n\t\t\t.map(p => p.eliminationOrder) // convert to an array of elimination order numbers\n\t\t\t.reduce((a, b) => Math.max(a, b), 0) + 1; // get the largest of the existing elim order numbers and add 1\n\t\ttoEliminate.eliminated = ability;\n\n\t\tif (toEliminate.voting) this.unvote(toEliminate, true);\n\t\tthis.sendDeclare(`${toEliminate.safeName} ${ability}! ${!this.noReveal && ability === MafiaEliminateType.ELIMINATE ? `${toEliminate.safeName}'s role was ${toEliminate.getStylizedRole()}.` : ''}`);\n\t\tif (toEliminate.role && !this.noReveal && ability === MafiaEliminateType.ELIMINATE) {\n\t\t\ttoEliminate.revealed = toEliminate.getStylizedRole()!;\n\t\t}\n\n\t\tconst targetRole = toEliminate.role;\n\t\tif (targetRole) {\n\t\t\tfor (const [roleIndex, role] of this.roles.entries()) {\n\t\t\t\tif (role.id === targetRole.id) {\n\t\t\t\t\tthis.roles.splice(roleIndex, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.clearVotes(toEliminate.id);\n\t\tlet subIndex = this.requestedSub.indexOf(toEliminate.id);\n\t\tif (subIndex !== -1) this.requestedSub.splice(subIndex, 1);\n\t\tsubIndex = this.hostRequestedSub.indexOf(toEliminate.id);\n\t\tif (subIndex !== -1) this.hostRequestedSub.splice(subIndex, 1);\n\n\t\tthis.updateRoleString();\n\t\tif (ability === MafiaEliminateType.KICK) {\n\t\t\ttoEliminate.closeHtmlRoom();\n\t\t\tthis.removePlayer(toEliminate);\n\t\t}\n\t\tthis.updatePlayers();\n\t}\n\n\trevealRole(user: User, toReveal: MafiaPlayer, revealAs: string) {\n\t\tif (!this.started) {\n\t\t\treturn this.sendUser(user, `|error|You may only reveal roles once the game has started.`);\n\t\t}\n\t\tif (!toReveal.role) {\n\t\t\treturn this.sendUser(user, `|error|The user ${toReveal.id} is not assigned a role.`);\n\t\t}\n\t\ttoReveal.revealed = revealAs;\n\t\tthis.sendDeclare(`${toReveal.safeName}'s role ${toReveal.isEliminated() ? `was` : `is`} ${revealAs}.`);\n\t\tthis.updatePlayers();\n\t}\n\n\trevive(user: User, toRevive: MafiaPlayer) {\n\t\tif (this.phase === 'IDEApicking') {\n\t\t\treturn this.sendUser(user, `|error|You cannot add or remove players while IDEA roles are being picked.`);\n\t\t}\n\t\tif (!toRevive.isEliminated()) {\n\t\t\tthis.sendUser(user, `|error|The user ${toRevive} is already a living player.`);\n\t\t\treturn;\n\t\t}\n\n\t\ttoRevive.eliminated = null;\n\t\tthis.sendDeclare(`${toRevive.safeName} was revived!`);\n\t\tconst targetRole = toRevive.role;\n\t\tif (targetRole) {\n\t\t\tthis.roles.push(targetRole);\n\t\t} else {\n\t\t\t// Should never happen\n\t\t\ttoRevive.role = {\n\t\t\t\tname: `Unknown`,\n\t\t\t\tsafeName: `Unknown`,\n\t\t\t\tid: `unknown`,\n\t\t\t\talignment: 'solo',\n\t\t\t\timage: '',\n\t\t\t\tmemo: [\n\t\t\t\t\t`You were revived, but had no role. Please let a Mafia Room Owner know this happened. To learn about your role, PM the host (${this.host}).`,\n\t\t\t\t],\n\t\t\t};\n\t\t\tthis.roles.push(toRevive.role);\n\t\t}\n\t\tUtils.sortBy(this.roles, r => [r.alignment, r.name]);\n\n\t\tthis.updateRoleString();\n\t\tthis.updatePlayers();\n\t\treturn true;\n\t}\n\n\tgetRemainingPlayers() {\n\t\treturn this.players.filter(player => !player.isEliminated());\n\t}\n\n\tgetEliminatedPlayers() {\n\t\treturn this.players.filter(player => player.isEliminated()).sort((a, b) => a.eliminationOrder - b.eliminationOrder);\n\t}\n\n\tsetDeadline(minutes: number, silent = false) {\n\t\tif (isNaN(minutes)) return;\n\t\tif (!minutes) {\n\t\t\tif (!this.timer) return;\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.timer = null;\n\t\t\tthis.dlAt = 0;\n\t\t\tif (!silent) this.sendTimestamp(`**The deadline has been cleared.**`);\n\t\t\treturn;\n\t\t}\n\t\tif (minutes < 1 || minutes > 20) return;\n\t\tif (this.timer) clearTimeout(this.timer);\n\t\tthis.dlAt = Date.now() + (minutes * 60000);\n\t\tif (minutes > 3) {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendTimestamp(`**3 minutes left!**`);\n\t\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\t\tthis.sendTimestamp(`**1 minute left!**`);\n\t\t\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\t\t\tthis.sendTimestamp(`**Time is up!**`);\n\t\t\t\t\t\tthis.night();\n\t\t\t\t\t}, 60000);\n\t\t\t\t}, 2 * 60000);\n\t\t\t}, (minutes - 3) * 60000);\n\t\t} else if (minutes > 1) {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendTimestamp(`**1 minute left!**`);\n\t\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\t\tthis.sendTimestamp(`**Time is up!**`);\n\t\t\t\t\tif (this.phase === 'day') this.night();\n\t\t\t\t}, 60000);\n\t\t\t}, (minutes - 1) * 60000);\n\t\t} else {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendTimestamp(`**Time is up!**`);\n\t\t\t\tif (this.phase === 'day') this.night();\n\t\t\t}, minutes * 60000);\n\t\t}\n\t\tthis.sendTimestamp(`**The deadline has been set for ${minutes} minute${minutes === 1 ? '' : 's'}.**`);\n\t}\n\n\tsub(player: MafiaPlayer, newUser: User) {\n\t\tconst oldPlayerId = player.id;\n\t\tconst oldSafeName = player.safeName;\n\t\tthis.setPlayerUser(player, newUser);\n\t\tplayer.updateSafeName();\n\n\t\tif (player.voting) {\n\t\t\t// Dont change plurality\n\t\t\tconst vote = this.votes[player.voting];\n\t\t\tvote.voters.splice(vote.voters.indexOf(oldPlayerId), 1);\n\t\t\tvote.voters.push(player.id);\n\t\t}\n\t\t// Transfer votes on the old player to the new one\n\t\tif (this.votes[oldPlayerId]) {\n\t\t\tthis.votes[player.id] = this.votes[oldPlayerId];\n\t\t\tdelete this.votes[oldPlayerId];\n\n\t\t\tfor (const p of this.players) {\n\t\t\t\tif (p.voting === oldPlayerId) {\n\t\t\t\t\tp.voting = player.id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.hasPlurality === oldPlayerId) this.hasPlurality = player.id;\n\n\t\tif (newUser?.connected) {\n\t\t\tfor (const conn of newUser.connections) {\n\t\t\t\tvoid Chat.resolvePage(`view-mafia-${this.room.roomid}`, newUser, conn);\n\t\t\t}\n\t\t\tnewUser.send(`>${this.room.roomid}\\n|notify|You have been substituted in the mafia game for ${oldSafeName}.`);\n\t\t}\n\t\tif (this.started) this.played.push(player.id);\n\t\tthis.sendDeclare(`${oldSafeName} has been subbed out. ${player.safeName} has joined the game.`);\n\t\tthis.updatePlayers();\n\n\t\tif (this.room.roomid === 'mafia' && this.started) {\n\t\t\tconst month = new Date().toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\t\t\tif (!logs.leavers[month]) logs.leavers[month] = {};\n\t\t\tif (!logs.leavers[month][player.id]) logs.leavers[month][player.id] = 0;\n\t\t\tlogs.leavers[month][player.id]++;\n\t\t\twriteFile(LOGS_FILE, logs);\n\t\t}\n\t}\n\n\tnextSub(userid: ID | null = null) {\n\t\tif (!this.subs.length ||\n\t\t\t(!this.hostRequestedSub.length && ((!this.requestedSub.length || !this.autoSub)) && !userid)) {\n\t\t\treturn;\n\t\t}\n\t\tconst nextSub = this.subs.shift();\n\t\tif (!nextSub) return;\n\t\tconst sub = Users.get(nextSub, true);\n\t\tif (!sub?.connected || !sub.named || !this.room.users[sub.id]) return; // should never happen, just to be safe\n\t\tconst toSubOut = this.getPlayer(userid || this.hostRequestedSub.shift() || this.requestedSub.shift() || '');\n\t\tif (!toSubOut) {\n\t\t\t// Should never happen\n\t\t\tthis.subs.unshift(nextSub);\n\t\t\treturn;\n\t\t}\n\t\tif (this.hostRequestedSub.includes(toSubOut.id)) {\n\t\t\tthis.hostRequestedSub.splice(this.hostRequestedSub.indexOf(toSubOut.id), 1);\n\t\t}\n\t\tif (this.requestedSub.includes(toSubOut.id)) {\n\t\t\tthis.requestedSub.splice(this.requestedSub.indexOf(toSubOut.id), 1);\n\t\t}\n\t\tthis.sub(toSubOut, sub);\n\t}\n\n\tcustomIdeaInit(user: User, choices: number, picks: string[], rolesString: string) {\n\t\tthis.originalRoles = [];\n\t\tthis.originalRoleString = '';\n\t\tthis.roles = [];\n\t\tthis.roleString = '';\n\n\t\tconst roles = Utils.stripHTML(rolesString);\n\t\tlet roleList = roles.split('\\n');\n\t\tif (roleList.length === 1) {\n\t\t\troleList = roles.split(',').map(r => r.trim());\n\t\t}\n\n\t\tthis.IDEA.data = {\n\t\t\tname: `${this.host}'s custom IDEA`, // already escaped\n\t\t\tuntrusted: true,\n\t\t\troles: roleList,\n\t\t\tpicks,\n\t\t\tchoices,\n\t\t};\n\t\treturn this.ideaDistributeRoles(user);\n\t}\n\tideaInit(user: User, moduleID: ID) {\n\t\tthis.originalRoles = [];\n\t\tthis.originalRoleString = '';\n\t\tthis.roles = [];\n\t\tthis.roleString = '';\n\n\t\tif (moduleID in MafiaData.aliases) moduleID = MafiaData.aliases[moduleID];\n\t\tthis.IDEA.data = MafiaData.IDEAs[moduleID];\n\t\tif (!this.IDEA.data) return this.sendUser(user, `|error|${moduleID} is not a valid IDEA.`);\n\t\treturn this.ideaDistributeRoles(user);\n\t}\n\n\tideaDistributeRoles(user: User) {\n\t\tif (!this.IDEA.data) return this.sendUser(user, `|error|No IDEA module loaded`);\n\t\tif (this.phase !== 'locked' && this.phase !== 'IDEAlocked') {\n\t\t\treturn this.sendUser(user, `|error|The game must be in a locked state to distribute IDEA roles.`);\n\t\t}\n\n\t\tconst neededRoles = this.IDEA.data.choices * this.playerCount;\n\t\tif (neededRoles > this.IDEA.data.roles.length) {\n\t\t\treturn this.sendUser(user, `|error|Not enough roles in the IDEA module.`);\n\t\t}\n\n\t\tconst roles = [];\n\t\tconst selectedIndexes: number[] = [];\n\t\tfor (let i = 0; i < neededRoles; i++) {\n\t\t\tlet randomIndex;\n\t\t\tdo {\n\t\t\t\trandomIndex = Math.floor(Math.random() * this.IDEA.data.roles.length);\n\t\t\t} while (selectedIndexes.includes(randomIndex));\n\t\t\troles.push(this.IDEA.data.roles[randomIndex]);\n\t\t\tselectedIndexes.push(randomIndex);\n\t\t}\n\t\tUtils.shuffle(roles);\n\t\tthis.IDEA.waitingPick = [];\n\t\tfor (const player of this.players) {\n\t\t\tplayer.role = null;\n\t\t\tplayer.IDEA = {\n\t\t\t\tchoices: roles.splice(0, this.IDEA.data.choices),\n\t\t\t\toriginalChoices: [], // MAKE SURE TO SET THIS\n\t\t\t\tpicks: {},\n\t\t\t};\n\t\t\tplayer.IDEA.originalChoices = player.IDEA.choices.slice();\n\t\t\tfor (const pick of this.IDEA.data.picks) {\n\t\t\t\tplayer.IDEA.picks[pick] = null;\n\t\t\t\tthis.IDEA.waitingPick.push(player.id);\n\t\t\t}\n\t\t\tconst u = Users.get(player.id);\n\t\t\tif (u?.connected) u.send(`>${this.room.roomid}\\n|notify|Pick your role in the IDEA module.`);\n\t\t}\n\n\t\tthis.phase = 'IDEApicking';\n\t\tthis.updatePlayers();\n\n\t\tthis.sendDeclare(`${this.IDEA.data.name} roles have been distributed. You will have ${IDEA_TIMER / 1000} seconds to make your picks.`);\n\t\tthis.IDEA.timer = setTimeout(() => { this.ideaFinalizePicks(); }, IDEA_TIMER);\n\n\t\treturn ``;\n\t}\n\n\tideaPick(user: User, selection: string[]) {\n\t\tlet buf = '';\n\t\tif (this.phase !== 'IDEApicking') return 'The game is not in the IDEA picking phase.';\n\t\tif (!this.IDEA?.data) {\n\t\t\treturn this.sendRoom(`Trying to pick an IDEA role with no module running, target: ${JSON.stringify(selection)}. Please report this to a mod.`);\n\t\t}\n\n\t\tconst player = this.getPlayer(user.id);\n\t\tif (!player?.IDEA) {\n\t\t\treturn this.sendRoom(`Trying to pick an IDEA role with no player IDEA object, user: ${user.id}. Please report this to a mod.`);\n\t\t}\n\n\t\tselection = selection.map(toID);\n\t\tif (selection.length === 1 && this.IDEA.data.picks.length === 1) selection = [this.IDEA.data.picks[0], selection[0]];\n\t\tif (selection.length !== 2) return this.sendUser(user, `|error|Invalid selection.`);\n\n\t\t// input is formatted as ['selection', 'role']\n\t\t// eg: ['role', 'bloodhound']\n\t\t// ['alignment', 'alien']\n\t\t// ['selection', ''] deselects\n\t\tif (selection[1]) {\n\t\t\tconst roleIndex = player.IDEA.choices.map(toID).indexOf(selection[1] as ID);\n\t\t\tif (roleIndex === -1) {\n\t\t\t\treturn this.sendUser(user, `|error|${selection[1]} is not an available role, perhaps it is already selected?`);\n\t\t\t}\n\t\t\tselection[1] = player.IDEA.choices.splice(roleIndex, 1)[0];\n\t\t} else {\n\t\t\tselection[1] = '';\n\t\t}\n\t\tconst selected = player.IDEA.picks[selection[0]];\n\t\tif (selected) {\n\t\t\tbuf += `You have deselected ${selected}. `;\n\t\t\tplayer.IDEA.choices.push(selected);\n\t\t}\n\n\t\tif (player.IDEA.picks[selection[0]] && !selection[1]) {\n\t\t\tthis.IDEA.waitingPick.push(player.id);\n\t\t} else if (!player.IDEA.picks[selection[0]] && selection[1]) {\n\t\t\tthis.IDEA.waitingPick.splice(this.IDEA.waitingPick.indexOf(player.id), 1);\n\t\t}\n\n\t\tplayer.IDEA.picks[selection[0]] = selection[1];\n\t\tif (selection[1]) buf += `You have selected ${selection[0]}: ${selection[1]}.`;\n\t\tplayer.updateHtmlRoom();\n\t\tif (!this.IDEA.waitingPick.length) {\n\t\t\tif (this.IDEA.timer) clearTimeout(this.IDEA.timer);\n\t\t\tthis.ideaFinalizePicks();\n\t\t\treturn;\n\t\t}\n\t\treturn this.sendUser(user, buf);\n\t}\n\n\tideaFinalizePicks() {\n\t\tif (!this.IDEA?.data) {\n\t\t\treturn this.sendRoom(`Tried to finalize IDEA picks with no IDEA module running, please report this to a mod.`);\n\t\t}\n\t\tconst randed = [];\n\t\tfor (const player of this.players) {\n\t\t\tif (!player.IDEA) {\n\t\t\t\treturn this.sendRoom(`Trying to pick an IDEA role with no player IDEA object, user: ${player.id}. Please report this to a mod.`);\n\t\t\t}\n\t\t\tlet randPicked = false;\n\t\t\tconst role = [];\n\t\t\tfor (const choice of this.IDEA.data.picks) {\n\t\t\t\tif (!player.IDEA.picks[choice]) {\n\t\t\t\t\trandPicked = true;\n\t\t\t\t\tconst randomChoice = player.IDEA.choices.shift();\n\t\t\t\t\tif (randomChoice) {\n\t\t\t\t\t\tplayer.IDEA.picks[choice] = randomChoice;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`No roles left to randomly assign from IDEA module choices.`);\n\t\t\t\t\t}\n\t\t\t\t\tthis.sendUser(player.id, `You were randomly assigned ${choice}: ${randomChoice}`);\n\t\t\t\t}\n\t\t\t\trole.push(`${choice}: ${player.IDEA.picks[choice]}`);\n\t\t\t}\n\t\t\tif (randPicked) randed.push(player.id);\n\t\t\t// if there's only one option, it's their role, parse it properly\n\t\t\tlet roleName = '';\n\t\t\tif (this.IDEA.data.picks.length === 1) {\n\t\t\t\tconst pick = player.IDEA.picks[this.IDEA.data.picks[0]];\n\t\t\t\tif (!pick) throw new Error('Pick not found when parsing role selected in IDEA module.');\n\t\t\t\tconst parsedRole = Mafia.parseRole(pick);\n\t\t\t\tif (parsedRole.problems.length) {\n\t\t\t\t\tthis.sendRoom(`Problems found when parsing IDEA role ${player.IDEA.picks[this.IDEA.data.picks[0]]}. Please report this to a mod.`);\n\t\t\t\t}\n\t\t\t\tplayer.role = parsedRole.role;\n\t\t\t} else {\n\t\t\t\troleName = role.join('; ');\n\t\t\t\tplayer.role = {\n\t\t\t\t\tname: roleName,\n\t\t\t\t\tsafeName: Utils.escapeHTML(roleName),\n\t\t\t\t\tid: toID(roleName),\n\t\t\t\t\talignment: 'solo',\n\t\t\t\t\tmemo: [`(Your role was set from an IDEA.)`],\n\t\t\t\t\timage: '',\n\t\t\t\t};\n\t\t\t\t// hardcoding this because it makes GestI so much nicer\n\t\t\t\tif (!this.IDEA.data.untrusted) {\n\t\t\t\t\tfor (const pick of role) {\n\t\t\t\t\t\tif (pick.substr(0, 10) === 'alignment:') {\n\t\t\t\t\t\t\tconst parsedRole = Mafia.parseRole(pick.substr(9));\n\t\t\t\t\t\t\tif (parsedRole.problems.length) {\n\t\t\t\t\t\t\t\tthis.sendRoom(`Problems found when parsing IDEA role ${pick}. Please report this to a mod.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayer.role.alignment = parsedRole.role.alignment;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 'Innocent Discard' causes chosen role to become Town, when discarded.\n\t\t\tif (player.IDEA.choices.includes('Innocent Discard')) player.role.alignment = 'town';\n\t\t}\n\t\tthis.IDEA.discardsHTML = `<b>Discards:</b><br />`;\n\t\tfor (const player of this.players.sort((a, b) => a.id.localeCompare(b.id))) {\n\t\t\tconst IDEA = player.IDEA;\n\t\t\tif (!IDEA) {\n\t\t\t\treturn this.sendRoom(`No IDEA data for player ${player} when finalising IDEAs. Please report this to a mod.`);\n\t\t\t}\n\n\t\t\tthis.IDEA.discardsHTML += `<b>${player.safeName}:</b> ${IDEA.choices.join(', ')}<br />`;\n\t\t}\n\n\t\tthis.phase = 'IDEAlocked';\n\t\tif (randed.length) {\n\t\t\tthis.sendDeclare(`${randed.join(', ')} did not pick a role in time and were randomly assigned one.`);\n\t\t}\n\t\tthis.sendDeclare(`IDEA picks are locked!`);\n\t\tthis.sendRoom(`To start, use /mafia start, or to reroll use /mafia ideareroll`);\n\t\tthis.updatePlayers();\n\t}\n\n\tsendPlayerList() {\n\t\tthis.room.add(`|c:|${(Math.floor(Date.now() / 1000))}|~|**Players (${this.getRemainingPlayers().length})**: ${this.getRemainingPlayers().map(p => p.name).sort().join(', ')}`).update();\n\t}\n\n\tupdatePlayers() {\n\t\tfor (const p of this.players) {\n\t\t\tp.tryUpdateHtmlRoom();\n\t\t}\n\t\t// Now do the host\n\t\tthis.updateHost();\n\t}\n\n\tupdatePlayersVotes() {\n\t\tfor (const p of this.players) {\n\t\t\tp.tryUpdateHtmlRoom();\n\t\t}\n\t}\n\n\tupdateHost(...hosts: ID[]) {\n\t\tif (!hosts.length) hosts = [...this.cohostids, this.hostid];\n\n\t\tfor (const hostid of hosts) {\n\t\t\tconst host = Users.get(hostid);\n\t\t\tif (!host?.connected) return;\n\t\t\tfor (const conn of host.connections) {\n\t\t\t\tvoid Chat.resolvePage(`view-mafia-${this.room.roomid}`, host, conn);\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateRoleString() {\n\t\tthis.roleString = this.roles.map(\n\t\t\tr => `<span style=\"font-weight:bold;color:${MafiaData.alignments[r.alignment].color || '#FFF'}\">${r.safeName}</span>`\n\t\t).join(', ');\n\t}\n\n\tsendRoom(message: string) {\n\t\tthis.room.add(message).update();\n\t}\n\tsendHTML(message: string) {\n\t\tthis.room.add(`|uhtml|mafia|${message}`).update();\n\t}\n\tsendDeclare(message: string) {\n\t\tthis.room.add(`|raw|<div class=\"broadcast-blue\">${message}</div>`).update();\n\t}\n\tsendStrong(message: string) {\n\t\tthis.room.add(`|raw|<strong>${message}</strong>`).update();\n\t}\n\tsendTimestamp(message: string) {\n\t\tthis.room.add(`|c:|${(Math.floor(Date.now() / 1000))}|~|${message}`).update();\n\t}\n\tlogAction(user: User, message: string) {\n\t\tif (user.id === this.hostid || this.cohostids.includes(user.id)) return;\n\t\tthis.room.sendModsByUser(user, `(${user.name}: ${message})`);\n\t}\n\tsecretLogAction(user: User, message: string) {\n\t\tif (user.id === this.hostid || this.cohostids.includes(user.id)) return;\n\t\tthis.room.roomlog(`(${user.name}: ${message})`);\n\t}\n\troomWindow() {\n\t\tif (this.ended) return `<div class=\"infobox\">The game of ${this.title} has ended.</div>`;\n\t\tlet output = `<div class=\"broadcast-blue\">`;\n\t\tif (this.phase === 'signups') {\n\t\t\toutput += `<h1 style=\"text-align: center\">A game of ${this.title} was created</h2><p style=\"text-align: center\"><button class=\"button\" name=\"send\" value=\"/mafia join\">Join the game</button> <button class=\"button\" name=\"send\" value=\"/join view-mafia-${this.room.roomid}\">Spectate the game</button> <button class=\"button\" name=\"send\" value=\"/help mafia\">Mafia Commands</button></p>`;\n\t\t} else {\n\t\t\toutput += `<p style=\"font-weight: bold\">A game of ${this.title} is in progress.</p><p><button class=\"button\" name=\"send\" value=\"/msgroom ${this.room.roomid},/mafia sub in\">Become a substitute</button> <button class=\"button\" name=\"send\" value=\"/join view-mafia-${this.room.roomid}\">Spectate the game</button> <button class=\"button\" name=\"send\" value=\"/help mafia\">Mafia Commands</button></p>`;\n\t\t}\n\t\toutput += `</div>`;\n\t\treturn output;\n\t}\n\n\tcanJoin(user: User, self = false, force = false) {\n\t\tif (!user?.connected) throw new Chat.ErrorMessage(`User not found.`);\n\t\tconst targetString = self ? `You are` : `${user.id} is`;\n\t\tif (!this.room.users[user.id]) throw new Chat.ErrorMessage(`${targetString} not in the room.`);\n\t\tfor (const id of [user.id, ...user.previousIDs]) {\n\t\t\tif (this.getPlayer(id)) throw new Chat.ErrorMessage(`${targetString} already in the game.`);\n\t\t\tif (!force && this.played.includes(id)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetString} a previous player and cannot rejoin.`);\n\t\t\t}\n\t\t\tif (Mafia.isGameBanned(this.room, user)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetString} banned from joining mafia games.`);\n\t\t\t}\n\t\t\tif (this.hostid === id) throw new Chat.ErrorMessage(`${targetString} the host.`);\n\t\t\tif (this.cohostids.includes(id)) throw new Chat.ErrorMessage(`${targetString} a cohost.`);\n\t\t}\n\t\tif (!force) {\n\t\t\tfor (const alt of user.getAltUsers(true)) {\n\t\t\t\tif (this.getPlayer(alt.id) || this.played.includes(alt.id)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`${self ? `You already have` : `${user.id} already has`} an alt in the game.`);\n\t\t\t\t}\n\t\t\t\tif (this.hostid === alt.id || this.cohostids.includes(alt.id)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`${self ? `You have` : `${user.id} has`} an alt as a game host.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsendUser(user: MafiaPlayer | User | string, message: string) {\n\t\tlet userObject: User | null;\n\t\tif (user instanceof MafiaPlayer) {\n\t\t\tuserObject = user.getUser();\n\t\t} else if (typeof user === \"string\") {\n\t\t\tuserObject = Users.get(user);\n\t\t} else {\n\t\t\tuserObject = user;\n\t\t}\n\n\t\tif (!userObject?.connected) return;\n\t\tuserObject.sendTo(this.room, message);\n\t}\n\n\tsetSelfVote(user: User, setting: boolean | 'hammer') {\n\t\tconst from = this.selfEnabled;\n\t\tif (from === setting) {\n\t\t\treturn user.sendTo(\n\t\t\t\tthis.room,\n\t\t\t\t`|error|Selfvoting is already ${setting ? `set to Self${setting === 'hammer' ? 'hammering' : 'voting'}` : 'disabled'}.`\n\t\t\t);\n\t\t}\n\t\tif (from) {\n\t\t\tthis.sendDeclare(`Self${from === 'hammer' ? 'hammering' : 'voting'} has been ${setting ? `changed to Self${setting === 'hammer' ? 'hammering' : 'voting'}` : 'disabled'}.`);\n\t\t} else {\n\t\t\tthis.sendDeclare(`Self${setting === 'hammer' ? 'hammering' : 'voting'} has been ${setting ? 'enabled' : 'disabled'}.`);\n\t\t}\n\t\tthis.selfEnabled = setting;\n\t\tif (!setting) {\n\t\t\tfor (const player of this.players) {\n\t\t\t\tif (player.voting === player.id) this.unvote(player, true);\n\t\t\t}\n\t\t}\n\t\tthis.updatePlayers();\n\t}\n\n\tsetNoVote(user: User, setting: boolean) {\n\t\tif (this.enableNV === setting) {\n\t\t\treturn this.sendUser(user, `|error|No Vote is already ${setting ? 'enabled' : 'disabled'}.`);\n\t\t}\n\t\tthis.enableNV = setting;\n\t\tthis.sendDeclare(`No Vote has been ${setting ? 'enabled' : 'disabled'}.`);\n\t\tif (!setting) this.clearVotes('novote' as ID);\n\t\tthis.updatePlayers();\n\t}\n\n\tsetVotelock(user: User, setting: boolean) {\n\t\tif (!this.started) return this.sendUser(user, `The game has not started yet.`);\n\t\tif ((this.voteLock) === setting) {\n\t\t\treturn this.sendUser(user, `|error|Votes are already ${setting ? 'set to lock' : 'set to not lock'}.`);\n\t\t}\n\t\tthis.voteLock = setting;\n\t\tthis.clearVotes();\n\t\tthis.sendDeclare(`Votes are cleared and ${setting ? 'set to lock' : 'set to not lock'}.`);\n\t\tthis.updatePlayers();\n\t}\n\n\tsetVoting(user: User, setting: boolean) {\n\t\tif (!this.started) return this.sendUser(user, `The game has not started yet.`);\n\t\tif (this.votingEnabled === setting) {\n\t\t\treturn this.sendUser(user, `|error|Voting is already ${setting ? 'allowed' : 'disallowed'}.`);\n\t\t}\n\t\tthis.votingEnabled = setting;\n\t\tthis.clearVotes();\n\t\tthis.sendDeclare(`Voting is now ${setting ? 'allowed' : 'disallowed'}.`);\n\t\tthis.updatePlayers();\n\t}\n\n\tclearVotes(target: ID = '') {\n\t\tif (target) delete this.votes[target];\n\n\t\tif (!target) this.votes = Object.create(null);\n\n\t\tfor (const player of this.players) {\n\t\t\tif (player.isEliminated() && !player.isSpirit()) continue;\n\n\t\t\tif (this.forceVote) {\n\t\t\t\tif (!target || (player.voting === target)) {\n\t\t\t\t\tplayer.voting = player.id;\n\t\t\t\t\tthis.votes[player.id] = {\n\t\t\t\t\t\tcount: 1, trueCount: this.getVoteValue(player), lastVote: Date.now(), dir: 'up', voters: [player.id],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!target || (player.voting === target)) player.voting = '';\n\t\t\t}\n\t\t}\n\t\tthis.hasPlurality = null;\n\t}\n\n\t/**\n\t * Only intended to be used during pre-game setup.\n\t */\n\tclearEliminations() {\n\t\tfor (const player of this.players) {\n\t\t\tplayer.eliminated = null;\n\t\t}\n\t}\n\n\toverride onChatMessage(message: string, user: User) {\n\t\tconst subIndex = this.hostRequestedSub.indexOf(user.id);\n\t\tif (subIndex !== -1) {\n\t\t\tthis.hostRequestedSub.splice(subIndex, 1);\n\t\t\tfor (const hostid of [...this.cohostids, this.hostid]) {\n\t\t\t\tthis.sendUser(hostid, `${user.id} has spoken and been removed from the host sublist.`);\n\t\t\t}\n\t\t}\n\n\t\t// Hosts can always talk\n\t\tif (this.hostid === user.id || this.cohostids.includes(user.id) || !this.started) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst player = this.getPlayer(user.id);\n\t\tconst eliminated = player?.isEliminated();\n\t\tconst staff = user.can('mute', null, this.room);\n\n\t\tif (!player) {\n\t\t\tif (staff) {\n\t\t\t\t// Uninvolved staff can talk anytime\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn `You cannot talk while a game of ${this.title} is going on.`;\n\t\t\t}\n\t\t}\n\n\t\tif (player.silenced) {\n\t\t\treturn `You are silenced and cannot speak.${staff ? \" You can remove this with /mafia unsilence.\" : ''}`;\n\t\t}\n\n\t\tif (eliminated) {\n\t\t\tif (!player.isTreestump()) {\n\t\t\t\treturn `You are dead.${staff ? \" You can treestump yourself with /mafia treestump.\" : ''}`;\n\t\t\t}\n\t\t}\n\n\t\tif (this.phase === 'night') {\n\t\t\tif (!player.nighttalk) {\n\t\t\t\treturn `You cannot talk at night.${staff ? \" You can bypass this using /mafia nighttalk.\" : ''}`;\n\t\t\t}\n\t\t}\n\t}\n\n\toverride onConnect(user: User) {\n\t\tthis.sendUser(user, `|uhtml|mafia|${this.roomWindow()}`);\n\t}\n\n\toverride onJoin(user: User) {\n\t\tconst player = this.getPlayer(user.id);\n\t\tif (player) {\n\t\t\treturn player.updateHtmlRoom();\n\t\t}\n\t\tif (user.id === this.hostid || this.cohostids.includes(user.id)) return this.updateHost(user.id);\n\t}\n\n\toverride removeBannedUser(user: User) {\n\t\t// Player was banned, attempt to sub now\n\t\t// If we can't sub now, make subbing them out the top priority\n\t\tif (!this.getPlayer(user.id)) return;\n\t\tthis.requestedSub.unshift(user.id);\n\t\tthis.nextSub();\n\t}\n\n\toverride forfeit(user: User) {\n\t\t// Add the player to the sub list.\n\t\tconst player = this.getPlayer(user.id);\n\t\tif (!player || player.isEliminated()) return;\n\t\tthis.requestedSub.push(user.id);\n\t\tthis.nextSub();\n\t}\n\n\tend() {\n\t\tthis.setEnded();\n\t\tthis.sendHTML(this.roomWindow());\n\t\tthis.updatePlayers();\n\t\tif (this.room.roomid === 'mafia' && this.started) {\n\t\t\t// Instead of using this.played, which shows players who have subbed out as well\n\t\t\t// We check who played through to the end when recording playlogs\n\t\t\tconst played = this.players.map(p => p.id);\n\t\t\tconst month = new Date().toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\t\t\tif (!logs.plays[month]) logs.plays[month] = {};\n\t\t\tfor (const player of played) {\n\t\t\t\tif (!logs.plays[month][player]) logs.plays[month][player] = 0;\n\t\t\t\tlogs.plays[month][player]++;\n\t\t\t}\n\t\t\tif (!logs.hosts[month]) logs.hosts[month] = {};\n\t\t\tfor (const hostid of [...this.cohostids, this.hostid]) {\n\t\t\t\tif (!logs.hosts[month][hostid]) logs.hosts[month][hostid] = 0;\n\t\t\t\tlogs.hosts[month][hostid]++;\n\t\t\t}\n\t\t\twriteFile(LOGS_FILE, logs);\n\t\t}\n\t\tif (this.timer) {\n\t\t\tclearTimeout(this.timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t\tthis.destroy();\n\t}\n\n\toverride destroy() {\n\t\t// Ensure timers are cleared as a part of game destruction\n\t\tif (this.timer) clearTimeout(this.timer);\n\t\tif (this.IDEA.timer) clearTimeout(this.IDEA.timer);\n\t\tsuper.destroy();\n\t}\n}\n\nexport const pages: Chat.PageTable = {\n\tmafia(query, user) {\n\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\tif (!query.length) return this.close();\n\t\tlet roomid = query.shift();\n\t\tif (roomid === 'groupchat') roomid += `-${query.shift()}-${query.shift()}`;\n\t\tconst room = Rooms.get(roomid);\n\t\tconst game = room?.getGame(Mafia);\n\t\tif (!room?.users[user.id] || !game || game.ended) {\n\t\t\treturn this.close();\n\t\t}\n\n\t\tconst isPlayer = game.getPlayer(user.id);\n\t\tconst isHost = user.id === game.hostid || game.cohostids.includes(user.id);\n\t\tconst players = game.getRemainingPlayers();\n\t\tthis.title = game.title;\n\t\tlet buf = `<div class=\"pad broadcast-blue\">`;\n\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/join view-mafia-${room.roomid}\" style=\"float:left\"><i class=\"fa fa-refresh\"></i> Refresh</button>`;\n\t\tbuf += `<br/><br/><h1 style=\"text-align:center;\">${game.title}</h1><h3>Host: ${game.host}</h3>${game.cohostids[0] ? `<h3>Cohosts: ${game.cohosts.sort().join(', ')}</h3>` : ''}`;\n\t\tbuf += `<p style=\"font-weight:bold;\">Players (${players.length}): ${players.map(p => p.safeName).sort().join(', ')}</p>`;\n\n\t\tconst eliminatedPlayers = game.getEliminatedPlayers();\n\t\tif (game.started && eliminatedPlayers.length > 0) {\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Dead Players</summary>`;\n\t\t\tfor (const eliminated of eliminatedPlayers) {\n\t\t\t\tbuf += `<p style=\"font-weight:bold;\">${eliminated.safeName} ${eliminated.revealed ? '(' + eliminated.revealed + ')' : ''}`;\n\t\t\t\tif (eliminated.isTreestump()) buf += ` (is a Treestump)`;\n\t\t\t\tif (eliminated.isSpirit()) buf += ` (is a Restless Spirit)`;\n\t\t\t\tif (isHost && !eliminated.revealed) {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia revealrole ${eliminated.id}\";\">Reveal</button>`;\n\t\t\t\t}\n\t\t\t\tbuf += `</p>`;\n\t\t\t}\n\t\t\tbuf += `</details></p>`;\n\t\t}\n\n\t\tbuf += `<hr/>`;\n\t\tif (isPlayer && game.phase === 'IDEApicking') {\n\t\t\tbuf += `<p><b>IDEA information:</b><br />`;\n\t\t\tconst IDEA = isPlayer.IDEA;\n\t\t\tif (!IDEA) {\n\t\t\t\treturn game.sendRoom(`IDEA picking phase but no IDEA object for user: ${user.id}. Please report this to a mod.`);\n\t\t\t}\n\t\t\tfor (const key in IDEA.picks) {\n\t\t\t\tconst pick = IDEA.picks[key];\n\t\t\t\tbuf += `<b>${key}:</b> `;\n\t\t\t\tif (!pick) {\n\t\t\t\t\tbuf += `<button class=\"button disabled\" style=\"font-weight:bold; color:#575757; font-weight:bold; background-color:#d3d3d3;\">clear</button>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia ideapick ${key},\">clear</button>`;\n\t\t\t\t}\n\t\t\t\tconst selectedIndex = pick ? IDEA.originalChoices.indexOf(pick) : -1;\n\t\t\t\tfor (let i = 0; i < IDEA.originalChoices.length; i++) {\n\t\t\t\t\tconst choice = IDEA.originalChoices[i];\n\t\t\t\t\tif (i === selectedIndex) {\n\t\t\t\t\t\tbuf += `<button class=\"button disabled\" style=\"font-weight:bold; color:#575757; font-weight:bold; background-color:#d3d3d3;\">${choice}</button>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia ideapick ${key}, ${toID(choice)}\">${choice}</button>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf += `<br />`;\n\t\t\t}\n\t\t\tbuf += `</p>`;\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"display:inline-block\"><b>Role details:</b></summary><p>`;\n\t\t\tfor (const role of IDEA.originalChoices) {\n\t\t\t\tconst roleObject = Mafia.parseRole(role);\n\t\t\t\tbuf += `<details><summary>${role}</summary>`;\n\t\t\t\tbuf += `<table><tr><td style=\"text-align:center;\"><td style=\"text-align:left;width:100%\"><ul>${roleObject.role.memo.map(m => `<li>${m}</li>`).join('')}</ul></td></tr></table>`;\n\t\t\t\tbuf += `</details>`;\n\t\t\t}\n\t\t\tbuf += `</p></details></p>`;\n\t\t}\n\t\tif (game.IDEA.data) {\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">${game.IDEA.data.name} information</summary>`;\n\t\t\tif (game.IDEA.discardsHTML && (!game.IDEA.discardsHidden || isHost)) {\n\t\t\t\tbuf += `<details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Discards:</summary><p>${game.IDEA.discardsHTML}</p></details>`;\n\t\t\t}\n\t\t\tbuf += `<details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Role list</summary><p>${game.IDEA.data.roles.join('<br />')}</p></details>`;\n\t\t\tbuf += `</details></p>`;\n\t\t} else {\n\t\t\tif (!game.closedSetup || isHost) {\n\t\t\t\tif (game.theme) {\n\t\t\t\t\tbuf += `<p><span style=\"font-weight:bold;\">Theme</span>: ${game.theme.name}</p>`;\n\t\t\t\t\tbuf += `<p>${game.theme.desc}</p>`;\n\t\t\t\t}\n\t\t\t\tif (game.noReveal) {\n\t\t\t\t\tbuf += `<p><span style=\"font-weight:bold;\">Original Rolelist${game.closedSetup ? ' (CS)' : ''}</span>: ${game.originalRoleString}</p>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<p><span style=\"font-weight:bold;\">Rolelist${game.closedSetup ? ' (CS)' : ''}</span>: ${game.roleString}</p>`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isPlayer) {\n\t\t\tconst role = isPlayer.role;\n\t\t\tlet previousActionsPL = `<br/>`;\n\t\t\tif (role) {\n\t\t\t\tbuf += `<h3>${isPlayer.safeName}, you are a ${isPlayer.getStylizedRole()}</h3>`;\n\t\t\t\tif (!['town', 'solo'].includes(role.alignment)) {\n\t\t\t\t\tbuf += `<p><span style=\"font-weight:bold\">Partners</span>: ${game.getPartners(role.alignment, isPlayer)}</p>`;\n\t\t\t\t}\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Role Details</summary>`;\n\t\t\t\tbuf += `<table><tr><td style=\"text-align:center;\"><img width=\"75\" height=\"75\" src=\"//${Config.routes.client}/fx/mafia-${role.image || 'villager'}.png\"></td><td style=\"text-align:left;width:100%\"><ul>${role.memo.map(m => `<li>${m}</li>`).join('')}</ul></td></tr></table>`;\n\t\t\t\tbuf += `</details></p>`;\n\t\t\t\tfor (let i = 0; i < game.dayNum; i++) {\n\t\t\t\t\tpreviousActionsPL += `<b>Night ${i}</b><br/>`;\n\t\t\t\t\tpreviousActionsPL += `${isPlayer.actionArr?.[i] ? `${isPlayer.actionArr[i]}` : ''}<br/>`;\n\t\t\t\t}\n\t\t\t\tif (game.dayNum > 0) {\n\t\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Previous Actions</summary>${previousActionsPL}</span></details></p>`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (game.phase === \"day\") {\n\t\t\tbuf += `<span id=\"mafia-votes\">`;\n\t\t\tbuf += game.voteBoxFor(user.id);\n\t\t\tbuf += `</span>`;\n\t\t} else if (game.phase === \"night\" && isPlayer && !isPlayer.isEliminated()) {\n\t\t\tif (!game.takeIdles) {\n\t\t\t\tbuf += `<p style=\"font-weight:bold;\">PM the host (${game.host}) the action you want to use tonight, and who you want to use it on. Or PM the host \"idle\".</p>`;\n\t\t\t} else {\n\t\t\t\tbuf += `<b>Night Actions:</b>`;\n\t\t\t\tif (isPlayer.action === null) {\n\t\t\t\t\tbuf += `<button class=\"button disabled\" style=\"font-weight:bold; color:#575757; font-weight:bold; background-color:#d3d3d3;\">Clear</button>`;\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia idle\">Idle</button>`;\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia action\">Action</button><br/>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia noresponse\">Clear</button>`;\n\t\t\t\t\tif (isPlayer.action) {\n\t\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia idle\">Idle</button>`;\n\t\t\t\t\t\tbuf += `<button class=\"button disabled\" style=\"font-weight:bold; color:#575757; font-weight:bold; background-color:#d3d3d3;\">Action</button>`;\n\t\t\t\t\t\tif (isPlayer.action === true) {\n\t\t\t\t\t\t\tbuf += `<form data-submitsend=\"/msgroom ${game.room.roomid},/mafia action {submission}\"><label><b>Submission:</b> <input name=\"submission\" class=\"textbox\" placeholder=\"Action Details\" /></label> <button class=\"button\">Confirm</button></form>`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuf += `<form data-submitsend=\"/msgroom ${game.room.roomid},/mafia action\"><label><b>Submission:</b> ${isPlayer.action} <button class=\"button\">Clear Submission</button></label></form>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuf += `<button class=\"button disabled\" style=\"font-weight:bold; color:#575757; font-weight:bold; background-color:#d3d3d3;\">Idle</button>`;\n\t\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia action\">Action</button><br/>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isHost) {\n\t\t\tif (game.phase === \"night\" && isHost && game.takeIdles) {\n\t\t\t\tbuf += `<h3>Night Responses</h3>`;\n\t\t\t\tlet actions = `<br/>`;\n\t\t\t\tlet idles = `<br/>`;\n\t\t\t\tlet noResponses = `<br/>`;\n\t\t\t\tfor (const player of game.getRemainingPlayers()) {\n\t\t\t\t\tif (player.action) {\n\t\t\t\t\t\tactions += `<b>${player.safeName}</b>${player.action === true ? '' : `: ${player.action}`}<br/>`;\n\t\t\t\t\t} else if (player.action === false) {\n\t\t\t\t\t\tidles += `<b>${player.safeName}</b><br/>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnoResponses += `<b>${player.safeName}</b><br/>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Idles</summary>${idles}</span></details></p>`;\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Actions</summary>${actions}</span></details></p>`;\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">No Response</summary>${noResponses}</span></details></p>`;\n\t\t\t}\n\t\t\tlet previousActions = `<br/>`;\n\t\t\tfor (let i = 0; i < game.dayNum; i++) {\n\t\t\t\tpreviousActions += `<b>Night ${i}</b><br/>`;\n\t\t\t\tfor (const player of game.players) {\n\t\t\t\t\tpreviousActions += `<b>${player.safeName}</b>:${player.actionArr[i] ? `${player.actionArr[i]}` : ''}<br/>`;\n\t\t\t\t}\n\t\t\t\tpreviousActions += `<br/>`;\n\t\t\t}\n\t\t\tbuf += `<h3>Host options</h3>`;\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">General Options</summary>`;\n\t\t\tbuf += `<h3>General Options</h3>`;\n\t\t\tif (!game.started) {\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia closedsetup ${game.closedSetup ? 'off' : 'on'}\">${game.closedSetup ? 'Disable' : 'Enable'} Closed Setup</button>`;\n\t\t\t\tif (game.phase === 'locked' || game.phase === 'IDEAlocked') {\n\t\t\t\t\tbuf += ` <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia start\">Start Game</button>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += ` <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia close\">Close Signups</button>`;\n\t\t\t\t}\n\t\t\t} else if (game.phase === 'day') {\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia night\">Go to Night ${game.dayNum}</button>`;\n\t\t\t} else if (game.phase === 'night') {\n\t\t\t\tif (game.dayNum !== 0) {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia day\">Go to Day ${game.dayNum + 1}</button> <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia extend\">Return to Day ${game.dayNum}</button>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia day\">Go to Day ${game.dayNum + 1}</button>`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf += ` <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia selfvote ${game.selfEnabled === true ? 'off' : 'on'}\">${game.selfEnabled === true ? 'Disable' : 'Enable'} self voting</button> `;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia ${game.enableNV ? 'disable' : 'enable'}nl\">${game.enableNV ? 'Disable' : 'Enable'} No Vote</button> `;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia reveal ${game.noReveal ? 'on' : 'off'}\">${game.noReveal ? 'Enable' : 'Disable'} revealing of roles</button> `;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia autosub ${game.autoSub ? 'off' : 'on'}\">${game.autoSub ? \"Disable\" : \"Enable\"} automatic subbing of players</button> `;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia end\">End Game</button>`;\n\t\t\tbuf += `<p>To set a deadline, use <strong>/mafia deadline [minutes]</strong>.<br />To clear the deadline use <strong>/mafia deadline off</strong>.</p><hr/></details></p>`;\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Player Options</summary>`;\n\t\t\tbuf += `<h3>Player Options</h3>`;\n\t\t\tfor (const player of game.getRemainingPlayers()) {\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\"><span style=\"font-weight:bold;\">`;\n\t\t\t\tbuf += `${player.safeName} (${player.role ? player.getStylizedRole(true) : ''})`;\n\t\t\t\tbuf += game.voteModifiers[player.id] !== undefined ? `(votes worth ${game.getVoteValue(player)})` : '';\n\t\t\t\tbuf += player.hammerRestriction !== null ? `(${player.hammerRestriction ? 'actor' : 'priest'})` : '';\n\t\t\t\tbuf += player.silenced ? '(silenced)' : '';\n\t\t\t\tbuf += player.nighttalk ? '(insomniac)' : '';\n\t\t\t\tbuf += `</summary>`;\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia kill ${player.id}\">Kill</button> `;\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia treestump ${player.id}\">Make a Treestump (Kill)</button> `;\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia spirit ${player.id}\">Make a Restless Spirit (Kill)</button> `;\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia spiritstump ${player.id}\">Make a Restless Treestump (Kill)</button> `;\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia sub next, ${player.id}\">Force sub</button></span></details></p>`;\n\t\t\t}\n\t\t\tfor (const eliminated of game.getEliminatedPlayers()) {\n\t\t\t\tbuf += `<p style=\"font-weight:bold;\">${eliminated.safeName} (${eliminated.role ? eliminated.getStylizedRole() : ''})`;\n\t\t\t\tif (eliminated.isTreestump()) buf += ` (is a Treestump)`;\n\t\t\t\tif (eliminated.isSpirit()) buf += ` (is a Restless Spirit)`;\n\t\t\t\tif (game.voteModifiers[eliminated.id] !== undefined) buf += ` (votes worth ${game.getVoteValue(eliminated)})`;\n\t\t\t\tbuf += eliminated.hammerRestriction !== null ? `(${eliminated.hammerRestriction ? 'actor' : 'priest'})` : '';\n\t\t\t\tbuf += eliminated.silenced ? '(silenced)' : '';\n\t\t\t\tbuf += eliminated.nighttalk ? '(insomniac)' : '';\n\t\t\t\tbuf += `: <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia revive ${eliminated.id}\">Revive</button></p>`;\n\t\t\t}\n\t\t\tbuf += `<hr/></details></p>`;\n\t\t\tif (game.dayNum > 0) {\n\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">Previous Night Actions</summary>${previousActions}</span></details></p>`;\n\t\t\t}\n\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">How to setup roles</summary>`;\n\t\t\tbuf += `<h3>Setting the roles</h3>`;\n\t\t\tbuf += `<p>To set the roles, use /mafia setroles [comma separated list of roles] OR /mafia setroles [theme] in ${room.title}.</p>`;\n\t\t\tbuf += `<p>If you set the roles from a theme, the role parser will get all the correct roles for you. (Not all themes are supported).</p>`;\n\t\t\tbuf += `<p>The following key words determine a role's alignment (If none are found, the default alignment is town):</p>`;\n\t\t\tbuf += `<p style=\"font-weight:bold\">${Object.values(MafiaData.alignments).map(a => `<span style=\"color:${a.color || '#FFF'}\">${a.name}</span>`).join(', ')}</p>`;\n\t\t\tbuf += `<p>Please note that anything inside (parentheses) is ignored by the role parser.</p>`;\n\t\t\tbuf += `<p>If you have roles that have conflicting alignments or base roles, you can use /mafia forcesetroles [comma separated list of roles] to forcibly set the roles.</p>`;\n\t\t\tbuf += `<p>Please note that you will have to PM all the players their alignment, partners (if any), and other information about their role because the server will not provide it.</p>`;\n\t\t\tbuf += `<hr/></details></p>`;\n\t\t\tbuf += `<p style=\"font-weight:bold;\">Players who will be subbed unless they talk: ${game.hostRequestedSub.join(', ')}</p>`;\n\t\t\tbuf += `<p style=\"font-weight:bold;\">Players who are requesting a sub: ${game.requestedSub.join(', ')}</p>`;\n\t\t}\n\t\tbuf += `<p style=\"font-weight:bold;\">Sub List: ${game.subs.join(', ')}</p>`;\n\t\tif (!isHost) {\n\t\t\tif (game.phase === 'signups') {\n\t\t\t\tif (isPlayer) {\n\t\t\t\t\tbuf += `<p><button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia leave\">Leave game</button></p>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<p><button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia join\">Join game</button></p>`;\n\t\t\t\t}\n\t\t\t} else if (!isPlayer?.isEliminated()) {\n\t\t\t\tif ((!isPlayer && game.subs.includes(user.id)) || (isPlayer && !game.requestedSub.includes(user.id))) {\n\t\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">${isPlayer ? 'Request to be subbed out' : 'Cancel sub request'}</summary>`;\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia sub out\">${isPlayer ? 'Confirm request to be subbed out' : 'Confirm cancelation of sub request'}</button></details></p>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<p><details><summary class=\"button\" style=\"text-align:left; display:inline-block\">${isPlayer ? 'Cancel sub request' : 'Join the game as a sub'}</summary>`;\n\t\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/mafia sub in\">${isPlayer ? 'Confirm cancelation of sub request' : 'Confirm that you want to join the game'}</button></details></p>`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuf += `</div>`;\n\t\treturn buf;\n\t},\n\tmafialadder(query, user) {\n\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\tconst mafiaRoom = Rooms.get('mafia');\n\t\tif (!query.length || !mafiaRoom) return this.close();\n\t\tconst headers: { [k: string]: { title: string, type: string, section: MafiaLogSection } } = {\n\t\t\tleaderboard: { title: 'Leaderboard', type: 'Points', section: 'leaderboard' },\n\t\t\tmvpladder: { title: 'MVP Ladder', type: 'MVPs', section: 'mvps' },\n\t\t\thostlogs: { title: 'Host Logs', type: 'Hosts', section: 'hosts' },\n\t\t\tplaylogs: { title: 'Play Logs', type: 'Plays', section: 'plays' },\n\t\t\tleaverlogs: { title: 'Leaver Logs', type: 'Leavers', section: 'leavers' },\n\t\t};\n\t\tconst date = new Date();\n\t\tif (query[1] === 'prev') date.setMonth(date.getMonth() - 1);\n\t\tconst month = date.toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\t\tconst ladder = headers[query[0]];\n\t\tif (!ladder) return this.close();\n\t\tif (['hosts', 'plays', 'leavers'].includes(ladder.section)) this.checkCan('mute', null, mafiaRoom);\n\t\tthis.title = `Mafia ${ladder.title} (${date.toLocaleString(\"en-us\", { month: 'long' })} ${date.getFullYear()})`;\n\t\tlet buf = `<div class=\"pad ladder\">`;\n\t\tbuf += `${query[1] === 'prev' ? '' : `<button class=\"button\" name=\"send\" value=\"/join view-mafialadder-${query[0]}\" style=\"float:left\"><i class=\"fa fa-refresh\"></i> Refresh</button> <button class=\"button\" name=\"send\" value=\"/join view-mafialadder-${query[0]}-prev\" style=\"float:left\">View last month's ${ladder.title}</button>`}`;\n\t\tbuf += `<br /><br />`;\n\t\tconst section = ladder.section;\n\t\tif (!logs[section][month] || !Object.keys(logs[section][month]).length) {\n\t\t\tbuf += `${ladder.title} for ${date.toLocaleString(\"en-us\", { month: 'long' })} ${date.getFullYear()} not found.</div>`;\n\t\t\treturn buf;\n\t\t}\n\t\tconst entries = Utils.sortBy(Object.entries(logs[section][month]), ([key, value]) => (\n\t\t\t-value\n\t\t));\n\t\tbuf += `<table style=\"margin-left: auto; margin-right: auto\"><tbody><tr><th colspan=\"2\"><h2 style=\"margin: 5px auto\">Mafia ${ladder.title} for ${date.toLocaleString(\"en-us\", { month: 'long' })} ${date.getFullYear()}</h1></th></tr>`;\n\t\tbuf += `<tr><th>User</th><th>${ladder.type}</th></tr>`;\n\t\tfor (const [key, value] of entries) {\n\t\t\tbuf += `<tr><td>${key}</td><td>${value}</td></tr>`;\n\t\t}\n\t\treturn buf + `</table></div>`;\n\t},\n};\n\nexport const commands: Chat.ChatCommands = {\n\tmafia: {\n\t\t''(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = room.getGame(Mafia);\n\t\t\tif (game) {\n\t\t\t\tif (!this.runBroadcast()) return;\n\t\t\t\treturn this.sendReply(`|html|${game.roomWindow()}`);\n\t\t\t}\n\t\t\treturn this.parse('/help mafia');\n\t\t},\n\t\tforcehost: 'host',\n\t\tnexthost: 'host',\n\t\thost(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tif (room.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tthis.checkChat();\n\t\t\tif (room.type !== 'chat') throw new Chat.ErrorMessage(`This command is only meant to be used in chat rooms.`);\n\t\t\tif (room.game) throw new Chat.ErrorMessage(`There is already a game of ${room.game.title} in progress in this room.`);\n\n\t\t\tconst nextHost = room.roomid === 'mafia' && cmd === 'nexthost';\n\t\t\tif (nextHost || !room.auth.has(user.id)) this.checkCan('show', null, room);\n\n\t\t\tlet targetUser!: User | null;\n\t\t\tlet targetUsername!: string;\n\t\t\tif (nextHost) {\n\t\t\t\tif (!hostQueue.length) throw new Chat.ErrorMessage(`Nobody is on the host queue.`);\n\t\t\t\tconst skipped = [];\n\t\t\t\tlet hostid;\n\t\t\t\twhile ((hostid = hostQueue.shift())) {\n\t\t\t\t\t({ targetUser, targetUsername } = this.splitUser(hostid, { exactName: true }));\n\t\t\t\t\tif (!targetUser?.connected ||\n\t\t\t\t\t\t!room.users[targetUser.id] || Mafia.isHostBanned(room, targetUser)) {\n\t\t\t\t\t\tskipped.push(hostid);\n\t\t\t\t\t\ttargetUser = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// found a host\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skipped.length) {\n\t\t\t\t\tthis.sendReply(`${skipped.join(', ')} ${Chat.plural(skipped.length, 'were', 'was')} not online, not in the room, or are host banned and were removed from the host queue.`);\n\t\t\t\t}\n\t\t\t\tif (!targetUser) throw new Chat.ErrorMessage(`Nobody on the host queue could be hosted.`);\n\t\t\t} else {\n\t\t\t\t({ targetUser, targetUsername } = this.splitUser(target, { exactName: true }));\n\t\t\t\tif (room.roomid === 'mafia' && hostQueue.length && toID(targetUsername) !== hostQueue[0]) {\n\t\t\t\t\tif (!cmd.includes('force')) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`${targetUsername} isn't the next host on the queue. Use /mafia forcehost if you're sure.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!targetUser?.connected) {\n\t\t\t\tthrow new Chat.ErrorMessage(`The user \"${targetUsername}\" was not found.`);\n\t\t\t}\n\n\t\t\tif (!nextHost && targetUser.id !== user.id) this.checkCan('mute', null, room);\n\n\t\t\tif (!room.users[targetUser.id]) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUsername} is not in this room, and cannot be hosted.`);\n\t\t\t}\n\t\t\tif (Mafia.isHostBanned(room, targetUser)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUsername} is banned from hosting mafia games.`);\n\t\t\t}\n\n\t\t\troom.game = new Mafia(room, targetUser);\n\n\t\t\tfor (const conn of targetUser.connections) {\n\t\t\t\tvoid Chat.resolvePage(`view-mafia-${room.roomid}`, targetUser, conn);\n\t\t\t}\n\t\t\troom.addByUser(user, `${targetUser.name} was appointed the mafia host by ${user.name}.`);\n\t\t\tif (room.roomid === 'mafia') {\n\t\t\t\tconst queueIndex = hostQueue.indexOf(targetUser.id);\n\t\t\t\tif (queueIndex > -1) hostQueue.splice(queueIndex, 1);\n\t\t\t\troom.add(`|c:|${(Math.floor(Date.now() / 1000))}|~|**Mafiasignup!**`).update();\n\t\t\t}\n\t\t\tthis.modlog('MAFIAHOST', targetUser, null, { noalts: true, noip: true });\n\t\t},\n\t\thosthelp: [\n\t\t\t`/mafia host [user] - Create a game of Mafia with [user] as the host. Requires whitelist + % @ # ~, drivers+ can host other people.`,\n\t\t],\n\n\t\tq: 'queue',\n\t\tqueue(target, room, user) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tif (room.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tconst [command, targetUserID] = target.split(',').map(toID);\n\n\t\t\tswitch (command) {\n\t\t\tcase 'forceadd':\n\t\t\tcase 'add':\n\t\t\t\tthis.checkChat();\n\t\t\t\t// any rank can selfqueue\n\t\t\t\tif (targetUserID === user.id) {\n\t\t\t\t\tif (!room.auth.has(user.id)) this.checkCan('show', null, room);\n\t\t\t\t} else {\n\t\t\t\t\tthis.checkCan('mute', null, room);\n\t\t\t\t}\n\t\t\t\tif (!targetUserID) return this.parse(`/help mafia queue`);\n\t\t\t\tconst targetUser = Users.get(targetUserID);\n\t\t\t\tif ((!targetUser?.connected) && !command.includes('force')) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`User ${targetUserID} not found. To forcefully add the user to the queue, use /mafia queue forceadd, ${targetUserID}`);\n\t\t\t\t}\n\t\t\t\tif (hostQueue.includes(targetUserID)) throw new Chat.ErrorMessage(`User ${targetUserID} is already on the host queue.`);\n\t\t\t\tif (targetUser && Mafia.isHostBanned(room, targetUser)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`User ${targetUserID} is banned from hosting mafia games.`);\n\t\t\t\t}\n\t\t\t\thostQueue.push(targetUserID);\n\t\t\t\troom.add(`User ${targetUserID} has been added to the host queue by ${user.name}.`).update();\n\t\t\t\tbreak;\n\t\t\tcase 'del':\n\t\t\tcase 'delete':\n\t\t\tcase 'remove':\n\t\t\t\t// anyone can self remove\n\t\t\t\tif (targetUserID !== user.id) this.checkCan('mute', null, room);\n\t\t\t\tconst index = hostQueue.indexOf(targetUserID);\n\t\t\t\tif (index === -1) throw new Chat.ErrorMessage(`User ${targetUserID} is not on the host queue.`);\n\t\t\t\thostQueue.splice(index, 1);\n\t\t\t\troom.add(`User ${targetUserID} has been removed from the host queue by ${user.name}.`).update();\n\t\t\t\tbreak;\n\t\t\tcase '':\n\t\t\tcase 'show':\n\t\t\tcase 'view':\n\t\t\t\tif (!this.runBroadcast()) return;\n\t\t\t\tthis.sendReplyBox(`<strong>Host Queue:</strong> ${hostQueue.join(', ')}`);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.parse('/help mafia queue');\n\t\t\t}\n\t\t},\n\t\tqueuehelp: [\n\t\t\t`/mafia queue - Shows the upcoming users who are going to host.`,\n\t\t\t`/mafia queue add, (user) - Adds the user to the hosting queue. Requires whitelist + % @ # ~`,\n\t\t\t`/mafia queue remove, (user) - Removes the user from the hosting queue. Requires whitelist + % @ # ~`,\n\t\t],\n\n\t\tqadd: 'queueadd',\n\t\tqforceadd: 'queueadd',\n\t\tqueueforceadd: 'queueadd',\n\t\tqueueadd(target, room, user, connection, cmd) {\n\t\t\tthis.parse(`/mafia queue ${cmd.includes('force') ? `forceadd` : `add`}, ${target}`);\n\t\t},\n\n\t\tqdel: 'queueremove',\n\t\tqdelete: 'queueremove',\n\t\tqremove: 'queueremove',\n\t\tqueueremove(target, room, user) {\n\t\t\tthis.parse(`/mafia queue remove, ${target}`);\n\t\t},\n\n\t\tjoin(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkChat(null, room);\n\t\t\tgame.join(user);\n\t\t},\n\t\tjoinhelp: [`/mafia join - Join the game.`],\n\n\t\tleave(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tgame.leave(user);\n\t\t},\n\t\tleavehelp: [`/mafia leave - Leave the game. Can only be done while signups are open.`],\n\n\t\tplayercap(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (game.started) throw new Chat.ErrorMessage(`The game already started.`);\n\t\t\tconst num = parseInt(target);\n\t\t\tif (isNaN(num) || num > 50 || num < 2) return this.parse('/help mafia playercap');\n\t\t\tif (num < game.playerCount) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Player cap has to be equal or more than the amount of players in game.`);\n\t\t\t}\n\t\t\tif (num === game.playerCap) throw new Chat.ErrorMessage(`Player cap is already set at ${game.playerCap}.`);\n\t\t\tgame.playerCap = num;\n\t\t\tgame.sendDeclare(`Player cap has been set to ${game.playerCap}`);\n\t\t\tgame.logAction(user, `set playercap to ${num}`);\n\t\t},\n\t\tplayercaphelp: [\n\t\t\t`/mafia playercap [cap]- Limit the number of players being able to join the game. Player cap cannot be more than 50 or less than 2. Default is 20. Requires host % @ # ~`,\n\t\t],\n\n\t\tclose(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (game.phase !== 'signups') throw new Chat.ErrorMessage(`Signups are already closed.`);\n\t\t\tif (game.playerCount < 2) throw new Chat.ErrorMessage(`You need at least 2 players to start.`);\n\t\t\tgame.phase = 'locked';\n\t\t\tgame.sendHTML(game.roomWindow());\n\t\t\tgame.updatePlayers();\n\t\t\tgame.logAction(user, `closed signups`);\n\t\t},\n\t\tclosehelp: [`/mafia close - Closes signups for the current game. Requires host % @ # ~`],\n\n\t\tcs: 'closedsetup',\n\t\tclosedsetup(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (!['on', 'off'].includes(action)) return this.parse('/help mafia closedsetup');\n\t\t\tif (game.started) {\n\t\t\t\tthrow new Chat.ErrorMessage(`You can't ${action === 'on' ? 'enable' : 'disable'} closed setup because the game has already started.`);\n\t\t\t}\n\t\t\tif ((action === 'on' && game.closedSetup) || (action === 'off' && !game.closedSetup)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Closed setup is already ${game.closedSetup ? 'enabled' : 'disabled'}.`);\n\t\t\t}\n\t\t\tgame.closedSetup = action === 'on';\n\t\t\tgame.sendDeclare(`The game is ${action === 'on' ? 'now' : 'no longer'} a closed setup.`);\n\t\t\tgame.updateHost();\n\t\t\tgame.logAction(user, `${game.closedSetup ? 'enabled' : 'disabled'} closed setup`);\n\t\t},\n\t\tclosedsetuphelp: [\n\t\t\t`/mafia closedsetup [on|off] - Sets if the game is a closed setup. Closed setups don't show the role list to players. Requires host % @ # ~`,\n\t\t],\n\n\t\treveal(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (!['on', 'off'].includes(action)) return this.parse('/help mafia reveal');\n\t\t\tif ((action === 'off' && game.noReveal) || (action === 'on' && !game.noReveal)) {\n\t\t\t\treturn user.sendTo(\n\t\t\t\t\troom,\n\t\t\t\t\t`|error|Revealing of roles is already ${game.noReveal ? 'disabled' : 'enabled'}.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tgame.noReveal = action === 'off';\n\t\t\tgame.sendDeclare(`Revealing of roles has been ${action === 'off' ? 'disabled' : 'enabled'}.`);\n\t\t\tgame.updatePlayers();\n\t\t\tgame.logAction(user, `${game.noReveal ? 'disabled' : 'enabled'} reveals`);\n\t\t},\n\t\trevealhelp: [`/mafia reveal [on|off] - Sets if roles reveal on death or not. Requires host % @ # ~`],\n\n\t\ttakeidles(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (!['on', 'off'].includes(action)) return this.parse('/help mafia takeidles');\n\t\t\tif ((action === 'off' && !game.takeIdles) || (action === 'on' && game.takeIdles)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Actions and idles are already ${game.takeIdles ? '' : 'not '}being accepted.`);\n\t\t\t}\n\t\t\tgame.takeIdles = action === 'on';\n\t\t\tgame.sendDeclare(`Actions and idles are ${game.takeIdles ? 'now' : 'no longer'} being accepted.`);\n\t\t\tgame.updatePlayers();\n\t\t},\n\t\ttakeidleshelp: [`/mafia takeidles [on|off] - Sets if idles are accepted by the script or not. Requires host % @ # ~`],\n\n\t\tresetroles: 'setroles',\n\t\tforceresetroles: 'setroles',\n\t\tforcesetroles: 'setroles',\n\t\tsetroles(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst reset = cmd.includes('reset');\n\t\t\tif (reset) {\n\t\t\t\tif (game.phase !== 'day' && game.phase !== 'night') throw new Chat.ErrorMessage(`The game has not started yet.`);\n\t\t\t} else {\n\t\t\t\tif (game.phase !== 'locked' && game.phase !== 'IDEAlocked') {\n\t\t\t\t\tthrow new Chat.ErrorMessage(\n\t\t\t\t\t\tgame.phase === 'signups' ? `You need to close signups first.` : `The game has already started.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!target) return this.parse('/help mafia setroles');\n\n\t\t\tgame.setRoles(user, target, cmd.includes('force'), reset);\n\t\t\tgame.logAction(user, `${reset ? 're' : ''}set roles`);\n\t\t},\n\t\tsetroleshelp: [\n\t\t\t`/mafia setroles [comma separated roles] - Set the roles for a game of mafia. You need to provide one role per player.`,\n\t\t\t`/mafia forcesetroles [comma separated roles] - Forcibly set the roles for a game of mafia. No role PM information or alignment will be set.`,\n\t\t\t`/mafia resetroles [comma separated roles] - Reset the roles in an ongoing game.`,\n\t\t],\n\n\t\tresetgame: 'gamereset',\n\t\tforceresetgame: 'gamereset',\n\t\tgamereset(target, room, user, connection) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (target) return this.parse('/help mafia resetgame');\n\t\t\tif (game.phase !== 'day' && game.phase !== 'night') throw new Chat.ErrorMessage(`The game has not started yet.`);\n\t\t\tif (game.IDEA.data) throw new Chat.ErrorMessage(`You cannot use this command in IDEA.`);\n\t\t\tgame.resetGame();\n\t\t\tgame.logAction(user, 'reset the game state');\n\t\t},\n\t\tresetgamehelp: [\n\t\t\t`/mafia resetgame - Resets game data. Does not change settings from the host (besides deadlines) or add/remove any players. Requires host % @ # ~`,\n\t\t],\n\n\t\tidea(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkCan('show', null, room);\n\t\t\tif (!user.can('mute', null, room) && game.hostid !== user.id && !game.cohostids.includes(user.id)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`/mafia idea - Access denied.`);\n\t\t\t}\n\t\t\tif (game.started) throw new Chat.ErrorMessage(`You cannot start an IDEA after the game has started.`);\n\t\t\tif (game.phase !== 'locked' && game.phase !== 'IDEAlocked') {\n\t\t\t\tthrow new Chat.ErrorMessage(`You need to close the signups first.`);\n\t\t\t}\n\t\t\tgame.ideaInit(user, toID(target));\n\t\t\tgame.logAction(user, `started an IDEA`);\n\t\t},\n\t\tideahelp: [\n\t\t\t`/mafia idea [idea] - starts the IDEA module [idea]. Requires + % @ # ~, voices can only start for themselves`,\n\t\t\t`/mafia ideareroll - rerolls the IDEA module. Requires host % @ # ~`,\n\t\t\t`/mafia ideapick [selection], [role] - selects a role`,\n\t\t\t`/mafia ideadiscards - shows the discarded roles`,\n\t\t],\n\n\t\tcustomidea(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.started) throw new Chat.ErrorMessage(`You cannot start an IDEA after the game has started.`);\n\t\t\tif (game.phase !== 'locked' && game.phase !== 'IDEAlocked') {\n\t\t\t\tthrow new Chat.ErrorMessage(`You need to close the signups first.`);\n\t\t\t}\n\t\t\tconst [options, roles] = Utils.splitFirst(target, '\\n');\n\t\t\tif (!options || !roles) return this.parse('/help mafia idea');\n\t\t\tconst [choicesStr, ...picks] = options.split(',').map(x => x.trim());\n\t\t\tconst choices = parseInt(choicesStr);\n\t\t\tif (!choices || choices <= picks.length) throw new Chat.ErrorMessage(`You need to have more choices than picks.`);\n\t\t\tif (picks.some((value, index, arr) => arr.indexOf(value, index + 1) > 0)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Your picks must be unique.`);\n\t\t\t}\n\t\t\tgame.customIdeaInit(user, choices, picks, roles);\n\t\t},\n\t\tcustomideahelp: [\n\t\t\t`/mafia customidea choices, picks (new line here, shift+enter)`,\n\t\t\t`(comma or newline separated rolelist) - Starts an IDEA module with custom roles. Requires % @ # ~`,\n\t\t\t`choices refers to the number of roles you get to pick from. In GI, this is 2, in GestI, this is 3.`,\n\t\t\t`picks refers to what you choose. In GI, this should be 'role', in GestI, this should be 'role, alignment'`,\n\t\t],\n\t\tideapick(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst args = target.split(',');\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tconst player = game.getPlayer(user.id);\n\t\t\tif (!player) {\n\t\t\t\treturn user.sendTo(room, '|error|You are not a player in the game.');\n\t\t\t}\n\t\t\tif (game.phase !== 'IDEApicking') {\n\t\t\t\tthrow new Chat.ErrorMessage(`The game is not in the IDEA picking phase.`);\n\t\t\t}\n\t\t\tgame.ideaPick(user, args); // TODO use player object\n\t\t},\n\n\t\tideareroll(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tgame.ideaDistributeRoles(user);\n\t\t\tgame.logAction(user, `rerolled an IDEA`);\n\t\t},\n\t\tidearerollhelp: [`/mafia ideareroll - rerolls the roles for the current IDEA module. Requires host % @ # ~`],\n\n\t\tdiscards: 'ideadiscards',\n\t\tideadiscards(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (!game.IDEA.data) throw new Chat.ErrorMessage(`There is no IDEA module in the mafia game.`);\n\t\t\tif (target) {\n\t\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\t\tif (this.meansNo(target)) {\n\t\t\t\t\tif (game.IDEA.discardsHidden) throw new Chat.ErrorMessage(`IDEA discards are already hidden.`);\n\t\t\t\t\tgame.IDEA.discardsHidden = true;\n\t\t\t\t} else if (this.meansYes(target)) {\n\t\t\t\t\tif (!game.IDEA.discardsHidden) throw new Chat.ErrorMessage(`IDEA discards are already visible.`);\n\t\t\t\t\tgame.IDEA.discardsHidden = false;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.parse('/help mafia ideadiscards');\n\t\t\t\t}\n\t\t\t\tgame.logAction(user, `${game.IDEA.discardsHidden ? 'hid' : 'unhid'} IDEA discards`);\n\t\t\t\treturn this.sendReply(`IDEA discards are now ${game.IDEA.discardsHidden ? 'hidden' : 'visible'}.`);\n\t\t\t}\n\t\t\tif (game.IDEA.discardsHidden) throw new Chat.ErrorMessage(`Discards are not visible.`);\n\t\t\tif (!game.IDEA.discardsHTML) throw new Chat.ErrorMessage(`The IDEA module does not have finalised discards yet.`);\n\t\t\tif (!this.runBroadcast()) return;\n\t\t\tthis.sendReplyBox(`<details><summary>IDEA discards:</summary>${game.IDEA.discardsHTML}</details>`);\n\t\t},\n\t\tideadiscardshelp: [\n\t\t\t`/mafia ideadiscards - shows the discarded roles`,\n\t\t\t`/mafia ideadiscards off - hides discards from the players. Requires host % @ # ~`,\n\t\t\t`/mafia ideadiscards on - shows discards to the players. Requires host % @ # ~`,\n\t\t],\n\n\t\tdaystart: 'start',\n\t\tnightstart: 'start',\n\t\tstart(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (target) {\n\t\t\t\tthis.parse(`/mafia close`);\n\t\t\t\tthis.parse(`/mafia setroles ${target}`);\n\t\t\t\tthis.parse(`/mafia ${cmd}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgame.start(user, cmd === 'daystart');\n\t\t\tgame.logAction(user, `started the game`);\n\t\t},\n\t\tstarthelp: [`/mafia start - Start the game of mafia. Signups must be closed. Requires host % @ # ~`],\n\n\t\textend: 'day',\n\t\tnight: 'day',\n\t\tday(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (cmd === 'night') {\n\t\t\t\tgame.night();\n\t\t\t} else {\n\t\t\t\tlet extension = parseInt(toID(target));\n\t\t\t\tif (isNaN(extension)) {\n\t\t\t\t\textension = 0;\n\t\t\t\t} else {\n\t\t\t\t\tif (extension < 1) extension = 1;\n\t\t\t\t\tif (extension > 10) extension = 10;\n\t\t\t\t}\n\t\t\t\tif (cmd === 'extend') {\n\t\t\t\t\tfor (const player of game.getRemainingPlayers()) {\n\t\t\t\t\t\tplayer.actionArr[game.dayNum] = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgame.day(cmd === 'extend' ? extension : null);\n\t\t\t}\n\t\t\tgame.logAction(user, `set day/night`);\n\t\t},\n\t\tdayhelp: [\n\t\t\t`/mafia day - Move to the next game day. Requires host % @ # ~`,\n\t\t\t`/mafia night - Move to the next game night. Requires host % @ # ~`,\n\t\t\t`/mafia extend (minutes) - Return to the previous game day. If (minutes) is provided, set the deadline for (minutes) minutes. Requires host % @ # ~`,\n\t\t],\n\n\t\tprod(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (game.phase !== 'night') return;\n\t\t\tfor (const player of game.getRemainingPlayers()) {\n\t\t\t\tconst playerid = Users.get(player.id);\n\t\t\t\tif (playerid?.connected && player.action === null) {\n\t\t\t\t\tplayerid.sendTo(room, `|notify|Send in an action or idle!`);\n\t\t\t\t\tplayerid.sendTo(room, `Send in an action or idle, or else you will get subbed out!`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgame.sendDeclare(`Unsubmitted players have been reminded to submit an action or idle.`);\n\t\t},\n\t\tprodhelp: [\n\t\t\t`/mafia prod - Notifies players that they must submit an action or idle if they haven't yet. Requires host % @ # ~`,\n\t\t],\n\n\t\tv: 'vote',\n\t\tvote(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkChat(null, room);\n\t\t\tconst player = game.getPlayer(user.id);\n\t\t\tif (!player || (player.isEliminated() && !player.isSpirit())) {\n\t\t\t\tthrow new Chat.ErrorMessage(`You are not in the game of ${game.title}.`);\n\t\t\t}\n\t\t\tgame.vote(player, toID(target));\n\t\t},\n\t\tvotehelp: [`/mafia vote [player|novote] - Vote the specified player or abstain from voting.`],\n\n\t\tuv: 'unvote',\n\t\tunv: 'unvote',\n\t\tunnovote: 'unvote',\n\t\tunvote(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkChat(null, room);\n\t\t\tconst player = game.getPlayer(user.id);\n\t\t\tif (!player || (player.isEliminated() && !player.isSpirit())) {\n\t\t\t\tthrow new Chat.ErrorMessage(`You are not in the game of ${game.title}.`);\n\t\t\t}\n\t\t\tgame.unvote(player);\n\t\t},\n\t\tunvotehelp: [`/mafia unvote - Withdraw your vote. Fails if you're not voting anyone`],\n\n\t\tnv: 'novote',\n\t\tnovote() {\n\t\t\tthis.parse('/mafia vote novote');\n\t\t},\n\n\t\tenableself: 'selfvote',\n\t\tselfvote(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (!action) return this.parse(`/help mafia selfvote`);\n\t\t\tif (this.meansYes(action)) {\n\t\t\t\tgame.setSelfVote(user, true);\n\t\t\t} else if (this.meansNo(action)) {\n\t\t\t\tgame.setSelfVote(user, false);\n\t\t\t} else if (action === 'hammer') {\n\t\t\t\tgame.setSelfVote(user, 'hammer');\n\t\t\t} else {\n\t\t\t\treturn this.parse(`/help mafia selfvote`);\n\t\t\t}\n\t\t\tgame.logAction(user, `changed selfvote`);\n\t\t},\n\t\tselfvotehelp: [\n\t\t\t`/mafia selfvote [on|hammer|off] - Allows players to self vote themselves either at hammer or anytime. Requires host % @ # ~`,\n\t\t],\n\n\t\ttreestump: 'kill',\n\t\tspirit: 'kill',\n\t\tspiritstump: 'kill',\n\t\tkick: 'kill',\n\t\tkill(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (game.phase === 'IDEApicking') {\n\t\t\t\tthrow new Chat.ErrorMessage(`You cannot add or remove players while IDEA roles are being picked.`); // needs to be here since eliminate doesn't pass the user\n\t\t\t}\n\t\t\tif (!target) return this.parse('/help mafia kill');\n\t\t\tconst player = game.getPlayer(toID(target));\n\t\t\tif (!player) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${target.trim()} is not a player.`);\n\t\t\t}\n\n\t\t\tlet repeat, elimType;\n\n\t\t\tswitch (cmd) {\n\t\t\tcase 'treestump':\n\t\t\t\telimType = MafiaEliminateType.TREESTUMP;\n\t\t\t\trepeat = player.isTreestump() && !player.isSpirit();\n\t\t\t\tbreak;\n\t\t\tcase 'spirit':\n\t\t\t\telimType = MafiaEliminateType.SPIRIT;\n\t\t\t\trepeat = !player.isTreestump() && player.isSpirit();\n\t\t\t\tbreak;\n\t\t\tcase 'spiritstump':\n\t\t\t\telimType = MafiaEliminateType.SPIRITSTUMP;\n\t\t\t\trepeat = player.isTreestump() && player.isSpirit();\n\t\t\t\tbreak;\n\t\t\tcase 'kick':\n\t\t\t\telimType = MafiaEliminateType.KICK;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\telimType = MafiaEliminateType.ELIMINATE;\n\t\t\t\trepeat = player.eliminated === MafiaEliminateType.ELIMINATE;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (repeat) throw new Chat.ErrorMessage(`${player.safeName} has already been ${cmd}ed.`);\n\n\t\t\tgame.eliminate(player, elimType);\n\t\t\tgame.logAction(user, `${cmd}ed ${player.safeName}`);\n\t\t},\n\t\tkillhelp: [\n\t\t\t`/mafia kill [player] - Kill a player, eliminating them from the game. Requires host % @ # ~`,\n\t\t\t`/mafia treestump [player] - Kills a player, but allows them to talk during the day still.`,\n\t\t\t`/mafia spirit [player] - Kills a player, but allows them to vote still.`,\n\t\t\t`/mafia spiritstump [player] Kills a player, but allows them to talk and vote during the day.`,\n\t\t],\n\n\t\trevealas: 'revealrole',\n\t\trevealrole(target, room, user, connection, cmd) {\n\t\t\tconst args = target.split(',');\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tlet revealAs = '';\n\t\t\tlet revealedRole = null;\n\t\t\tif (cmd === 'revealas') {\n\t\t\t\tif (!args[0]) {\n\t\t\t\t\treturn this.parse('/help mafia revealas');\n\t\t\t\t} else {\n\t\t\t\t\tconst roleName = args.pop()!.trim();\n\t\t\t\t\tif (roleName.length > MAX_ROLE_LENGTH)\n\t\t\t\t\t\treturn this.sendReply(`|error|Role exceeds the maximum role length of ${MAX_ROLE_LENGTH}.`);\n\t\t\t\t\trevealedRole = Mafia.parseRole(roleName);\n\t\t\t\t\tconst color = MafiaData.alignments[revealedRole.role.alignment].color;\n\t\t\t\t\trevealAs = `<span style=\"font-weight:bold;color:${color}\">${revealedRole.role.safeName}</span>`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!args[0]) return this.parse('/help mafia revealas');\n\t\t\tfor (const targetUsername of args) {\n\t\t\t\tconst player = game.getPlayer(toID(targetUsername));\n\t\t\t\tif (player) {\n\t\t\t\t\tgame.revealRole(user, player, `${revealAs || player.getStylizedRole()}`);\n\t\t\t\t\tgame.logAction(user, `revealed ${player.name}`);\n\t\t\t\t\tif (revealedRole) {\n\t\t\t\t\t\tgame.secretLogAction(user, `fakerevealed ${player.name} as ${revealedRole.role.name}`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.errorReply(`${targetUsername} is not a player.`);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\trevealrolehelp: [\n\t\t\t`/mafia revealrole [player] - Reveals the role of a player. Requires host % @ # ~`,\n\t\t\t`/mafia revealas [player], [role] - Fakereveals the role of a player as a certain role. Requires host % @ # ~`,\n\t\t],\n\n\t\tunidle: 'idle',\n\t\tunaction: 'idle',\n\t\tnoresponse: 'idle',\n\t\taction: 'idle',\n\t\tidle(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tconst player = game.getPlayer(user.id);\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of ${game.title}.`);\n\n\t\t\tif (player.isEliminated()) {\n\t\t\t\tthrow new Chat.ErrorMessage(`You have been eliminated from the game and cannot take any actions.`);\n\t\t\t}\n\t\t\tif (game.phase !== 'night') {\n\t\t\t\tthrow new Chat.ErrorMessage(`You can only submit an action or idle during the night phase.`);\n\t\t\t}\n\t\t\tif (!game.takeIdles) {\n\t\t\t\tthrow new Chat.ErrorMessage(`The host is not accepting idles through the script. Send your action or idle to the host.`);\n\t\t\t}\n\n\t\t\tswitch (cmd) {\n\t\t\tcase 'idle':\n\t\t\t\tplayer.action = false;\n\t\t\t\tuser.sendTo(room, `You have idled.`);\n\t\t\t\tplayer.actionArr[game.dayNum] = 'idle';\n\t\t\t\tbreak;\n\t\t\tcase 'action':\n\t\t\t\tplayer.action = true;\n\t\t\t\tif (target) {\n\t\t\t\t\tplayer.action = target;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.checkBanwords(room, target);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Your action submission contained a word banned by this room.`);\n\t\t\t\t\t}\n\t\t\t\t\tuser.sendTo(room, `You have decided to use an action, with the following details: ${target}`);\n\t\t\t\t} else {\n\t\t\t\t\tuser.sendTo(room, `You have decided to use an action. Please submit details about your action.`);\n\t\t\t\t}\n\t\t\t\tplayer.actionArr[game.dayNum] = target;\n\t\t\t\tbreak;\n\t\t\tcase 'noresponse': case 'unidle': case 'unaction':\n\t\t\t\tplayer.action = null;\n\t\t\t\tuser.sendTo(room, `You are no longer submitting an action or idle.`);\n\t\t\t\tplayer.actionArr[game.dayNum] = '';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tplayer.updateHtmlRoom();\n\t\t},\n\t\tactionhelp: 'idlehelp',\n\t\tidlehelp: [\n\t\t\t`/mafia idle - Tells the host if you are idling.`,\n\t\t\t`/mafia action [details] - Tells the host you are using an action with the given submission details.`,\n\t\t],\n\n\t\tforceadd: 'add',\n\t\tadd(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!toID(target)) return this.parse('/help mafia add');\n\t\t\tconst targetUser = Users.get(target);\n\t\t\tif (!targetUser) {\n\t\t\t\tthrow new Chat.ErrorMessage(`The user \"${target}\" was not found.`);\n\t\t\t}\n\t\t\tif (game.playerCount >= game.playerCap) {\n\t\t\t\tthrow new Chat.ErrorMessage(`The game is full. Please change the playercap first.`);\n\t\t\t}\n\t\t\tgame.join(targetUser, user, cmd === 'forceadd');\n\t\t},\n\t\taddhelp: [\n\t\t\t`/mafia add [player] - Add a new player to the game. Requires host % @ # ~`,\n\t\t],\n\n\t\trevive(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!toID(target)) return this.parse('/help mafia revive');\n\n\t\t\tconst player = game.getPlayer(toID(target));\n\t\t\tif (!player) {\n\t\t\t\tthrow new Chat.ErrorMessage(`\"${target}\" is not currently playing`);\n\t\t\t}\n\t\t\tif (!player.isEliminated()) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${player.name} has not been eliminated.`);\n\t\t\t}\n\n\t\t\tgame.revive(user, player);\n\t\t},\n\t\trevivehelp: [\n\t\t\t`/mafia revive [player] - Revives a player who was eliminated. Requires host % @ # ~`,\n\t\t],\n\n\t\tdl: 'deadline',\n\t\tdeadline(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\ttarget = toID(target);\n\t\t\tif (target && game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (target === 'off') {\n\t\t\t\tgame.setDeadline(0);\n\t\t\t} else {\n\t\t\t\tconst num = parseInt(target);\n\t\t\t\tif (isNaN(num)) {\n\t\t\t\t\t// hack to let hosts broadcast\n\t\t\t\t\tif (game.hostid === user.id || game.cohostids.includes(user.id)) {\n\t\t\t\t\t\tthis.broadcastMessage = this.message.toLowerCase().replace(/[^a-z0-9\\s!,]/g, '');\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.runBroadcast()) return false;\n\n\t\t\t\t\tif ((game.dlAt - Date.now()) > 0) {\n\t\t\t\t\t\treturn this.sendReply(`|raw|<strong>The deadline is in ${Chat.toDurationString(game.dlAt - Date.now()) || '0 seconds'}.</strong>`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.parse(`/help mafia deadline`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (num < 1 || num > 20) throw new Chat.ErrorMessage(`The deadline must be between 1 and 20 minutes.`);\n\t\t\t\tgame.setDeadline(num);\n\t\t\t}\n\t\t\tgame.logAction(user, `changed deadline`);\n\t\t},\n\t\tdeadlinehelp: [\n\t\t\t`/mafia deadline [minutes|off] - Sets or removes the deadline for the game. Cannot be more than 20 minutes.`,\n\t\t],\n\n\t\tapplyvotemodifier: 'applyhammermodifier',\n\t\tapplyhammermodifier(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\t\t\tconst [playerId, mod] = target.split(',');\n\t\t\tconst player = game.getPlayer(toID(playerId));\n\t\t\tif (!player) {\n\t\t\t\tthrow new Chat.ErrorMessage(`The player \"${playerId}\" does not exist.`);\n\t\t\t}\n\n\t\t\tif (cmd === 'applyhammermodifier') {\n\t\t\t\tgame.applyHammerModifier(user, player, parseInt(mod));\n\t\t\t\tgame.secretLogAction(user, `changed a hammer modifier`);\n\t\t\t} else {\n\t\t\t\tgame.applyVoteModifier(user, player, parseInt(mod));\n\t\t\t\tgame.secretLogAction(user, `changed a vote modifier`);\n\t\t\t}\n\t\t},\n\t\tclearvotemodifiers: 'clearhammermodifiers',\n\t\tclearhammermodifiers(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\t\t\tif (cmd === 'clearhammermodifiers') {\n\t\t\t\tgame.clearHammerModifiers(user);\n\t\t\t\tgame.secretLogAction(user, `cleared hammer modifiers`);\n\t\t\t} else {\n\t\t\t\tgame.clearVoteModifiers(user);\n\t\t\t\tgame.secretLogAction(user, `cleared vote modifiers`);\n\t\t\t}\n\t\t},\n\n\t\thate: 'love',\n\t\tunhate: 'love',\n\t\tunlove: 'love',\n\t\tremovehammermodifier: 'love',\n\t\tlove(target, room, user, connection, cmd) {\n\t\t\tlet mod;\n\t\t\tswitch (cmd) {\n\t\t\tcase 'hate':\n\t\t\t\tmod = -1;\n\t\t\t\tbreak;\n\t\t\tcase 'love':\n\t\t\t\tmod = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'unhate': case 'unlove': case 'removehammermodifier':\n\t\t\t\tmod = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.parse(`/mafia applyhammermodifier ${target}, ${mod}`);\n\t\t},\n\t\tdoublevoter: 'mayor',\n\t\tvoteless: 'mayor',\n\t\tunvoteless: 'mayor',\n\t\tunmayor: 'mayor',\n\t\tremovevotemodifier: 'mayor',\n\t\tmayor(target, room, user, connection, cmd) {\n\t\t\tlet mod;\n\t\t\tswitch (cmd) {\n\t\t\tcase 'doublevoter': case 'mayor':\n\t\t\t\tmod = 2;\n\t\t\t\tbreak;\n\t\t\tcase 'voteless':\n\t\t\t\tmod = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'unvoteless': case 'unmayor': case 'removevotemodifier':\n\t\t\t\tmod = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.parse(`/mafia applyvotemodifier ${target}, ${mod}`);\n\t\t},\n\n\t\tunsilence: 'silence',\n\t\tsilence(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\n\t\t\ttarget = toID(target);\n\t\t\tconst targetPlayer = game.getPlayer(target as ID);\n\t\t\tconst silence = cmd === 'silence';\n\t\t\tif (!targetPlayer) throw new Chat.ErrorMessage(`${target} is not in the game of mafia.`);\n\t\t\tif (silence === targetPlayer.silenced) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetPlayer.name} is already ${!silence ? 'not' : ''} silenced.`);\n\t\t\t}\n\t\t\ttargetPlayer.silenced = silence;\n\t\t\tthis.sendReply(`${targetPlayer.name} has been ${!silence ? 'un' : ''}silenced.`);\n\t\t\tgame.logAction(user, `${!silence ? 'un' : ''}silenced a player`);\n\t\t},\n\t\tsilencehelp: [\n\t\t\t`/mafia silence [player] - Silences [player], preventing them from talking at all. Requires host % @ # ~`,\n\t\t\t`/mafia unsilence [player] - Removes a silence on [player], allowing them to talk again. Requires host % @ # ~`,\n\t\t],\n\n\t\tinsomniac: 'nighttalk',\n\t\tuninsomniac: 'nighttalk',\n\t\tunnighttalk: 'nighttalk',\n\t\tnighttalk(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\n\t\t\ttarget = toID(target);\n\t\t\tconst targetPlayer = game.getPlayer(target as ID);\n\t\t\tconst nighttalk = !cmd.startsWith('un');\n\t\t\tif (!targetPlayer) throw new Chat.ErrorMessage(`${target} is not in the game of mafia.`);\n\t\t\tif (nighttalk === targetPlayer.nighttalk) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetPlayer.name} is already ${!nighttalk ? 'not' : ''} able to talk during the night.`);\n\t\t\t}\n\t\t\ttargetPlayer.nighttalk = nighttalk;\n\t\t\tthis.sendReply(`${targetPlayer.name} can ${!nighttalk ? 'no longer' : 'now'} talk during the night.`);\n\t\t\tgame.logAction(user, `${!nighttalk ? 'un' : ''}insomniacd a player`);\n\t\t},\n\t\tnighttalkhelp: [\n\t\t\t`/mafia nighttalk [player] - Makes [player] an insomniac, allowing them to talk freely during the night. Requires host % @ # ~`,\n\t\t\t`/mafia unnighttalk [player] - Removes [player] as an insomniac, preventing them from talking during the night. Requires host % @ # ~`,\n\t\t],\n\t\tactor: 'priest',\n\t\tunactor: 'priest',\n\t\tunpriest: 'priest',\n\t\tpriest(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\n\t\t\ttarget = toID(target);\n\t\t\tconst targetPlayer = game.getPlayer(target as ID);\n\t\t\tif (!targetPlayer) throw new Chat.ErrorMessage(`${target} is not in the game of mafia.`);\n\n\t\t\tconst actor = cmd.endsWith('actor');\n\t\t\tconst remove = cmd.startsWith('un');\n\t\t\tif (remove) {\n\t\t\t\tif (targetPlayer.hammerRestriction === null) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`${targetPlayer.name} already has no voting restrictions.`);\n\t\t\t\t}\n\t\t\t\tif (actor !== targetPlayer.hammerRestriction) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`${targetPlayer.name} is ${targetPlayer.hammerRestriction ? 'an actor' : 'a priest'}.`);\n\t\t\t\t}\n\t\t\t\ttargetPlayer.hammerRestriction = null;\n\t\t\t\treturn this.sendReply(`${targetPlayer}'s hammer restriction was removed.`);\n\t\t\t}\n\n\t\t\tif (actor === targetPlayer.hammerRestriction) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetPlayer.name} is already ${targetPlayer.hammerRestriction ? 'an actor' : 'a priest'}.`);\n\t\t\t}\n\t\t\ttargetPlayer.hammerRestriction = actor;\n\t\t\tthis.sendReply(`${targetPlayer.name} is now ${targetPlayer.hammerRestriction ? \"an actor (can only hammer)\" : \"a priest (can't hammer)\"}.`);\n\t\t\tif (actor) {\n\t\t\t\t// target is an actor, remove their vote because it's now impossible\n\t\t\t\tgame.unvote(targetPlayer, true);\n\t\t\t}\n\t\t\tgame.logAction(user, `made a player actor/priest`);\n\t\t},\n\t\tpriesthelp: [\n\t\t\t`/mafia (un)priest [player] - Makes [player] a priest, preventing them from placing the hammer vote. Requires host % @ # ~`,\n\t\t\t`/mafia (un)actor [player] - Makes [player] an actor, preventing them from placing non-hammer votes. Requires host % @ # ~`,\n\t\t],\n\n\t\tshifthammer: 'hammer',\n\t\tresethammer: 'hammer',\n\t\thammer(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started yet.`);\n\t\t\tconst hammer = parseInt(target);\n\t\t\tif (toID(cmd) !== `resethammer` && ((isNaN(hammer) && !this.meansNo(target)) || hammer < 1)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${target} is not a valid hammer count.`);\n\t\t\t}\n\t\t\tswitch (cmd.toLowerCase()) {\n\t\t\tcase 'shifthammer':\n\t\t\t\tgame.shiftHammer(hammer);\n\t\t\t\tbreak;\n\t\t\tcase 'hammer':\n\t\t\t\tgame.setHammer(hammer);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tgame.resetHammer();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tgame.logAction(user, `changed the hammer`);\n\t\t},\n\t\thammerhelp: [\n\t\t\t`/mafia hammer [hammer] - sets the hammer count to [hammer] and resets votes`,\n\t\t\t`/mafia hammer off - disables hammering`,\n\t\t\t`/mafia shifthammer [hammer] - sets the hammer count to [hammer] without resetting votes`,\n\t\t\t`/mafia resethammer - sets the hammer to the default, resetting votes`,\n\t\t],\n\n\t\tvl: 'votelock',\n\t\tvotelock(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (this.meansYes(action)) {\n\t\t\t\tgame.setVotelock(user, true);\n\t\t\t} else if (this.meansNo(action)) {\n\t\t\t\tgame.setVotelock(user, false);\n\t\t\t} else {\n\t\t\t\treturn this.parse('/help mafia votelock');\n\t\t\t}\n\t\t\tgame.logAction(user, `changed votelock status`);\n\t\t},\n\t\tvotelockhelp: [\n\t\t\t`/mafia votelock [on|off] - Allows or disallows players to change their vote. Requires host % @ # ~`,\n\t\t],\n\n\t\tvoting: 'votesall',\n\t\tvotesall(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tconst action = toID(target);\n\t\t\tif (this.meansYes(action)) {\n\t\t\t\tgame.setVoting(user, true);\n\t\t\t} else if (this.meansNo(action)) {\n\t\t\t\tgame.setVoting(user, false);\n\t\t\t} else {\n\t\t\t\treturn this.parse('/help mafia voting');\n\t\t\t}\n\t\t\tgame.logAction(user, `changed voting status`);\n\t\t},\n\t\tvotinghelp: [\n\t\t\t`/mafia voting [on|off] - Allows or disallows players to vote. Requires host % @ # ~`,\n\t\t],\n\n\t\tenablenv: 'enablenl',\n\t\tdisablenv: 'enablenl',\n\t\tdisablenl: 'enablenl',\n\t\tenablenl(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (cmd === 'enablenl' || cmd === 'enablenv') {\n\t\t\t\tgame.setNoVote(user, true);\n\t\t\t} else {\n\t\t\t\tgame.setNoVote(user, false);\n\t\t\t}\n\t\t\tgame.logAction(user, `changed novote status`);\n\t\t},\n\t\tenablenlhelp: [\n\t\t\t`/mafia [enablenv|disablenv] - Allows or disallows players abstain from voting. Requires host % @ # ~`,\n\t\t],\n\n\t\tforcevote(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\ttarget = toID(target);\n\t\t\tif (this.meansYes(target)) {\n\t\t\t\tif (game.forceVote) throw new Chat.ErrorMessage(`Forcevoting is already enabled.`);\n\t\t\t\tgame.forceVote = true;\n\t\t\t\tif (game.started) game.resetHammer();\n\t\t\t\tgame.sendDeclare(`Forcevoting has been enabled. Your vote will start on yourself, and you cannot unvote!`);\n\t\t\t} else if (this.meansNo(target)) {\n\t\t\t\tif (!game.forceVote) throw new Chat.ErrorMessage(`Forcevoting is already disabled.`);\n\t\t\t\tgame.forceVote = false;\n\t\t\t\tgame.sendDeclare(`Forcevoting has been disabled. You can vote normally now!`);\n\t\t\t} else {\n\t\t\t\tthis.parse('/help mafia forcevote');\n\t\t\t}\n\t\t\tgame.logAction(user, `changed forcevote status`);\n\t\t},\n\t\tforcevotehelp: [\n\t\t\t`/mafia forcevote [yes/no] - Forces players' votes onto themselves, and prevents unvoting. Requires host % @ # ~`,\n\t\t],\n\n\t\tvotes(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game of mafia has not started yet.`);\n\n\t\t\t// hack to let hosts broadcast\n\t\t\tif (game.hostid === user.id || game.cohostids.includes(user.id)) {\n\t\t\t\tthis.broadcastMessage = this.message.toLowerCase().replace(/[^a-z0-9\\s!,]/g, '');\n\t\t\t}\n\t\t\tif (!this.runBroadcast()) return false;\n\n\t\t\tthis.sendReplyBox(game.voteBox());\n\t\t},\n\n\t\tpl: 'players',\n\t\tplayers(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\n\t\t\t// hack to let hosts broadcast\n\t\t\tif (game.hostid === user.id || game.cohostids.includes(user.id)) {\n\t\t\t\tthis.broadcastMessage = this.message.toLowerCase().replace(/[^a-z0-9\\s!,]/g, '');\n\t\t\t}\n\t\t\tif (!this.runBroadcast()) return false;\n\n\t\t\tif (this.broadcasting) {\n\t\t\t\tgame.sendPlayerList();\n\t\t\t} else {\n\t\t\t\tconst players = game.getRemainingPlayers();\n\t\t\t\tthis.sendReplyBox(`Players (${players.length}): ${players.map(p => p.safeName).sort().join(', ')}`);\n\t\t\t}\n\t\t},\n\n\t\toriginalrolelist: 'rolelist',\n\t\torl: 'rolelist',\n\t\trl: 'rolelist',\n\t\trolelist(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.closedSetup) throw new Chat.ErrorMessage(`You cannot show roles in a closed setup.`);\n\t\t\tif (!this.runBroadcast()) return false;\n\t\t\tif (game.IDEA.data) {\n\t\t\t\tconst buf = `<details><summary>IDEA roles:</summary>${game.IDEA.data.roles.join(`<br />`)}</details>`;\n\t\t\t\treturn this.sendReplyBox(buf);\n\t\t\t}\n\t\t\tconst showOrl = (['orl', 'originalrolelist'].includes(cmd) || game.noReveal);\n\t\t\tconst roleString = Utils.sortBy((showOrl ? game.originalRoles : game.roles), role => (\n\t\t\t\trole.alignment\n\t\t\t)).map(role => role.safeName).join(', ');\n\n\t\t\tthis.sendReplyBox(`${showOrl ? `Original Rolelist: ` : `Rolelist: `}${roleString}`);\n\t\t},\n\n\t\tplayerroles(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Only the host can view roles.`);\n\t\t\t}\n\t\t\tif (!game.started) throw new Chat.ErrorMessage(`The game has not started.`);\n\t\t\tthis.sendReplyBox(game.players.map(\n\t\t\t\tp => `${p.safeName}: ${p.role ? (p.role.alignment === 'solo' ? 'Solo ' : '') + p.role.safeName : 'No role'}`\n\t\t\t).join('<br/>'));\n\t\t},\n\n\t\tspectate: 'view',\n\t\tview(target, room, user, connection) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.requireGame(Mafia);\n\t\t\tif (!this.runBroadcast()) return;\n\t\t\tif (this.broadcasting) {\n\t\t\t\treturn this.sendReplyBox(`<button name=\"joinRoom\" value=\"view-mafia-${room.roomid}\" class=\"button\"><strong>Spectate the game</strong></button>`);\n\t\t\t}\n\t\t\treturn this.parse(`/join view-mafia-${room.roomid}`);\n\t\t},\n\n\t\trefreshvotes(target, room, user, connection) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tconst votes = game.voteBoxFor(user.id);\n\t\t\tuser.send(`>view-mafia-${game.room.roomid}\\n|selectorhtml|#mafia-votes|` + votes);\n\t\t},\n\t\tforcesub: 'sub',\n\t\tsub(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tconst args = target.split(',');\n\t\t\tconst action = toID(args.shift());\n\t\t\tconst player = game.getPlayer(user.id);\n\n\t\t\tswitch (action) {\n\t\t\tcase 'in':\n\t\t\t\tif (player) {\n\t\t\t\t\t// Check if they have requested to be subbed out.\n\t\t\t\t\tif (!game.requestedSub.includes(user.id)) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`You have not requested to be subbed out.`);\n\t\t\t\t\t}\n\t\t\t\t\tgame.requestedSub.splice(game.requestedSub.indexOf(user.id), 1);\n\t\t\t\t\tthis.errorReply(`You have cancelled your request to sub out.`);\n\t\t\t\t\tplayer.updateHtmlRoom();\n\t\t\t\t} else {\n\t\t\t\t\tthis.checkChat(null, room);\n\t\t\t\t\tif (game.subs.includes(user.id)) throw new Chat.ErrorMessage(`You are already on the sub list.`);\n\t\t\t\t\tif (game.played.includes(user.id)) throw new Chat.ErrorMessage(`You cannot sub back into the game.`);\n\t\t\t\t\t// Change this to game.canJoin(user, true, true) if you're trying to test something sub related locally.\n\t\t\t\t\tgame.canJoin(user, true);\n\t\t\t\t\tgame.subs.push(user.id);\n\t\t\t\t\tgame.nextSub();\n\t\t\t\t\t// Update spectator's view\n\t\t\t\t\tthis.parse(`/join view-mafia-${room.roomid}`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'out':\n\t\t\t\tif (player) {\n\t\t\t\t\tif (player.isEliminated()) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`You cannot request to be subbed out once eliminated.`);\n\t\t\t\t\t}\n\t\t\t\t\tif (game.requestedSub.includes(user.id)) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`You have already requested to be subbed out.`);\n\t\t\t\t\t}\n\t\t\t\t\tgame.requestedSub.push(user.id);\n\t\t\t\t\tplayer.updateHtmlRoom();\n\t\t\t\t\tgame.nextSub();\n\t\t\t\t} else {\n\t\t\t\t\tif (game.hostid === user.id || game.cohostids.includes(user.id)) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`The host cannot sub out of the game.`);\n\t\t\t\t\t}\n\t\t\t\t\tif (!game.subs.includes(user.id)) throw new Chat.ErrorMessage(`You are not on the sub list.`);\n\t\t\t\t\tgame.subs.splice(game.subs.indexOf(user.id), 1);\n\t\t\t\t\t// Update spectator's view\n\t\t\t\t\tthis.parse(`/join view-mafia-${room.roomid}`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'next':\n\t\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\t\tconst toSub = args.shift();\n\t\t\t\tif (!game.getPlayer(toID(toSub))) throw new Chat.ErrorMessage(`${toSub} is not in the game.`);\n\t\t\t\tif (!game.subs.length) {\n\t\t\t\t\tif (game.hostRequestedSub.includes(toID(toSub))) {\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`${toSub} is already on the list to be subbed out.`);\n\t\t\t\t\t}\n\t\t\t\t\tuser.sendTo(\n\t\t\t\t\t\troom,\n\t\t\t\t\t\t`|error|There are no subs to replace ${toSub}, they will be subbed if a sub is available before they speak next.`\n\t\t\t\t\t);\n\t\t\t\t\tgame.hostRequestedSub.unshift(toID(toSub));\n\t\t\t\t} else {\n\t\t\t\t\tgame.nextSub(toID(toSub));\n\t\t\t\t}\n\t\t\t\tgame.logAction(user, `requested a sub for a player`);\n\t\t\t\tbreak;\n\t\t\tcase 'remove':\n\t\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\t\tfor (const toRemove of args) {\n\t\t\t\t\tconst toRemoveIndex = game.subs.indexOf(toID(toRemove));\n\t\t\t\t\tif (toRemoveIndex === -1) {\n\t\t\t\t\t\tuser.sendTo(room, `|error|${toRemove} is not on the sub list.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tgame.subs.splice(toRemoveIndex, 1);\n\t\t\t\t\tuser.sendTo(room, `${toRemove} has been removed from the sublist`);\n\t\t\t\t\tgame.logAction(user, `removed a player from the sublist`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'unrequest':\n\t\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\t\tconst toUnrequest = toID(args.shift());\n\t\t\t\tconst userIndex = game.requestedSub.indexOf(toUnrequest);\n\t\t\t\tconst hostIndex = game.hostRequestedSub.indexOf(toUnrequest);\n\t\t\t\tif (userIndex < 0 && hostIndex < 0) return user.sendTo(room, `|error|${toUnrequest} is not requesting a sub.`);\n\t\t\t\tif (userIndex > -1) {\n\t\t\t\t\tgame.requestedSub.splice(userIndex, 1);\n\t\t\t\t\tuser.sendTo(room, `${toUnrequest}'s sub request has been removed.`);\n\t\t\t\t}\n\t\t\t\tif (hostIndex > -1) {\n\t\t\t\t\tgame.hostRequestedSub.splice(userIndex, 1);\n\t\t\t\t\tuser.sendTo(room, `${toUnrequest} has been removed from the host sublist.`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\t\tconst toSubOut = game.getPlayer(action);\n\t\t\t\tconst toSubIn = toID(args.shift());\n\t\t\t\tif (!toSubOut) throw new Chat.ErrorMessage(`${toSubOut} is not in the game.`);\n\n\t\t\t\tconst targetUser = Users.get(toSubIn);\n\t\t\t\tif (!targetUser) throw new Chat.ErrorMessage(`The user \"${toSubIn}\" was not found.`);\n\t\t\t\tgame.canJoin(targetUser, false, cmd === 'forcesub');\n\t\t\t\tif (game.subs.includes(targetUser.id)) {\n\t\t\t\t\tgame.subs.splice(game.subs.indexOf(targetUser.id), 1);\n\t\t\t\t}\n\t\t\t\tif (game.hostRequestedSub.includes(toSubOut.id)) {\n\t\t\t\t\tgame.hostRequestedSub.splice(game.hostRequestedSub.indexOf(toSubOut.id), 1);\n\t\t\t\t}\n\t\t\t\tif (game.requestedSub.includes(toSubOut.id)) {\n\t\t\t\t\tgame.requestedSub.splice(game.requestedSub.indexOf(toSubOut.id), 1);\n\t\t\t\t}\n\n\t\t\t\tgame.sub(toSubOut, targetUser);\n\t\t\t\tgame.logAction(user, `substituted a player`);\n\t\t\t}\n\t\t},\n\t\tsubhelp: [\n\t\t\t`/mafia sub in - Request to sub into the game, or cancel a request to sub out.`,\n\t\t\t`/mafia sub out - Request to sub out of the game, or cancel a request to sub in.`,\n\t\t\t`/mafia sub next, [player] - Forcibly sub [player] out of the game. Requires host % @ # ~`,\n\t\t\t`/mafia sub remove, [user] - Remove [user] from the sublist. Requres host % @ # ~`,\n\t\t\t`/mafia sub unrequest, [player] - Remove's a player's request to sub out of the game. Requires host % @ # ~`,\n\t\t\t`/mafia sub [player], [user] - Forcibly sub [player] for [user]. Requires host % @ # ~`,\n\t\t],\n\n\t\tautosub(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('mute', null, room);\n\t\t\tif (this.meansYes(toID(target))) {\n\t\t\t\tif (game.autoSub) throw new Chat.ErrorMessage(`Automatic subbing of players is already enabled.`);\n\t\t\t\tgame.autoSub = true;\n\t\t\t\tuser.sendTo(room, `Automatic subbing of players has been enabled.`);\n\t\t\t\tgame.nextSub();\n\t\t\t} else if (this.meansNo(toID(target))) {\n\t\t\t\tif (!game.autoSub) throw new Chat.ErrorMessage(`Automatic subbing of players is already disabled.`);\n\t\t\t\tgame.autoSub = false;\n\t\t\t\tuser.sendTo(room, `Automatic subbing of players has been disabled.`);\n\t\t\t} else {\n\t\t\t\treturn this.parse(`/help mafia autosub`);\n\t\t\t}\n\t\t\tgame.logAction(user, `changed autosub status`);\n\t\t},\n\t\tautosubhelp: [\n\t\t\t`/mafia autosub [yes|no] - Sets if players will automatically sub out if a user is on the sublist. Requires host % @ # ~`,\n\t\t],\n\n\t\tcohost: 'subhost',\n\t\tsubhost(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkChat();\n\t\t\tif (!target) return this.parse(`/help mafia ${cmd}`);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst { targetUser } = this.requireUser(target);\n\t\t\tif (!room.users[targetUser.id]) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUser.name} is not in this room, and cannot be hosted.`);\n\t\t\t}\n\t\t\tif (game.hostid === targetUser.id) throw new Chat.ErrorMessage(`${targetUser.name} is already the host.`);\n\t\t\tif (game.cohostids.includes(targetUser.id)) throw new Chat.ErrorMessage(`${targetUser.name} is already a cohost.`);\n\n\t\t\tif (game.getPlayer(targetUser.id)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUser.name} cannot become a host because they are playing.`);\n\t\t\t}\n\n\t\t\tif (Mafia.isHostBanned(room, targetUser)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${targetUser.name} is banned from hosting mafia games.`);\n\t\t\t}\n\n\t\t\tif (game.subs.includes(targetUser.id)) game.subs.splice(game.subs.indexOf(targetUser.id), 1);\n\t\t\tif (cmd.includes('cohost')) {\n\t\t\t\tgame.cohostids.push(targetUser.id);\n\t\t\t\tgame.cohosts.push(Utils.escapeHTML(targetUser.name));\n\t\t\t\tgame.sendDeclare(Utils.html`${targetUser.name} has been added as a cohost by ${user.name}`);\n\t\t\t\tfor (const conn of targetUser.connections) {\n\t\t\t\t\tvoid Chat.resolvePage(`view-mafia-${room.roomid}`, targetUser, conn);\n\t\t\t\t}\n\t\t\t\tthis.modlog('MAFIACOHOST', targetUser, null, { noalts: true, noip: true });\n\t\t\t} else {\n\t\t\t\tconst oldHostid = game.hostid;\n\t\t\t\tconst oldHost = Users.get(game.hostid);\n\t\t\t\tif (oldHost) oldHost.send(`>view-mafia-${room.roomid}\\n|deinit`);\n\t\t\t\tconst queueIndex = hostQueue.indexOf(targetUser.id);\n\t\t\t\tif (queueIndex > -1) hostQueue.splice(queueIndex, 1);\n\t\t\t\tgame.host = Utils.escapeHTML(targetUser.name);\n\t\t\t\tgame.hostid = targetUser.id;\n\t\t\t\tgame.played.push(targetUser.id);\n\t\t\t\tfor (const conn of targetUser.connections) {\n\t\t\t\t\tvoid Chat.resolvePage(`view-mafia-${room.roomid}`, targetUser, conn);\n\t\t\t\t}\n\t\t\t\tgame.sendDeclare(Utils.html`${targetUser.name} has been substituted as the new host, replacing ${oldHostid}.`);\n\t\t\t\tthis.modlog('MAFIASUBHOST', targetUser, `replacing ${oldHostid}`, { noalts: true, noip: true });\n\t\t\t}\n\t\t},\n\t\tsubhosthelp: [`/mafia subhost [user] - Substitutes the user as the new game host.`],\n\t\tcohosthelp: [\n\t\t\t`/mafia cohost [user] - Adds the user as a cohost. Cohosts can talk during the game, as well as perform host actions.`,\n\t\t],\n\n\t\tuncohost: 'removecohost',\n\t\tremovecohost(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tthis.checkChat();\n\t\t\tif (!target) return this.parse('/help mafia subhost');\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst targetID = toID(target);\n\n\t\t\tconst cohostIndex = game.cohostids.indexOf(targetID);\n\t\t\tif (cohostIndex < 0) {\n\t\t\t\tif (game.hostid === targetID) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`${target} is the host, not a cohost. Use /mafia subhost to replace them.`);\n\t\t\t\t}\n\t\t\t\tthrow new Chat.ErrorMessage(`${target} is not a cohost.`);\n\t\t\t}\n\t\t\tgame.cohostids.splice(cohostIndex, 1);\n\t\t\tgame.sendDeclare(Utils.html`${target} was removed as a cohost by ${user.name}`);\n\t\t\tthis.modlog('MAFIAUNCOHOST', target, null, { noalts: true, noip: true });\n\t\t},\n\n\t\tend(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Mafia);\n\t\t\tif (game.hostid !== user.id && !game.cohostids.includes(user.id)) this.checkCan('show', null, room);\n\t\t\tgame.end();\n\t\t\tthis.modlog('MAFIAEND', null);\n\t\t},\n\t\tendhelp: [`/mafia end - End the current game of mafia. Requires host + % @ # ~`],\n\n\t\trole: 'data',\n\t\talignment: 'data',\n\t\ttheme: 'data',\n\t\tterm: 'data',\n\t\tdt: 'data',\n\t\tdata(target, room, user, connection, cmd) {\n\t\t\tif (room?.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tif (cmd === 'role' && !target && room) {\n\t\t\t\t// Support /mafia role showing your current role if you're in a game\n\t\t\t\tconst game = room.getGame(Mafia);\n\t\t\t\tif (!game) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`There is no game of mafia running in this room. If you meant to display information about a role, use /mafia role [role name]`);\n\t\t\t\t}\n\n\t\t\t\tconst player = game.getPlayer(user.id);\n\t\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of ${game.title}.`);\n\t\t\t\tconst role = player.role;\n\t\t\t\tif (!role) throw new Chat.ErrorMessage(`You do not have a role yet.`);\n\t\t\t\treturn this.sendReplyBox(`Your role is: ${role.safeName}`);\n\t\t\t}\n\n\t\t\t// hack to let hosts broadcast\n\t\t\tconst game = room?.getGame(Mafia);\n\t\t\tif (game && (game.hostid === user.id || game.cohostids.includes(user.id))) {\n\t\t\t\tthis.broadcastMessage = this.message.toLowerCase().replace(/[^a-z0-9\\s!,]/g, '');\n\t\t\t}\n\t\t\tif (!this.runBroadcast()) return false;\n\n\t\t\tif (!target) return this.parse(`/help mafia data`);\n\n\t\t\ttarget = toID(target);\n\t\t\tif (target in MafiaData.aliases) target = MafiaData.aliases[target];\n\n\t\t\tlet result: MafiaDataAlignment | MafiaDataRole | MafiaDataTheme | MafiaDataIDEA | MafiaDataTerm | null = null;\n\t\t\tlet dataType = cmd;\n\n\t\t\tconst cmdTypes: { [k: string]: keyof MafiaData } = {\n\t\t\t\trole: 'roles', alignment: 'alignments', theme: 'themes', term: 'terms', idea: 'IDEAs',\n\t\t\t};\n\n\t\t\tif (cmd in cmdTypes) {\n\t\t\t\tconst toSearch = MafiaData[cmdTypes[cmd]];\n\t\t\t\t// @ts-expect-error guaranteed not an alias\n\t\t\t\tresult = toSearch[target];\n\t\t\t} else {\n\t\t\t\t// search everything\n\t\t\t\tfor (const [cmdType, dataKey] of Object.entries(cmdTypes)) {\n\t\t\t\t\tif (target in MafiaData[dataKey]) {\n\t\t\t\t\t\t// @ts-expect-error guaranteed not an alias\n\t\t\t\t\t\tresult = MafiaData[dataKey][target];\n\t\t\t\t\t\tdataType = cmdType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!result) throw new Chat.ErrorMessage(`\"${target}\" is not a valid mafia alignment, role, theme, or IDEA.`);\n\n\t\t\t// @ts-expect-error property access\n\t\t\tlet buf = `<h3${result.color ? ` style=\"color: ${result.color}\"` : ``}>${result.name}</h3><b>Type</b>: ${dataType}<br/>`;\n\t\t\tif (dataType === 'theme') {\n\t\t\t\tif ((result as MafiaDataTheme).desc) {\n\t\t\t\t\tbuf += `<b>Description</b>: ${(result as MafiaDataTheme).desc}<br/><details><summary class=\"button\" style=\"font-weight: bold; display: inline-block\">Setups:</summary>`;\n\t\t\t\t}\n\t\t\t\tfor (const i in result) {\n\t\t\t\t\tconst num = parseInt(i);\n\t\t\t\t\tif (isNaN(num)) continue;\n\t\t\t\t\tbuf += `${i}: `;\n\t\t\t\t\tconst count: { [k: string]: number } = {};\n\t\t\t\t\tconst roles = [];\n\t\t\t\t\tfor (const role of (result as MafiaDataTheme)[num].split(',').map((x: string) => x.trim())) {\n\t\t\t\t\t\tcount[role] = count[role] ? count[role] + 1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const role in count) {\n\t\t\t\t\t\troles.push(count[role] > 1 ? `${count[role]}x ${role}` : role);\n\t\t\t\t\t}\n\t\t\t\t\tbuf += `${roles.join(', ')}<br/>`;\n\t\t\t\t}\n\t\t\t} else if (dataType === 'idea') {\n\t\t\t\tif ((result as MafiaDataIDEA).picks && (result as MafiaDataIDEA).choices) {\n\t\t\t\t\tbuf += `<b>Number of Picks</b>: ${(result as MafiaDataIDEA).picks.length} (${(result as MafiaDataIDEA).picks.join(', ')})<br/>`;\n\t\t\t\t\tbuf += `<b>Number of Choices</b>: ${(result as MafiaDataIDEA).choices}<br/>`;\n\t\t\t\t}\n\t\t\t\tbuf += `<details><summary class=\"button\" style=\"font-weight: bold; display: inline-block\">Roles:</summary>`;\n\t\t\t\tfor (const idearole of (result as MafiaDataIDEA).roles) {\n\t\t\t\t\tbuf += `${idearole}<br/>`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (result.memo) buf += `${result.memo.join('<br/>')}`;\n\t\t\t}\n\t\t\treturn this.sendReplyBox(buf);\n\t\t},\n\t\tdatahelp: [\n\t\t\t`/mafia data [alignment|role|modifier|theme|term] - Get information on a mafia alignment, role, modifier, theme, or term.`,\n\t\t],\n\n\t\twinfaction: 'win',\n\t\tunwinfaction: 'win',\n\t\tunwin: 'win',\n\t\twin(target, room, user, connection, cmd) {\n\t\t\tconst isUnwin = cmd.startsWith('unwin');\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tif (!room || room.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst args = target.split(',');\n\t\t\tlet points = parseInt(args[0]);\n\t\t\tif (isUnwin) {\n\t\t\t\tpoints *= -1;\n\t\t\t}\n\t\t\tif (isNaN(points)) {\n\t\t\t\tpoints = 10;\n\t\t\t\tif (isUnwin) {\n\t\t\t\t\tpoints *= -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (points > 100 || points < -100) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`You cannot give or take more than 100 points at a time.`);\n\t\t\t\t}\n\t\t\t\t// shift out the point count\n\t\t\t\targs.shift();\n\t\t\t}\n\t\t\tif (!args.length) return this.parse('/help mafia win');\n\t\t\tconst month = new Date().toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\t\t\tif (!logs.leaderboard[month]) logs.leaderboard[month] = {};\n\n\t\t\tlet toGiveTo = [];\n\t\t\tlet buf = `${points < 0 ? points * -1 : points} point${Chat.plural(points, 's were', ' was')} ${points <= 0 ? 'taken from ' : 'awarded to '} `;\n\t\t\tif (cmd === 'winfaction' || cmd === 'unwinfaction') {\n\t\t\t\tconst game = this.requireGame(Mafia);\n\t\t\t\tfor (let faction of args) {\n\t\t\t\t\tfaction = toID(faction);\n\t\t\t\t\tconst inFaction = [];\n\t\t\t\t\tfor (const player of game.players) {\n\t\t\t\t\t\tif (player.role && toID(player.role.alignment) === faction) {\n\t\t\t\t\t\t\ttoGiveTo.push(player.id);\n\t\t\t\t\t\t\tinFaction.push(player.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (inFaction.length) buf += ` the ${faction} faction: ${inFaction.join(', ')};`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttoGiveTo = args;\n\t\t\t\tbuf += toGiveTo.join(', ');\n\t\t\t}\n\t\t\tif (!toGiveTo.length) return this.parse('/help mafia win');\n\t\t\tlet gavePoints = false;\n\t\t\tfor (let u of toGiveTo) {\n\t\t\t\tu = toID(u);\n\t\t\t\tif (!u) continue;\n\t\t\t\tif (!gavePoints) gavePoints = true;\n\t\t\t\tif (!logs.leaderboard[month][u]) logs.leaderboard[month][u] = 0;\n\t\t\t\tlogs.leaderboard[month][u] += points;\n\t\t\t\tif (logs.leaderboard[month][u] === 0) delete logs.leaderboard[month][u];\n\t\t\t}\n\t\t\tif (!gavePoints) return this.parse('/help mafia win');\n\t\t\twriteFile(LOGS_FILE, logs);\n\t\t\tthis.modlog(`MAFIAPOINTS`, null, `${points < 0 ? points * -1 : points} points were ${points < 0 ? 'taken from' : 'awarded to'} ${Chat.toListString(toGiveTo)}`);\n\t\t\troom.add(buf).update();\n\t\t},\n\t\twinhelp: [\n\t\t\t`/mafia (un)win (points), [user1], [user2], [user3], ... - Award the specified users points to the mafia leaderboard for this month. The amount of points can be negative to take points. Defaults to 10 points.`,\n\t\t\t`/mafia (un)winfaction (points), [faction] - Award the specified points to all the players in the given faction.`,\n\t\t],\n\n\t\tunmvp: 'mvp',\n\t\tmvp(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tif (!room || room.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst args = target.split(',');\n\t\t\tif (!args.length) return this.parse('/help mafia mvp');\n\t\t\tconst month = new Date().toLocaleString(\"en-us\", { month: \"numeric\", year: \"numeric\" });\n\t\t\tif (!logs.mvps[month]) logs.mvps[month] = {};\n\t\t\tif (!logs.leaderboard[month]) logs.leaderboard[month] = {};\n\t\t\tlet gavePoints = false;\n\t\t\tfor (let u of args) {\n\t\t\t\tu = toID(u);\n\t\t\t\tif (!u) continue;\n\t\t\t\tif (!gavePoints) gavePoints = true;\n\t\t\t\tif (!logs.leaderboard[month][u]) logs.leaderboard[month][u] = 0;\n\t\t\t\tif (!logs.mvps[month][u]) logs.mvps[month][u] = 0;\n\t\t\t\tif (cmd === 'unmvp') {\n\t\t\t\t\tlogs.mvps[month][u]--;\n\t\t\t\t\tlogs.leaderboard[month][u] -= 10;\n\t\t\t\t\tif (logs.mvps[month][u] === 0) delete logs.mvps[month][u];\n\t\t\t\t\tif (logs.leaderboard[month][u] === 0) delete logs.leaderboard[month][u];\n\t\t\t\t} else {\n\t\t\t\t\tlogs.mvps[month][u]++;\n\t\t\t\t\tlogs.leaderboard[month][u] += 10;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!gavePoints) return this.parse('/help mafia mvp');\n\t\t\twriteFile(LOGS_FILE, logs);\n\t\t\tthis.modlog(`MAFIA${cmd.toUpperCase()}`, null, `MVP and 10 points were ${cmd === 'unmvp' ? 'taken from' : 'awarded to'} ${Chat.toListString(args)}`);\n\t\t\troom.add(`MVP and 10 points were ${cmd === 'unmvp' ? 'taken from' : 'awarded to'}: ${Chat.toListString(args)}`).update();\n\t\t},\n\t\tmvphelp: [\n\t\t\t`/mafia mvp [user1], [user2], ... - Gives a MVP point and 10 leaderboard points to the users specified.`,\n\t\t\t`/mafia unmvp [user1], [user2], ... - Takes away a MVP point and 10 leaderboard points from the users specified.`,\n\t\t],\n\n\t\thostlogs: 'leaderboard',\n\t\tplaylogs: 'leaderboard',\n\t\tleaverlogs: 'leaderboard',\n\t\tmvpladder: 'leaderboard',\n\t\tlb: 'leaderboard',\n\t\tleaderboard(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tif (!room || room.settings.mafiaDisabled) throw new Chat.ErrorMessage(`Mafia is disabled for this room.`);\n\t\t\tif (['hostlogs', 'playlogs', 'leaverlogs'].includes(cmd)) {\n\t\t\t\tthis.checkCan('mute', null, room);\n\t\t\t} else {\n\t\t\t\t// Deny broadcasting host/playlogs\n\t\t\t\tif (!this.runBroadcast()) return;\n\t\t\t}\n\t\t\tif (cmd === 'lb') cmd = 'leaderboard';\n\t\t\tif (this.broadcasting) {\n\t\t\t\treturn this.sendReplyBox(`<button name=\"joinRoom\" value=\"view-mafialadder-${cmd}\" class=\"button\"><strong>${cmd}</strong></button>`);\n\t\t\t}\n\t\t\treturn this.parse(`/join view-mafialadder-${cmd}`);\n\t\t},\n\t\tleaderboardhelp: [\n\t\t\t`/mafia [leaderboard|mvpladder] - View the leaderboard or MVP ladder for the current or last month.`,\n\t\t\t`/mafia [hostlogs|playlogs|leaverlogs] - View the host, play, or leaver logs for the current or last month. Requires % @ # ~`,\n\t\t],\n\n\t\tgameban: 'hostban',\n\t\thostban(target, room, user, connection, cmd) {\n\t\t\tif (!target) return this.parse('/help mafia hostban');\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('warn', null, room);\n\n\t\t\tconst { targetUser, rest } = this.requireUser(target);\n\t\t\tconst [string1, string2] = this.splitOne(rest);\n\t\t\tlet duration, reason;\n\t\t\tif (parseInt(string1)) {\n\t\t\t\tduration = parseInt(string1);\n\t\t\t\treason = string2;\n\t\t\t} else {\n\t\t\t\tduration = parseInt(string2);\n\t\t\t\treason = string1;\n\t\t\t}\n\n\t\t\tif (!duration) duration = 2;\n\t\t\tif (!reason) reason = '';\n\t\t\tif (reason.length > 300) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"The reason is too long. It cannot exceed 300 characters.\");\n\t\t\t}\n\n\t\t\tconst userid = toID(targetUser);\n\t\t\tif (Punishments.hasRoomPunishType(room, userid, `MAFIA${this.cmd.toUpperCase()}`)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' is already ${this.cmd}ned in this room.`);\n\t\t\t} else if (Punishments.hasRoomPunishType(room, userid, `MAFIAGAMEBAN`)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' is already gamebanned in this room, which also means they can't host.`);\n\t\t\t} else if (Punishments.hasRoomPunishType(room, userid, `MAFIAHOSTBAN`)) {\n\t\t\t\tuser.sendTo(room, `User '${targetUser.name}' is already hostbanned in this room, but they will now be gamebanned too.`);\n\t\t\t}\n\n\t\t\tif (cmd === 'hostban') {\n\t\t\t\tMafia.hostBan(room, targetUser, reason, duration);\n\t\t\t} else {\n\t\t\t\tMafia.gameBan(room, targetUser, reason, duration);\n\t\t\t}\n\n\t\t\tif (targetUser.id in room.users) {\n\t\t\t\ttargetUser.popup(`|modal|${user.name} has ${cmd}ned you in ${room.roomid} for ${Chat.toDurationString(duration * 60 * 60 * 24 * 1000)}. ${reason}`);\n\t\t\t}\n\n\t\t\tthis.modlog(`MAFIA${cmd.toUpperCase()}`, targetUser, reason);\n\t\t\tthis.privateModAction(`${targetUser.name} was banned from ${cmd === 'hostban' ? 'hosting' : 'playing'} mafia games by ${user.name}.`);\n\t\t},\n\t\thostbanhelp: [\n\t\t\t`/mafia (un)hostban [user], [reason], [duration] - Ban a user from hosting games for [duration] days. Requires % @ # ~`,\n\t\t\t`/mafia (un)gameban [user], [reason], [duration] - Ban a user from playing games for [duration] days. Requires % @ # ~`,\n\t\t],\n\n\t\tban: 'gamebanhelp',\n\t\tbanhelp: 'gamebanhelp',\n\t\tgamebanhelp() {\n\t\t\tthis.parse('/mafia hostbanhelp');\n\t\t},\n\n\t\tgamebanname: 'namehostban',\n\t\tnamegameban: 'namehostban',\n\t\thostbanname: 'namehostban',\n\t\tnamehostban(target, room, user, connection, cmd) {\n\t\t\tif (!target) return this.parse('/help mafia namehostban');\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('warn', null, room);\n\n\t\t\tconst [targetUser, rest] = this.splitOne(target);\n\t\t\tconst [string1, string2] = this.splitOne(rest);\n\t\t\tlet duration, reason;\n\t\t\tif (parseInt(string1)) {\n\t\t\t\tduration = parseInt(string1);\n\t\t\t\treason = string2;\n\t\t\t} else {\n\t\t\t\tduration = parseInt(string2);\n\t\t\t\treason = string1;\n\t\t\t}\n\n\t\t\tif (!duration) duration = 2;\n\t\t\tif (!reason) reason = '';\n\t\t\tif (reason.length > 300) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"The reason is too long. It cannot exceed 300 characters.\");\n\t\t\t}\n\n\t\t\tconst userid = toID(targetUser);\n\t\t\tconst commandType = cmd.includes('hostban') ? 'hostban' : 'gameban';\n\t\t\tif (Punishments.hasRoomPunishType(room, userid, `MAFIA${commandType.toUpperCase()}`)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser}' is already ${commandType}ned in this room.`);\n\t\t\t} else if (Punishments.hasRoomPunishType(room, userid, `MAFIAGAMEBAN`)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser}' is already gamebanned in this room, which also means they can't host.`);\n\t\t\t} else if (Punishments.hasRoomPunishType(room, userid, `MAFIAHOSTBAN`)) {\n\t\t\t\tuser.sendTo(room, `User '${targetUser}' is already hostbanned in this room, but they will now be gamebanned too.`);\n\t\t\t}\n\n\t\t\tif (cmd.includes('hostban')) {\n\t\t\t\tMafia.hostBan(room, userid, reason, duration);\n\t\t\t} else {\n\t\t\t\tMafia.gameBan(room, userid, reason, duration);\n\t\t\t}\n\n\t\t\tthis.modlog(`MAFIA${cmd.toUpperCase()}`, targetUser, reason);\n\t\t\tthis.privateModAction(`${targetUser} was (name)banned from ${cmd.includes('hostban') ? 'hosting' : 'playing'} mafia games by ${user.name}.`);\n\t\t},\n\t\tnamehostbanhelp: [\n\t\t\t`/mafia hostbanname [user], [reason], [duration] - Ban a username from hosting games for [duration] days. Requires % @ # ~`,\n\t\t\t`/mafia gamebanname [user], [reason], [duration] - Ban a username from playing games for [duration] days. Requires % @ # ~`,\n\t\t],\n\n\t\tnameban: 'namegamebanhelp',\n\t\tnamebanhelp: 'namegamebanhelp',\n\t\tnamegamebanhelp() {\n\t\t\tthis.parse('/mafia hostbanhelp');\n\t\t},\n\n\t\tungameban: 'unhostban',\n\t\tunhostban(target, room, user, connection, cmd) {\n\t\t\tif (!target) return this.parse('/help mafia hostban');\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('warn', null, room);\n\n\t\t\tconst { targetUser } = this.requireUser(target, { allowOffline: true });\n\t\t\tif (!Mafia.isGameBanned(room, targetUser) && cmd === 'ungameban') {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' isn't banned from playing mafia games.`);\n\t\t\t} else if (!Mafia.isHostBanned(room, targetUser) && cmd === 'unhostban') {\n\t\t\t\tthrow new Chat.ErrorMessage(`User '${targetUser.name}' isn't banned from hosting mafia games.`);\n\t\t\t}\n\n\t\t\tif (cmd === 'unhostban') Mafia.unhostBan(room, targetUser);\n\t\t\telse Mafia.ungameBan(room, targetUser);\n\n\t\t\tthis.privateModAction(`${targetUser.name} was unbanned from ${cmd === 'unhostban' ? 'hosting' : 'playing'} mafia games by ${user.name}.`);\n\t\t\tthis.modlog(`MAFIA${cmd.toUpperCase()}`, targetUser, null, { noip: 1, noalts: 1 });\n\t\t},\n\n\t\toverwriterole: 'addrole',\n\t\taddrole(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst overwrite = cmd === 'overwriterole';\n\n\t\t\tconst [name, alignment, image, ...memo] = target.split('|').map(e => e.trim());\n\t\t\tconst id = toID(name);\n\n\t\t\tif (!id || !memo.length) return this.parse(`/help mafia addrole`);\n\n\t\t\tif (alignment && !(alignment in MafiaData.alignments)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${alignment} is not a valid alignment.`);\n\t\t\t}\n\t\t\tif (image && !VALID_IMAGES.includes(image)) throw new Chat.ErrorMessage(`${image} is not a valid image.`);\n\n\t\t\tif (!overwrite && id in MafiaData.roles) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already a role. Use /mafia overwriterole to overwrite.`);\n\t\t\t}\n\t\t\tif (id in MafiaData.alignments) throw new Chat.ErrorMessage(`${name} is already an alignment.`);\n\t\t\tif (id in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alias (pointing to ${MafiaData.aliases[id]}).`);\n\t\t\t}\n\n\t\t\tconst role: MafiaDataRole = { name, memo };\n\t\t\tif (alignment) role.alignment = alignment;\n\t\t\tif (image) role.image = image;\n\n\t\t\tMafiaData.roles[id] = role;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDROLE`, null, id, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The role ${id} was added to the database.`);\n\t\t},\n\t\taddrolehelp: [\n\t\t\t`/mafia addrole name|alignment|image|memo1|memo2... - adds a role to the database. Name, memo are required. Requires % @ # ~`,\n\t\t],\n\n\t\toverwritealignment: 'addalignment',\n\t\taddalignment(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst overwrite = cmd === 'overwritealignment';\n\n\t\t\tconst [name, plural, color, buttonColor, image, ...memo] = target.split('|').map(e => e.trim());\n\t\t\tconst id = toID(name);\n\n\t\t\tif (!id || !plural || !memo.length) return this.parse(`/help mafia addalignment`);\n\n\t\t\tif (image && !VALID_IMAGES.includes(image)) throw new Chat.ErrorMessage(`${image} is not a valid image.`);\n\n\t\t\tif (!overwrite && id in MafiaData.alignments) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alignment. Use /mafia overwritealignment to overwrite.`);\n\t\t\t}\n\t\t\tif (id in MafiaData.roles) throw new Chat.ErrorMessage(`${name} is already a role.`);\n\t\t\tif (id in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alias (pointing to ${MafiaData.aliases[id]})`);\n\t\t\t}\n\n\t\t\tconst alignment: MafiaDataAlignment = { name, plural, memo };\n\t\t\tif (color) alignment.color = color;\n\t\t\tif (buttonColor) alignment.buttonColor = buttonColor;\n\t\t\tif (image) alignment.image = image;\n\n\t\t\tMafiaData.alignments[id] = alignment;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDALIGNMENT`, null, id, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The alignment ${id} was added to the database.`);\n\t\t},\n\t\taddalignmenthelp: [\n\t\t\t`/mafia addalignment name|plural|color|button color|image|memo1|memo2... - adds a memo to the database. Name, plural, memo are required. Requires % @ # ~`,\n\t\t],\n\n\t\toverwritetheme: 'addtheme',\n\t\taddtheme(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst overwrite = cmd === 'overwritetheme';\n\n\t\t\tconst [name, desc, ...rolelists] = target.split('|').map(e => e.trim());\n\t\t\tconst id = toID(name);\n\n\t\t\tif (!id || !desc || !rolelists.length) return this.parse(`/help mafia addtheme`);\n\n\t\t\tif (!overwrite && id in MafiaData.themes) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already a theme. Use /mafia overwritetheme to overwrite.`);\n\t\t\t}\n\t\t\tif (id in MafiaData.IDEAs) throw new Chat.ErrorMessage(`${name} is already an IDEA.`);\n\t\t\tif (id in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alias (pointing to ${MafiaData.aliases[id]})`);\n\t\t\t}\n\n\t\t\tconst rolelistsMap: { [players: number]: string } = {};\n\t\t\tconst uniqueRoles = new Set<string>();\n\n\t\t\tfor (const rolelist of rolelists) {\n\t\t\t\tconst [players, roles] = Utils.splitFirst(rolelist, ':', 2).map(e => e.trim());\n\t\t\t\tconst playersNum = parseInt(players);\n\n\t\t\t\tfor (const role of roles.split(',')) {\n\t\t\t\t\tuniqueRoles.add(role.trim());\n\t\t\t\t}\n\t\t\t\trolelistsMap[playersNum] = roles;\n\t\t\t}\n\t\t\tconst problems = [];\n\t\t\tfor (const role of uniqueRoles) {\n\t\t\t\tconst parsedRole = Mafia.parseRole(role);\n\t\t\t\tif (parsedRole.problems.length) problems.push(...parsedRole.problems);\n\t\t\t}\n\t\t\tif (problems.length) throw new Chat.ErrorMessage(`Problems found when parsing roles:\\n${problems.join('\\n')}`);\n\n\t\t\tconst theme: MafiaDataTheme = { name, desc, ...rolelistsMap };\n\t\t\tMafiaData.themes[id] = theme;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDTHEME`, null, id, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The theme ${id} was added to the database.`);\n\t\t},\n\t\taddthemehelp: [\n\t\t\t`/mafia addtheme name|description|players:rolelist|players:rolelist... - adds a theme to the database. Requires % @ # ~`,\n\t\t],\n\n\t\toverwriteidea: 'addidea',\n\t\taddidea(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst overwrite = cmd === 'overwriteidea';\n\n\t\t\tlet [meta, ...roles] = target.split('\\n');\n\t\t\troles = roles.map(e => e.trim());\n\t\t\tif (!meta || !roles.length) return this.parse(`/help mafia addidea`);\n\t\t\tconst [name, choicesStr, ...picks] = meta.split('|');\n\t\t\tconst id = toID(name);\n\t\t\tconst choices = parseInt(choicesStr);\n\n\t\t\tif (!id || !choices || !picks.length) return this.parse(`/help mafia addidea`);\n\t\t\tif (choices <= picks.length) throw new Chat.ErrorMessage(`You need to have more choices than picks.`);\n\n\t\t\tif (!overwrite && id in MafiaData.IDEAs) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an IDEA. Use /mafia overwriteidea to overwrite.`);\n\t\t\t}\n\t\t\tif (id in MafiaData.themes) throw new Chat.ErrorMessage(`${name} is already a theme.`);\n\t\t\tif (id in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alias (pointing to ${MafiaData.aliases[id]})`);\n\t\t\t}\n\n\t\t\tconst checkedRoles: string[] = [];\n\t\t\tconst problems = [];\n\t\t\tfor (const role of roles) {\n\t\t\t\tif (checkedRoles.includes(role)) continue;\n\t\t\t\tconst parsedRole = Mafia.parseRole(role);\n\t\t\t\tif (parsedRole.problems.length) problems.push(...parsedRole.problems);\n\t\t\t\tcheckedRoles.push(role);\n\t\t\t}\n\t\t\tif (problems.length) throw new Chat.ErrorMessage(`Problems found when parsing roles:\\n${problems.join('\\n')}`);\n\n\t\t\tconst IDEA: MafiaDataIDEA = { name, choices, picks, roles };\n\t\t\tMafiaData.IDEAs[id] = IDEA;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDIDEA`, null, id, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The IDEA ${id} was added to the database.`);\n\t\t},\n\t\taddideahelp: [\n\t\t\t`/mafia addidea name|choices (number)|pick1|pick2... (new line here)`,\n\t\t\t`(newline separated rolelist) - Adds an IDEA to the database. Requires % @ # ~`,\n\t\t],\n\n\t\toverwriteterm: 'addterm',\n\t\taddterm(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\t\t\tconst overwrite = cmd === 'overwriteterm';\n\n\t\t\tconst [name, ...memo] = target.split('|').map(e => e.trim());\n\t\t\tconst id = toID(name);\n\t\t\tif (!id || !memo.length) return this.parse(`/help mafia addterm`);\n\n\t\t\tif (!overwrite && id in MafiaData.terms) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already a term. Use /mafia overwriteterm to overwrite.`);\n\t\t\t}\n\t\t\tif (id in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${name} is already an alias (pointing to ${MafiaData.aliases[id]})`);\n\t\t\t}\n\n\t\t\tconst term: MafiaDataTerm = { name, memo };\n\t\t\tMafiaData.terms[id] = term;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDTERM`, null, id, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The term ${id} was added to the database.`);\n\t\t},\n\t\taddtermhelp: [`/mafia addterm name|memo1|memo2... - Adds a term to the database. Requires % @ # ~`],\n\n\t\toverwritealias: 'addalias',\n\t\taddalias(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\n\t\t\tconst [from, to] = target.split(',').map(toID);\n\t\t\tif (!from || !to) return this.parse(`/help mafia addalias`);\n\n\t\t\tif (from in MafiaData.aliases) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${from} is already an alias (pointing to ${MafiaData.aliases[from]})`);\n\t\t\t}\n\t\t\tlet foundTarget = false;\n\t\t\tfor (const entry of ['alignments', 'roles', 'themes', 'IDEAs', 'terms'] as (keyof MafiaData)[]) {\n\t\t\t\tconst dataEntry = MafiaData[entry];\n\t\t\t\tif (from in dataEntry) throw new Chat.ErrorMessage(`${from} is already a ${entry.slice(0, -1)}`);\n\t\t\t\tif (to in dataEntry) foundTarget = true;\n\t\t\t}\n\t\t\tif (!foundTarget) throw new Chat.ErrorMessage(`No database entry exists with the key ${to}.`);\n\n\t\t\tMafiaData.aliases[from] = to;\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tthis.modlog(`MAFIAADDALIAS`, null, `${from}: ${to}`, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The alias ${from} was added, pointing to ${to}.`);\n\t\t},\n\t\taddaliashelp: [\n\t\t\t`/mafia addalias from,to - Adds an alias to the database, redirecting (from) to (to). Requires % @ # ~`,\n\t\t],\n\n\t\tdeletedata(target, room, user) {\n\t\t\troom = this.requireRoom('mafia' as RoomID);\n\t\t\tthis.checkCan('mute', null, room);\n\n\t\t\tlet [source, entry] = target.split(',');\n\t\t\tentry = toID(entry);\n\t\t\tif (!(source in MafiaData)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid source. Valid sources are ${Object.keys(MafiaData).join(', ')}`);\n\t\t\t}\n\t\t\t// @ts-expect-error checked above\n\t\t\tconst dataSource = MafiaData[source];\n\t\t\tif (!(entry in dataSource)) throw new Chat.ErrorMessage(`${entry} does not exist in ${source}.`);\n\n\t\t\tlet buf = '';\n\t\t\tif (dataSource === MafiaData.alignments) {\n\t\t\t\tif (entry === 'solo' || entry === 'town') throw new Chat.ErrorMessage(`You cannot delete the solo or town alignments.`);\n\n\t\t\t\tfor (const key in MafiaData.roles) {\n\t\t\t\t\tif (MafiaData.roles[key].alignment === entry) {\n\t\t\t\t\t\tbuf += `Removed alignment of role ${key}.`;\n\t\t\t\t\t\tdelete MafiaData.roles[key].alignment;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dataSource !== MafiaData.aliases) {\n\t\t\t\t// remove any aliases\n\t\t\t\tfor (const key in MafiaData.aliases) {\n\t\t\t\t\tif (MafiaData.aliases[key] === entry) {\n\t\t\t\t\t\tbuf += `Removed alias ${key}`;\n\t\t\t\t\t\tdelete MafiaData.aliases[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete dataSource[entry];\n\n\t\t\twriteFile(DATA_FILE, MafiaData);\n\t\t\tif (buf) this.sendReply(buf);\n\t\t\tthis.modlog(`MAFIADELETEDATA`, null, `${entry} from ${source}`, { noalts: true, noip: true });\n\t\t\tthis.sendReply(`The entry ${entry} was deleted from the ${source} database.`);\n\t\t},\n\t\tdeletedatahelp: [`/mafia deletedata source,entry - Removes an entry from the database. Requires % @ # ~`],\n\n\t\trandtheme: 'listdata',\n\t\trandrole: 'listdata',\n\t\trandalignment: 'listdata',\n\t\trandidea: 'listdata',\n\t\trandterm: 'listdata',\n\t\trandroles: 'listdata',\n\t\trandalignments: 'listdata',\n\t\trandideas: 'listdata',\n\t\trandterms: 'listdata',\n\t\tranddata: 'listdata',\n\t\trandomtheme: 'listdata',\n\t\trandomrole: 'listdata',\n\t\trandomalignment: 'listdata',\n\t\trandomidea: 'listdata',\n\t\trandomterm: 'listdata',\n\t\trandomdata: 'listdata',\n\t\trandomthemes: 'listdata',\n\t\trandomroles: 'listdata',\n\t\trandomalignments: 'listdata',\n\t\trandomideas: 'listdata',\n\t\trandomterms: 'listdata',\n\t\trandthemes: 'listdata',\n\t\tlistthemes: 'listdata',\n\t\tlistroles: 'listdata',\n\t\tlistalignments: 'listdata',\n\t\tlistideas: 'listdata',\n\t\tlistterms: 'listdata',\n\t\tthemes: 'listdata',\n\t\troles: 'listdata',\n\t\talignments: 'listdata',\n\t\tideas: 'listdata',\n\t\tterms: 'listdata',\n\t\tds: 'listdata',\n\t\tsearch: 'listdata',\n\t\trandom: 'listdata',\n\t\tlist: 'listdata',\n\t\tlistdata(target, room, user, connection, cmd, message) {\n\t\t\tif (!this.runBroadcast()) return false;\n\n\t\t\t// Determine non-search targets first, afterward searching is done with the remainder\n\t\t\tconst targets = target.split(',').map(x => x.trim().toLowerCase());\n\n\t\t\t// Determine search type\n\t\t\tlet searchType: keyof MafiaData = 'aliases';\n\t\t\tlet foundSearchType = false;\n\t\t\tconst searchTypes: (keyof MafiaData)[] = ['themes', 'roles', 'alignments', 'IDEAs', 'terms', 'aliases'];\n\t\t\tfor (const type of searchTypes) {\n\t\t\t\tconst typeID = toID(type.substring(0, type.length - 1));\n\t\t\t\tif (cmd.includes(typeID) || targets.includes(typeID)) {\n\t\t\t\t\tsearchType = type;\n\t\t\t\t\tfoundSearchType = true;\n\t\t\t\t\tif (targets.includes(type)) targets.splice(targets.indexOf(type), 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cmd === 'random' || cmd === 'randomdata' || cmd === 'randdata') {\n\t\t\t\tsearchType =\n\t\t\t\t\t([`themes`, `roles`, `alignments`, `IDEAs`, `terms`] as (keyof MafiaData)[])[Math.floor(Math.random() * 5)];\n\t\t\t\tfoundSearchType = true;\n\t\t\t}\n\n\t\t\tif (!foundSearchType) {\n\t\t\t\treturn this.errorReply(`Invalid source. Valid sources are ${Object.keys(MafiaData).filter(key => key !== `aliases`).join(', ')}.`);\n\t\t\t}\n\n\t\t\tconst dataSource = MafiaData[searchType];\n\n\t\t\t// determine whether the command should return a random subset of results\n\t\t\tconst random = (cmd.includes('rand') || targets.includes(`random`));\n\t\t\tif (targets.includes(`random`)) targets.splice(targets.indexOf(`random`), 1);\n\n\t\t\t// TODO: hide certain roles from appearing (unless the command includes the 'hidden' parameter)\n\n\t\t\t// Number of results\n\t\t\tlet number = random ? 1 : 0;\n\t\t\tfor (let i = 0; i < targets.length; i++) {\n\t\t\t\tif ((!!targets[i] &&\n\t\t\t\t\t!isNaN(Number(targets[i].toString())))) {\n\t\t\t\t\tnumber = Number(targets[i]);\n\t\t\t\t\ttargets.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Convert to rows\n\t\t\t\tconst themeRow = function (theme: MafiaDataTheme, players = 0) {\n\t\t\t\t\treturn `<tr><td style=\"text-align:left;width:30%\" ><button class=\"button\" name = \"send\" value = \"/mafia theme ${theme.name}\" > ${theme.name} </button> </td><td style=\"text-align:left;width:70%\">${players > 0 ? theme[players] : theme.desc} </td></tr >`;\n\t\t\t\t};\n\t\t\t\tconst ideaRow = function (idea: MafiaDataIDEA) {\n\t\t\t\t\treturn `<tr><td style=\"text-align:left;width:100%\" ><button class=\"button\" name = \"send\" value = \"/mafia dt ${idea.name}\" > ${idea.name} </button> </td></tr >`;\n\t\t\t\t};\n\t\t\t\tconst row = function (role: MafiaDataRole | MafiaDataTerm | MafiaDataAlignment) {\n\t\t\t\t\treturn `<tr><td style=\"text-align:left;width:30%\" ><button class=\"button\" name = \"send\" value = \"/mafia role ${role.name}\" > ${role.name} </button> </td><td style=\"text-align:left;width:70%\">${role.memo.join(' ')} </td></tr >`;\n\t\t\t\t};\n\n\t\t\t\tif (searchType === `aliases`) {\n\t\t\t\t\t// Handle aliases separately for differing functionality\n\t\t\t\t\troom = this.requireRoom();\n\t\t\t\t\tthis.checkCan('mute', null, room);\n\t\t\t\t\tconst aliases = Object.entries(MafiaData.aliases)\n\t\t\t\t\t\t.map(([from, to]) => `${from}: ${to}`)\n\t\t\t\t\t\t.join('<br/>');\n\t\t\t\t\treturn this.sendReplyBox(`Mafia aliases:<br/>${aliases}`);\n\t\t\t\t} else {\n\t\t\t\t\t// Create a table for a pleasant viewing experience\n\t\t\t\t\tlet table = `<div style=\"max-height:300px;overflow:auto;\"><table border=\"1\" style=\"border: 1px solid black;width: 100%\">`;\n\t\t\t\t\tlet entries: [string, MafiaDataAlignment | MafiaDataRole | MafiaDataTheme | MafiaDataIDEA | MafiaDataTerm][] =\n\t\t\t\t\t\tObject.entries(dataSource).sort();\n\n\t\t\t\t\tfor (const targetString of targets) {\n\t\t\t\t\t\tentries = targetString.split('|').map(x => x.trim())\n\t\t\t\t\t\t\t.map(searchTerm => mafiaSearch(entries.slice(), searchTerm, searchType))\n\t\t\t\t\t\t\t.reduce((aggregate, result) => [...new Set([...aggregate, ...result])]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof (entries) === 'undefined') return;\n\n\t\t\t\t\tif (random) entries = Utils.shuffle(entries);\n\t\t\t\t\tif (number > 0) entries = entries.slice(0, number);\n\n\t\t\t\t\tif (entries.length === 0) {\n\t\t\t\t\t\treturn this.errorReply(`No ${searchType} found.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entries.length === 1) {\n\t\t\t\t\t\tthis.target = entries[0][0];\n\t\t\t\t\t\treturn this.run((Chat.commands.mafia as Chat.ChatCommands).data as Chat.AnnotatedChatHandler);\n\t\t\t\t\t}\n\n\t\t\t\t\ttable += entries\n\t\t\t\t\t\t.map(([key, data]) => searchType === `themes` ?\n\t\t\t\t\t\t\tthemeRow(MafiaData[searchType][key]) : searchType === `IDEAs` ?\n\t\t\t\t\t\t\t\tideaRow(MafiaData[searchType][key]) : row(MafiaData[searchType][key]))\n\t\t\t\t\t\t.join('');\n\t\t\t\t\ttable += `</table></div>`;\n\t\t\t\t\treturn this.sendReplyBox(table);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tlistdatahelp: [\n\t\t\t`/mafia roles [parameter, paramater, ...] - Views all Mafia roles. Parameters: theme that must include role, text included in role data.`,\n\t\t\t`/mafia themes [parameter, paramater, ...] - Views all Mafia themes. Parameters: roles in theme, players(< | <= | = | => | >)[x] for playercounts, text included in theme data.`,\n\t\t\t`/mafia alignments [parameter, paramater, ...] - Views all Mafia alignments. Parameters: text included in alignment data.`,\n\t\t\t`/mafia ideas [parameter, paramater, ...] - Views all Mafia IDEAs. Parameters: roles in IDEA, text included in IDEA data.`,\n\t\t\t`/mafia terms [parameter, paramater, ...] - Views all Mafia terms. Parameters: text included in term data.`,\n\t\t\t`/mafia randomrole [parameter, paramater, ...] - View a random Mafia role. Parameters: number of roles to be randomly generated, theme that must include role, text included in role data.`,\n\t\t\t`/mafia randomtheme [parameter, paramater, ...] - View a random Mafia theme. Parameters: number of themes to be randomly generated, roles in theme, players(< | <= | = | => | >)[x] for playercounts, text included in theme data.`,\n\t\t\t`/mafia randomalignment [parameter, paramater, ...] - View a random Mafia alignment. Parameters: number of alignments to be randomly generated, text included in alignment data.`,\n\t\t\t`/mafia randomidea [parameter, paramater, ...] - View a random Mafia IDEA. Parameters: number of IDEAs to be randomly generated, roles in IDEA, text included in IDEA data.`,\n\t\t\t`/mafia randomterm [parameter, paramater, ...] - View a random Mafia term. Parameters: number of terms to be randomly generated, text included in term data.`,\n\t\t],\n\n\t\tdisable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (room.settings.mafiaDisabled) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"Mafia is already disabled.\");\n\t\t\t}\n\t\t\troom.settings.mafiaDisabled = true;\n\t\t\troom.saveSettings();\n\t\t\tthis.modlog('MAFIADISABLE', null);\n\t\t\treturn this.sendReply(\"Mafia has been disabled for this room.\");\n\t\t},\n\t\tdisablehelp: [`/mafia disable - Disables mafia in this room. Requires # ~`],\n\n\t\tenable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (!room.settings.mafiaDisabled) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"Mafia is already enabled.\");\n\t\t\t}\n\t\t\troom.settings.mafiaDisabled = false;\n\t\t\troom.saveSettings();\n\t\t\tthis.modlog('MAFIAENABLE', null);\n\t\t\treturn this.sendReply(\"Mafia has been enabled for this room.\");\n\t\t},\n\t\tenablehelp: [`/mafia enable - Enables mafia in this room. Requires # ~`],\n\t},\n\tmafiahelp(target, room, user) {\n\t\tif (!this.runBroadcast()) return;\n\t\tlet buf = `<strong>Commands for the Mafia Plugin</strong><br/>Most commands are used through buttons in the game screen.<br/><br/>`;\n\t\tbuf += `<details><summary class=\"button\">General Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>General Commands for the Mafia Plugin</strong>:<br/>`,\n\t\t\t`/mafia host [user] - Create a game of Mafia with [user] as the host. Roomvoices can only host themselves. Requires + % @ # ~`,\n\t\t\t`/mafia nexthost - Host the next user in the host queue. Only works in the Mafia Room. Requires + % @ # ~`,\n\t\t\t`/mafia forcehost [user] - Bypass the host queue and host [user]. Only works in the Mafia Room. Requires % @ # ~`,\n\t\t\t`/mafia sub [in|out] - Request to sub into the game, or cancel a request to sub out.`,\n\t\t\t`/mafia spectate - Spectate the game of mafia.`,\n\t\t\t`/mafia votes - Display the current vote count, and who's voting who.`,\n\t\t\t`/mafia players - Display the current list of players, will highlight players.`,\n\t\t\t`/mafia [rl|orl] - Display the role list or the original role list for the current game.`,\n\t\t\t`/mafia data [alignment|role|modifier|theme|term] - Get information on a mafia alignment, role, modifier, theme, or term.`,\n\t\t\t`/mafia subhost [user] - Substitutes the user as the new game host. Requires % @ # ~`,\n\t\t\t`/mafia (un)cohost [user] - Adds/removes the user as a cohost. Cohosts can talk during the game, as well as perform host actions. Requires % @ # ~`,\n\t\t\t`/mafia [enable|disable] - Enables/disables mafia in this room. Requires # ~`,\n\t\t].join('<br/>');\n\t\tbuf += `</details><details><summary class=\"button\">Player Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>Commands that players can use</strong>:<br/>`,\n\t\t\t`/mafia [join|leave] - Joins/leaves the game. Can only be done while signups are open.`,\n\t\t\t`/mafia vote [player|novote] - Vote the specified player or abstain from voting.`,\n\t\t\t`/mafia unvote - Withdraw your vote. Fails if you're not voting anyone`,\n\t\t\t`/mafia deadline - View the deadline for the current game.`,\n\t\t\t`/mafia sub in - Request to sub into the game, or cancel a request to sub out.`,\n\t\t\t`/mafia sub out - Request to sub out of the game, or cancel a request to sub in.`,\n\t\t\t`/mafia idle - Tells the host if you are idling.`,\n\t\t\t`/mafia action [details] - Tells the host you are using an action with the given submission details.`,\n\t\t].join('<br/>');\n\t\tbuf += `</details><details><summary class=\"button\">Host Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>Commands for game hosts and Cohosts to use</strong>:<br/>`,\n\t\t\t`/mafia playercap [cap|none]- Limit the number of players able to join the game. Player cap cannot be more than 20 or less than 2. Requires host % @ # ~`,\n\t\t\t`/mafia close - Closes signups for the current game. Requires host % @ # ~`,\n\t\t\t`/mafia closedsetup [on|off] - Sets if the game is a closed setup. Closed setups don't show the role list to players. Requires host % @ # ~`,\n\t\t\t`/mafia takeidles [on|off] - Sets if idles are accepted by the script or not. Requires host % @ # ~`,\n\t\t\t`/mafia prod - Notifies players that they must submit an action or idle if they haven't yet. Requires host % @ # ~`,\n\t\t\t`/mafia reveal [on|off] - Sets if roles reveal on death or not. Requires host % @ # ~`,\n\t\t\t`/mafia selfvote [on|hammer|off] - Allows players to self vote either at hammer or anytime. Requires host % @ # ~`,\n\t\t\t`/mafia [enablenl|disablenl] - Allows or disallows players abstain from voting. Requires host % @ # ~`,\n\t\t\t`/mafia votelock [on|off] - Allows or disallows players to change their vote. Requires host % @ # ~`,\n\t\t\t`/mafia voting [on|off] - Allows or disallows voting. Requires host % @ # ~`,\n\t\t\t`/mafia forcevote [yes/no] - Forces players' votes onto themselves, and prevents unvoting. Requires host % @ # ~`,\n\t\t\t`/mafia setroles [comma separated roles] - Set the roles for a game of mafia. You need to provide one role per player. Requires host % @ # ~`,\n\t\t\t`/mafia forcesetroles [comma separated roles] - Forcibly set the roles for a game of mafia. No role PM information or alignment will be set. Requires host % @ # ~`,\n\t\t\t`/mafia start - Start the game of mafia. Signups must be closed. Requires host % @ # ~`,\n\t\t\t`/mafia [day|night] - Move to the next game day or night. Requires host % @ # ~`,\n\t\t\t`/mafia extend (minutes) - Return to the previous game day. If (minutes) is provided, set the deadline for (minutes) minutes. Requires host % @ # ~`,\n\t\t\t`/mafia kill [player] - Kill a player, eliminating them from the game. Requires host % @ # ~`,\n\t\t\t`/mafia treestump [player] - Kills a player, but allows them to talk during the day still. Requires host % @ # ~`,\n\t\t\t`/mafia spirit [player] - Kills a player, but allows them to vote still. Requires host % @ # ~`,\n\t\t\t`/mafia spiritstump [player] - Kills a player, but allows them to talk and vote during the day. Requires host % @ # ~`,\n\t\t\t`/mafia kick [player] - Kicks a player from the game without revealing their role. Requires host % @ # ~`,\n\t\t\t`/mafia revive [player] - Revives a player who was eliminated. Requires host % @ # ~`,\n\t\t\t`/mafia add [player] - Adds a new player to the game. Requires host % @ # ~`,\n\t\t\t`/mafia revealrole [player] - Reveals the role of a player. Requires host % @ # ~`,\n\t\t\t`/mafia revealas [player], [role] - Fakereveals the role of a player as a certain role. Requires host % @ # ~`,\n\t\t\t`/mafia (un)silence [player] - Silences [player], preventing them from talking at all. Requires host % @ # ~`,\n\t\t\t`/mafia (un)nighttalk [player] - Allows [player] to talk freely during the night. Requires host % @ # ~`,\n\t\t\t`/mafia (un)[priest|actor] [player] - Makes [player] a priest (can't hammer) or actor (can only hammer). Requires host % @ # ~`,\n\t\t\t`/mafia deadline [minutes|off] - Sets or removes the deadline for the game. Cannot be more than 20 minutes.`,\n\t\t\t`/mafia sub next, [player] - Forcibly sub [player] out of the game. Requires host % @ # ~`,\n\t\t\t`/mafia sub remove, [user] - Forcibly remove [user] from the sublist. Requires host % @ # ~`,\n\t\t\t`/mafia sub unrequest, [player] - Remove's a player's request to sub out of the game. Requires host % @ # ~`,\n\t\t\t`/mafia sub [player], [user] - Forcibly sub [player] for [user]. Requires host % @ # ~`,\n\t\t\t`/mafia autosub [yes|no] - Sets if players will automatically sub out if a user is on the sublist. Defaults to yes. Requires host % @ # ~`,\n\t\t\t`/mafia (un)[love|hate] [player] - Makes it take 1 more (love) or less (hate) vote to hammer [player]. Requires host % @ # ~`,\n\t\t\t`/mafia (un)[mayor|voteless] [player] - Makes [player]'s' vote worth 2 votes (mayor) or makes [player]'s vote worth 0 votes (voteless). Requires host % @ # ~`,\n\t\t\t`/mafia hammer [hammer] - sets the hammer count to [hammer] and resets votes`,\n\t\t\t`/mafia hammer off - disables hammering`,\n\t\t\t`/mafia shifthammer [hammer] - sets the hammer count to [hammer] without resetting votes`,\n\t\t\t`/mafia resethammer - sets the hammer to the default, resetting votes`,\n\t\t\t`/mafia playerroles - View all the player's roles in chat. Requires host`,\n\t\t\t`/mafia resetgame - Resets game data. Does not change settings from the host besides deadlines or add/remove any players. Requires host % @ # ~`,\n\t\t\t`/mafia end - End the current game of mafia. Requires host + % @ # ~`,\n\t\t].join('<br/>');\n\t\tbuf += `</details><details><summary class=\"button\">IDEA Module Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>Commands for using IDEA modules</strong><br/>`,\n\t\t\t`/mafia idea [idea] - starts the IDEA module [idea]. Requires + % @ # ~, voices can only start for themselves`,\n\t\t\t`/mafia ideareroll - rerolls the IDEA module. Requires host % @ # ~`,\n\t\t\t`/mafia ideapick [selection], [role] - selects a role`,\n\t\t\t`/mafia ideadiscards - shows the discarded roles`,\n\t\t\t`/mafia ideadiscards [off|on] - hides discards from the players. Requires host % @ # ~`,\n\t\t\t`/mafia customidea choices, picks (new line here, shift+enter)`,\n\t\t\t`(comma or newline separated rolelist) - Starts an IDEA module with custom roles. Requires % @ # ~`,\n\t\t].join('<br/>');\n\t\tbuf += `</details>`;\n\t\tbuf += `</details><details><summary class=\"button\">Mafia Room Specific Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>Commands that are only useable in the Mafia Room</strong>:<br/>`,\n\t\t\t`/mafia queue add, [user] - Adds the user to the host queue. Requires + % @ # ~, voices can only add themselves.`,\n\t\t\t`/mafia queue remove, [user] - Removes the user from the queue. You can remove yourself regardless of rank. Requires % @ # ~.`,\n\t\t\t`/mafia queue - Shows the list of users who are in queue to host.`,\n\t\t\t`/mafia win (points) [user1], [user2], [user3], ... - Award the specified users points to the mafia leaderboard for this month. The amount of points can be negative to take points. Defaults to 10 points.`,\n\t\t\t`/mafia winfaction (points), [faction] - Award the specified points to all the players in the given faction. Requires % @ # ~`,\n\t\t\t`/mafia (un)mvp [user1], [user2], ... - Gives a MVP point and 10 leaderboard points to the users specified.`,\n\t\t\t`/mafia [leaderboard|mvpladder] - View the leaderboard or MVP ladder for the current or last month.`,\n\t\t\t`/mafia [hostlogs|playlogs] - View the host logs or play logs for the current or last month. Requires % @ # ~`,\n\t\t\t`/mafia (un)hostban [user], [duration] - Ban a user from hosting games for [duration] days. Requires % @ # ~`,\n\t\t\t`/mafia (un)gameban [user], [duration] - Ban a user from playing games for [duration] days. Requires % @ # ~`,\n\t\t].join('<br/>');\n\t\tbuf += `</details>`;\n\t\tbuf += `</details><details><summary class=\"button\">Mafia Dexsearch Commands</summary>`;\n\t\tbuf += [\n\t\t\t`<br/><strong>Commands to search Mafia data</strong>:<br/>`,\n\t\t\t`/mafia dt [data] - Views Mafia data.`,\n\t\t\t`/mafia roles [parameter, paramater, ...] - Views all Mafia roles. Parameters: theme that must include role, text included in role data.`,\n\t\t\t`/mafia themes [parameter, paramater, ...] - Views all Mafia themes. Parameters: roles in theme, players(< | <= | = | => | >)[x] for playercounts, text included in theme data.`,\n\t\t\t`/mafia alignments [parameter, paramater, ...] - Views all Mafia alignments. Parameters: text included in alignment data.`,\n\t\t\t`/mafia ideas [parameter, paramater, ...] - Views all Mafia IDEAs. Parameters: roles in IDEA, text included in IDEA data.`,\n\t\t\t`/mafia terms [parameter, paramater, ...] - Views all Mafia terms. Parameters: text included in term data.`,\n\t\t\t`/mafia randomrole [parameter, paramater, ...] - View a random Mafia role. Parameters: number of roles to be randomly generated, theme that must include role, text included in role data.`,\n\t\t\t`/mafia randomtheme [parameter, paramater, ...] - View a random Mafia theme. Parameters: number of themes to be randomly generated, roles in theme, players(< | <= | = | => | >)[x] for playercounts, text included in theme data.`,\n\t\t\t`/mafia randomalignment [parameter, paramater, ...] - View a random Mafia alignment. Parameters: number of alignments to be randomly generated, text included in alignment data.`,\n\t\t\t`/mafia randomidea [parameter, paramater, ...] - View a random Mafia IDEA. Parameters: number of IDEAs to be randomly generated, roles in IDEA, text included in IDEA data.`,\n\t\t\t`/mafia randomterm [parameter, paramater, ...] - View a random Mafia term. Parameters: number of terms to be randomly generated, text included in term data.`,\n\t\t].join('<br/>');\n\t\tbuf += `</details>`;\n\n\t\treturn this.sendReplyBox(buf);\n\t},\n};\n\nexport const roomSettings: Chat.SettingsHandler = room => ({\n\tlabel: \"Mafia\",\n\tpermission: 'editroom',\n\toptions: [\n\t\t[`disabled`, room.settings.mafiaDisabled || 'mafia disable'],\n\t\t[`enabled`, !room.settings.mafiaDisabled || 'mafia enable'],\n\t],\n});\n\nprocess.nextTick(() => {\n\tChat.multiLinePattern.register('/mafia (custom|add|overwrite)idea');\n});\n"],
  "mappings": "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",
  "names": ["game"]
}
