{
  "version": 3,
  "sources": ["../../../server/chat-plugins/quotes.ts"],
  "sourcesContent": ["import { FS, Utils } from '../../lib';\n\nconst STORAGE_PATH = 'config/chat-plugins/quotes.json';\nconst MAX_QUOTES = 300;\n\ninterface Quote {\n\tuserid: string;\n\tquote: string;\n\tdate: number;\n}\n\nconst quotes: { [room: string]: Quote[] } = JSON.parse(FS(STORAGE_PATH).readIfExistsSync() || \"{}\");\n\n// migrate quotes out of roomsettings\nfunction convertOldQuotes() {\n\tfor (const room of Rooms.rooms.values()) {\n\t\tif ((room.settings as any).quotes) {\n\t\t\tquotes[room.roomid] = (room.settings as any).quotes;\n\t\t\tdelete (room.settings as any).quotes;\n\t\t\troom.saveSettings();\n\t\t\tsaveQuotes();\n\t\t}\n\t}\n}\n\nfunction saveQuotes() {\n\tFS(STORAGE_PATH).writeUpdate(() => JSON.stringify(quotes));\n}\n\nconvertOldQuotes();\n\nexport const commands: Chat.ChatCommands = {\n\trandquote(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tconst roomQuotes = quotes[room.roomid];\n\t\tif (!roomQuotes?.length) throw new Chat.ErrorMessage(`This room has no quotes.`);\n\t\tthis.runBroadcast(true);\n\t\tconst { quote, date, userid } = roomQuotes[Math.floor(Math.random() * roomQuotes.length)];\n\t\tconst time = Chat.toTimestamp(new Date(date), { human: true });\n\t\tconst attribution = toID(target) === 'showauthor' ? `<hr /><small>Added by ${userid} on ${time}</small>` : '';\n\t\treturn this.sendReplyBox(`${Chat.getReadmoreBlock(quote)}${attribution}`);\n\t},\n\trandquotehelp: [`/randquote [showauthor] - Show a random quote from the room. Add 'showauthor' to see who added it and when.`],\n\n\taddquote(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tif (!room.persist) {\n\t\t\tthrow new Chat.ErrorMessage(\"This command is unavailable in temporary rooms.\");\n\t\t}\n\t\ttarget = target.trim();\n\t\tthis.checkCan('mute', null, room);\n\t\tif (!target) {\n\t\t\treturn this.parse(`/help addquote`);\n\t\t}\n\t\tif (!quotes[room.roomid]) quotes[room.roomid] = [];\n\n\t\tconst roomQuotes = quotes[room.roomid];\n\t\tif (this.filter(target) !== target) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid quote.`);\n\t\t}\n\t\tif (roomQuotes.filter(item => item.quote === target).length) {\n\t\t\tthrow new Chat.ErrorMessage(`\"${target}\" is already quoted in this room.`);\n\t\t}\n\t\tif (target.length > 8192) {\n\t\t\tthrow new Chat.ErrorMessage(`Your quote cannot exceed 8192 characters.`);\n\t\t}\n\t\tif (room.settings.isPrivate && roomQuotes.length >= MAX_QUOTES) {\n\t\t\tthrow new Chat.ErrorMessage(`This room already has ${MAX_QUOTES} quotes, which is the maximum for private rooms.`);\n\t\t}\n\t\troomQuotes.push({ userid: user.id, quote: target, date: Date.now() });\n\t\tsaveQuotes();\n\t\tthis.refreshPage(`quotes-${room.roomid}`);\n\t\tconst collapsedQuote = target.replace(/\\n/g, ' ');\n\t\tthis.privateModAction(`${user.name} added a new quote: \"${collapsedQuote}\".`);\n\t\treturn this.modlog(`ADDQUOTE`, null, collapsedQuote);\n\t},\n\taddquotehelp: [`/addquote [quote] - Adds [quote] to the room's quotes. Requires: % @ # ~`],\n\n\tremovequote(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tthis.checkCan('mute', null, room);\n\t\tif (!quotes[room.roomid]?.length) throw new Chat.ErrorMessage(`This room has no quotes.`);\n\t\tconst roomQuotes = quotes[room.roomid];\n\t\tconst index = toID(target) === 'last' ? roomQuotes.length - 1 : parseInt(toID(target)) - 1;\n\t\tif (isNaN(index)) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid index.`);\n\t\t}\n\t\tif (!roomQuotes[index]) {\n\t\t\tthrow new Chat.ErrorMessage(`Quote not found.`);\n\t\t}\n\t\tconst [removed] = roomQuotes.splice(index, 1);\n\t\tconst collapsedQuote = removed.quote.replace(/\\n/g, ' ');\n\t\tthis.privateModAction(`${user.name} removed quote indexed at ${index + 1}: \"${collapsedQuote}\" (originally added by ${removed.userid}).`);\n\t\tthis.modlog(`REMOVEQUOTE`, null, collapsedQuote);\n\t\tsaveQuotes();\n\t\tthis.refreshPage(`quotes-${room.roomid}`);\n\t},\n\tremovequotehelp: [`/removequote [index] - Removes the quote from the room's quotes. Requires: % @ # ~`],\n\n\tviewquote(target, room, user) {\n\t\troom = this.requireRoom();\n\t\tconst roomQuotes = quotes[room.roomid];\n\t\tif (!roomQuotes?.length) throw new Chat.ErrorMessage(`This room has no quotes.`);\n\t\tconst [num, showAuthor] = Utils.splitFirst(target, ',');\n\t\tconst index = num === 'last' ? roomQuotes.length - 1 : parseInt(num) - 1;\n\t\tif (isNaN(index)) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid index.`);\n\t\t}\n\t\tif (!roomQuotes[index]) {\n\t\t\tthrow new Chat.ErrorMessage(`Quote not found.`);\n\t\t}\n\t\tthis.runBroadcast(true);\n\t\tconst { quote, date, userid } = roomQuotes[index];\n\t\tconst time = Chat.toTimestamp(new Date(date), { human: true });\n\t\tconst attribution = toID(showAuthor) === 'showauthor' ? `<hr /><small>Added by ${userid} on ${time}</small>` : '';\n\t\treturn this.sendReplyBox(`${Chat.formatText(quote, false, true)}${attribution}`);\n\t},\n\tviewquotehelp: [\n\t\t`/viewquote [index][, params] - View the quote from the room's quotes.`,\n\t\t`If 'showauthor' is used for the [params] argument, it shows who added the quote and when.`,\n\t],\n\n\tviewquotes: 'quotes',\n\tquotes(target, room) {\n\t\tconst targetRoom = target ? Rooms.search(target) : room;\n\t\tif (!targetRoom) throw new Chat.ErrorMessage(`Invalid room.`);\n\t\tthis.parse(`/join view-quotes-${targetRoom.roomid}`);\n\t},\n\tquoteshelp: [`/quotes [room] - Shows all quotes for [room]. Defaults the room the command is used in.`],\n\n\tquote() {\n\t\tthis.sendReply(`/quote as a method of adding quotes has been deprecated. Use /addquote instead.`);\n\t\treturn this.parse(`/help quote`);\n\t},\n\tquotehelp: [\n\t\t\"/randquote [showauthor] - Show a random quote from the room. Add 'showauthor' to see who added it and when.\",\n\t\t\"/removequote [index] - Removes the quote from the room's quotes. Requires: % @ # ~\",\n\t\t\"/viewquote [index][, params] - View the quote from the room's quotes.\",\n\t\t\"If 'showauthor' is used for the [params] argument, it shows who added the quote and when.\",\n\t\t\"/quotes [room] - Shows all quotes for [room]. Defaults the room the command is used in.\",\n\t],\n};\n\nexport const pages: Chat.PageTable = {\n\tquotes(args, user) {\n\t\tconst room = this.requireRoom();\n\t\tthis.title = `[Quotes]`;\n\t\t// allow it for users if they can access the room\n\t\tif (!room.checkModjoin(user)) {\n\t\t\tthrow new Chat.ErrorMessage(`Access denied.`);\n\t\t}\n\t\tlet buffer = `<div class=\"pad\">`;\n\t\tbuffer += `<button style=\"float:right;\" class=\"button\" name=\"send\" value=\"/join view-quotes-${room.roomid}\"><i class=\"fa fa-refresh\"></i> Refresh</button>`;\n\n\t\tconst roomQuotes = quotes[room.roomid];\n\t\tif (!roomQuotes?.length) {\n\t\t\treturn `${buffer}<h2>This room has no quotes.</h2></div>`;\n\t\t}\n\n\t\tbuffer += Utils.html`<h2>Quotes for ${room.title} (${roomQuotes.length}):</h2>`;\n\t\tfor (const [i, quoteObj] of roomQuotes.entries()) {\n\t\t\tconst index = i + 1;\n\t\t\tconst { quote, userid, date } = quoteObj;\n\t\t\tbuffer += `<div class=\"infobox\">#${index}: ${Chat.formatText(quote, false, true)}`;\n\t\t\tbuffer += `<br /><hr /><small>Added by ${userid} on ${Chat.toTimestamp(new Date(date), { human: true })}</small>`;\n\t\t\tif (user.can('mute', null, room)) {\n\t\t\t\tbuffer += ` <button class=\"button\" name=\"send\" value=\"/msgroom ${room.roomid},/removequote ${index}\">Remove</button>`;\n\t\t\t}\n\t\t\tbuffer += `</div>`;\n\t\t}\n\t\tbuffer += `</div>`;\n\t\treturn buffer;\n\t},\n};\n\nexport const handlers: Chat.Handlers = {\n\tonRenameRoom(oldID, newID) {\n\t\tif (quotes[oldID]) {\n\t\t\tif (!quotes[newID]) quotes[newID] = [];\n\t\t\tquotes[newID].push(...quotes[oldID]);\n\t\t\tdelete quotes[oldID];\n\t\t\tsaveQuotes();\n\t\t}\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
