{
  "version": 3,
  "sources": ["../../../server/chat-plugins/suspect-tests.ts"],
  "sourcesContent": ["import { Utils } from '../../lib';\nimport { FS } from '../../lib/fs';\n\nconst SUSPECTS_FILE = 'config/suspects.json';\n\ninterface SuspectTest {\n\ttier: string;\n\tsuspect: string;\n\tdate: string;\n\turl: string;\n}\n\ninterface SuspectsFile {\n\twhitelist: string[];\n\tsuspects: { [format: string]: SuspectTest };\n}\n\nexport let suspectTests: SuspectsFile = JSON.parse(FS(SUSPECTS_FILE).readIfExistsSync() || \"{}\");\n\nexport function saveSuspectTests() {\n\tFS(SUSPECTS_FILE).writeUpdate(() => JSON.stringify(suspectTests));\n}\n\nconst defaults: SuspectsFile = {\n\twhitelist: [],\n\tsuspects: {},\n};\n\nif (!suspectTests.whitelist && !suspectTests.suspects) {\n\tconst suspects = { ...suspectTests } as unknown as { [format: string]: SuspectTest };\n\tsuspectTests = { ...defaults, suspects };\n\tsaveSuspectTests();\n}\n\nfunction checkPermissions(context: Chat.CommandContext) {\n\tconst user = context.user;\n\tif (suspectTests.whitelist?.includes(user.id)) return true;\n\tcontext.checkCan('gdeclare');\n}\n\nexport const commands: Chat.ChatCommands = {\n\tsuspect: 'suspects',\n\tsuspects: {\n\t\t''(target, room, user) {\n\t\t\tconst suspects = suspectTests.suspects;\n\t\t\tif (!Object.keys(suspects).length) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"There are no suspect tests running.\");\n\t\t\t}\n\t\t\tif (!this.runBroadcast()) return;\n\n\t\t\tlet buffer = '<strong>Suspect tests currently running:</strong>';\n\t\t\tfor (const test of Object.values(suspects)) {\n\t\t\t\tbuffer += '<br />';\n\t\t\t\tbuffer += `${Utils.escapeHTML(test.tier)}: <a href=\"${test.url}\">${Utils.escapeHTML(test.suspect)}</a> (${test.date})`;\n\t\t\t}\n\t\t\treturn this.sendReplyBox(buffer);\n\t\t},\n\n\t\tedit: 'add',\n\t\tasync add(target, room, user) {\n\t\t\tcheckPermissions(this);\n\n\t\t\tconst [tier, suspect, date, ...reqs] = target.split(',').map(x => x.trim());\n\t\t\tif (!(tier && suspect && date && reqs)) {\n\t\t\t\treturn this.parse('/help suspects');\n\t\t\t}\n\n\t\t\tconst format = Dex.formats.get(tier);\n\t\t\tif (format.effectType !== 'Format') throw new Chat.ErrorMessage(`\"${tier}\" is not a valid tier.`);\n\n\t\t\tconst suspectString = suspect.trim();\n\n\t\t\tconst [month, day] = date.trim().split(date.includes('-') ? '-' : '/');\n\t\t\tconst isValidDate = /[0-1]?[0-9]/.test(month) && /[0-3]?[0-9]/.test(day);\n\t\t\tif (!isValidDate) throw new Chat.ErrorMessage(\"Dates must be in the format MM/DD.\");\n\t\t\tconst dateActual = `${month}/${day}`;\n\n\t\t\tconst reqData: Record<string, number> = {};\n\t\t\tif (!reqs.length) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"At least one requirement for qualifying must be provided.\");\n\t\t\t}\n\t\t\tfor (const req of reqs) {\n\t\t\t\tlet [k, v] = req.split('=');\n\t\t\t\tk = toID(k);\n\t\t\t\tif (k === 'b') {\n\t\t\t\t\tawait this.parse(`/suspects setcoil ${format},${v}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!['elo', 'gxe', 'coil'].includes(k)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Invalid requirement type: ${k}. Must be 'coil', 'gxe', or 'elo'.`);\n\t\t\t\t}\n\t\t\t\tif (k === 'coil' && !reqs.some(x => toID(x).startsWith('b'))) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(\"COIL reqs are specified, but you have not provided a B value (with the argument `b=num`)\");\n\t\t\t\t}\n\t\t\t\tconst val = Number(v);\n\t\t\t\tif (isNaN(val) || val < 0) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Invalid value: ${v}`);\n\t\t\t\t}\n\t\t\t\tif (reqData[k]) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Requirement type ${k} specified twice.`);\n\t\t\t\t}\n\t\t\t\treqData[k] = val;\n\t\t\t}\n\t\t\tconst [out, error] = await LoginServer.request(suspectTests.suspects[format.id] ? \"suspects/edit\" : \"suspects/add\", {\n\t\t\t\tformat: format.id,\n\t\t\t\treqs: JSON.stringify(reqData),\n\t\t\t});\n\t\t\tif (out?.actionerror || error) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"Error adding suspect test: \" + (out?.actionerror || error?.message));\n\t\t\t}\n\n\t\t\tconst prevSuspect = suspectTests.suspects[format.id];\n\t\t\tthis.privateGlobalModAction(`${user.name} ${prevSuspect ? \"edited the\" : \"added a\"} ${format.name} suspect test.`);\n\t\t\tthis.globalModlog('SUSPECTTEST', null, `${prevSuspect ? \"edited\" : \"added\"} ${format.name}`);\n\n\t\t\tsuspectTests.suspects[format.id] = {\n\t\t\t\ttier: format.name,\n\t\t\t\tsuspect: suspectString,\n\t\t\t\tdate: dateActual,\n\t\t\t\turl: out.url || prevSuspect.url,\n\t\t\t};\n\t\t\tsaveSuspectTests();\n\t\t\tthis.sendReply(`Added a suspect test notice for ${suspectString} in ${format.name}.`);\n\t\t\tif (reqData.coil) this.sendReply('Remember to add a B value for your test\\'s COIL setting with /suspects setbvalue.');\n\t\t},\n\n\t\tend: 'remove',\n\t\tdelete: 'remove',\n\t\tasync remove(target, room, user) {\n\t\t\tcheckPermissions(this);\n\n\t\t\tconst format = toID(target);\n\t\t\tconst test = suspectTests.suspects[format];\n\t\t\tif (!test) throw new Chat.ErrorMessage(`There is no suspect test for '${target}'. Check spelling?`);\n\n\t\t\tconst [out, error] = await LoginServer.request('suspects/end', {\n\t\t\t\tformat,\n\t\t\t});\n\t\t\tif (out?.actionerror || error) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Error ending suspect: ${out?.actionerror || error?.message}`);\n\t\t\t}\n\n\t\t\tthis.privateGlobalModAction(`${user.name} removed the ${test.tier} suspect test.`);\n\t\t\tthis.globalModlog('SUSPECTTEST', null, `removed ${test.tier}`);\n\n\t\t\tdelete suspectTests.suspects[format];\n\t\t\tsaveSuspectTests();\n\t\t\tthis.sendReply(`Removed a suspect test notice for ${test.suspect} in ${test.tier}.`);\n\t\t\tthis.sendReply(`Remember to remove COIL settings with /suspects deletecoil if you had them enabled.`);\n\t\t},\n\n\t\twhitelist(target, room, user) {\n\t\t\tthis.checkCan('gdeclare');\n\n\t\t\tconst userid = toID(target);\n\n\t\t\tif (!userid || userid.length > 18) {\n\t\t\t\tif (suspectTests.whitelist.length) {\n\t\t\t\t\tthis.sendReplyBox(`Current users with /suspects access: <username>${suspectTests.whitelist.join('</username>, <username>')}</username>`);\n\t\t\t\t}\n\t\t\t\treturn this.parse(`/help suspects`);\n\t\t\t}\n\n\t\t\tif (suspectTests.whitelist.includes(userid)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${userid} is already whitelisted to add suspect tests.`);\n\t\t\t}\n\n\t\t\tthis.privateGlobalModAction(`${user.name} whitelisted ${userid} to add suspect tests.`);\n\t\t\tthis.globalModlog('SUSPECTTEST', null, `whitelisted ${userid}`);\n\n\t\t\tsuspectTests.whitelist.push(userid);\n\t\t\tsaveSuspectTests();\n\t\t},\n\n\t\tunwhitelist(target, room, user) {\n\t\t\tthis.checkCan('gdeclare');\n\n\t\t\tconst userid = toID(target);\n\n\t\t\tif (!userid || userid.length > 18) {\n\t\t\t\treturn this.parse(`/help suspects`);\n\t\t\t}\n\n\t\t\tconst index = suspectTests.whitelist.indexOf(userid);\n\n\t\t\tif (index < 0) {\n\t\t\t\tthrow new Chat.ErrorMessage(`${userid} is not whitelisted to add suspect tests.`);\n\t\t\t}\n\n\t\t\tthis.privateGlobalModAction(`${user.name} unwhitelisted ${userid} from adding suspect tests.`);\n\t\t\tthis.globalModlog('SUSPECTTEST', null, `unwhitelisted ${userid}`);\n\n\t\t\tsuspectTests.whitelist.splice(index, 1);\n\t\t\tsaveSuspectTests();\n\t\t},\n\n\t\tasync verify(target, room, user) {\n\t\t\tconst formatid = toID(target);\n\t\t\tif (!suspectTests.suspects[formatid]) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"There is no suspect test running for the given format.\");\n\t\t\t}\n\t\t\tconst [out, error] = await LoginServer.request(\"suspects/verify\", {\n\t\t\t\tformatid,\n\t\t\t\tuserid: user.id,\n\t\t\t});\n\t\t\tif (error) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"Error verifying for suspect: \" + error.message);\n\t\t\t}\n\t\t\tif (out?.actionerror) {\n\t\t\t\tthrow new Chat.ErrorMessage(out.actionerror);\n\t\t\t}\n\t\t\tthis.sendReply(\n\t\t\t\tout.result ?\n\t\t\t\t\t`You have successfully verified for the ${formatid} suspect test.` :\n\t\t\t\t\t`You could not verify for the ${formatid} suspect test, as you do not meet the requirements.`\n\t\t\t);\n\t\t},\n\n\t\thelp() {\n\t\t\treturn this.parse('/help suspects');\n\t\t},\n\n\t\tdeletebvalue: 'setbvalue',\n\t\tdeletecoil: 'setbvalue',\n\t\tsbv: 'setbvalue',\n\t\tdbv: 'setbvalue',\n\t\tsc: 'setbvalue',\n\t\tdc: 'setbvalue',\n\t\tsetcoil: 'setbvalue',\n\t\tasync setbvalue(target, room, user, connection, cmd) {\n\t\t\tcheckPermissions(this);\n\t\t\tif (!toID(target)) {\n\t\t\t\treturn this.parse(`/help ${cmd}`);\n\t\t\t}\n\t\t\tconst [formatStr, source] = this.splitOne(target);\n\t\t\tconst format = Dex.formats.get(formatStr);\n\t\t\tlet bVal: number | undefined = parseFloat(source);\n\t\t\tif (cmd.startsWith('d')) {\n\t\t\t\tbVal = undefined;\n\t\t\t} else if (!source || isNaN(bVal) || bVal < 1) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Specify a valid COIL B value.`);\n\t\t\t}\n\t\t\tif (!toID(formatStr) || !format.exists) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Specify a valid format to set a COIL B value for. Check spelling?`);\n\t\t\t}\n\t\t\tthis.sendReply(`Updating...`);\n\t\t\tconst [res, error] = await LoginServer.request('updatecoil', {\n\t\t\t\tformat: format.id,\n\t\t\t\tcoil_b: bVal,\n\t\t\t});\n\t\t\tif (error) {\n\t\t\t\tthrow new Chat.ErrorMessage(error.message);\n\t\t\t}\n\t\t\tif (!res || res.actionerror) {\n\t\t\t\tthrow new Chat.ErrorMessage(res?.actionerror || \"The loginserver is currently disabled.\");\n\t\t\t}\n\t\t\tthis.globalModlog(`${source ? 'SET' : 'REMOVE'}BVALUE`, null, `${format.id}${bVal ? ` to ${bVal}` : \"\"}`);\n\t\t\tthis.addGlobalModAction(\n\t\t\t\t`${user.name} ${bVal ? `set B value for ${format.name} to ${bVal}` : `removed B value for ${format.name}`}.`\n\t\t\t);\n\t\t\tif (source) {\n\t\t\t\treturn this.sendReply(`COIL B value for ${format.name} set to ${bVal}.`);\n\t\t\t} else {\n\t\t\t\treturn this.sendReply(`Removed COIL B value for ${format.name}.`);\n\t\t\t}\n\t\t},\n\t\tsetbvaluehelp: [\n\t\t\t`/suspects setbvalue OR /suspects sbv [formatid], [B value] - Activate COIL ranking for the given [formatid] with the given [B value].`,\n\t\t\t`Requires: suspect whitelist ~`,\n\t\t],\n\t},\n\n\tsuspectshelp() {\n\t\tthis.sendReplyBox(\n\t\t\t`Commands to manage suspect tests:<br />` +\n\t\t\t`<code>/suspects</code>: displays currently running suspect tests.<br />` +\n\t\t\t`<code>/suspects add [tier], [suspect], [date], [...reqs]</code>: adds a suspect test. Date in the format MM/DD. ` +\n\t\t\t`Reqs in the format [key]=[value], where valid keys are 'coil', 'elo', and 'gxe', delimited by commas. At least one is required. <br />` +\n\t\t\t`(note that if you are using COIL, you must set a B value independently with <code>/suspects setcoil</code>). Requires: ~<br />` +\n\t\t\t`<code>/suspects remove [tier]</code>: deletes a suspect test. Requires: ~<br />` +\n\t\t\t`<code>/suspects whitelist [username]</code>: allows [username] to add suspect tests. Requires: ~<br />` +\n\t\t\t`<code>/suspects unwhitelist [username]</code>: disallows [username] from adding suspect tests. Requires: ~<br />` +\n\t\t\t`<code>/suspects setbvalue OR /suspects sbv [formatid], [B value]</code>: Activate COIL ranking for the given [formatid] with the given [B value].` +\n\t\t\t`Requires: suspect whitelist ~`\n\t\t);\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
