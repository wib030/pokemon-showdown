{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/randombattles/winrates.tsx"],
  "sourcesContent": ["/**\n * A chat plugin to store, calculate, and view winrates in random battle formats.\n * @author mia-pi-git\n */\n\nimport { FS, Utils } from '../../../lib';\n\ninterface Stats {\n\telo: number;\n\tmonth: string;\n\tformats: Record<string, FormatData>;\n}\n\ninterface MonEntry {\n\ttimesGenerated: number;\n\tnumWins: number;\n}\n\ninterface FormatData {\n\tmons: Record<string, MonEntry>;\n\tperiod?: number; // how often it resets - defaults to 1mo\n}\n\nconst STATS_PATH = Monitor.logPath('randbats/{{MONTH}}-winrates.json').path;\nexport const stats = getDefaultStats();\n\ntry {\n\tconst path = STATS_PATH.replace('{{MONTH}}', getMonth());\n\tif (!Monitor.logPath('randbats/').existsSync()) {\n\t\tMonitor.logPath('randbats/').mkdirSync();\n\t}\n\tconst savedStats = JSON.parse(FS(path).readSync());\n\tstats.elo = savedStats.elo;\n\tstats.month = savedStats.month;\n\tfor (const k in stats.formats) {\n\t\tstats.formats[k] = savedStats.formats[k] || stats.formats[k];\n\t}\n} catch {}\n\nfunction getDefaultStats(): Stats {\n\treturn {\n\t\telo: 1500,\n\t\tmonth: getMonth(),\n\t\tformats: {\n\t\t\t// all of these requested by rands staff. they don't anticipate it being changed much\n\t\t\t// so i'm not spending the time to add commands to toggle this\n\t\t\tgen9randombattle: { mons: {} },\n\t\t\tgen9randomdoublesbattle: { mons: {} },\n\t\t\tgen9babyrandombattle: { mons: {} },\n\t\t\tgen9chatbats: { mons: {} },\n\t\t\tgen9superstaffbrosultimate: { mons: {} },\n\t\t\tgen8randombattle: { mons: {} },\n\t\t\tgen7randombattle: { mons: {} },\n\t\t\tgen6randombattle: { mons: {} },\n\t\t\tgen5randombattle: { mons: {} },\n\t\t\tgen4randombattle: { mons: {} },\n\t\t\tgen3randombattle: { mons: {} },\n\t\t\tgen2randombattle: { mons: {} },\n\t\t\tgen1randombattle: { mons: {} },\n\t\t},\n\t};\n}\n\nexport function saveStats(month = getMonth()) {\n\t// clone to avoid race conditions with the data getting deleted later (on month rollover)\n\tconst curStats = { ...stats };\n\tFS(STATS_PATH.replace('{{MONTH}}', month)).writeUpdate(() => JSON.stringify(curStats));\n}\n\nfunction getMonth() {\n\treturn Chat.toTimestamp(new Date()).split(' ')[0].slice(0, -3);\n}\n\n// no, this cannot be baseSpecies - some formes matter, ex arceus formes\n// no, there is no better way to do this.\n// yes, i tried.\nexport function getSpeciesName(set: PokemonSet, format: Format) {\n\tconst species = set.species;\n\tconst item = Dex.items.get(set.item);\n\tconst moves = set.moves;\n\tconst megaRayquazaPossible = ['gen6', 'gen7'].includes(format.mod) && !format.ruleset.includes('Mega Rayquaza Clause');\n\tif (species.startsWith(\"Pikachu-\")) {\n\t\treturn 'Pikachu';\n\t} else if (species.startsWith(\"Unown-\")) {\n\t\treturn 'Unown';\n\t} else if (species === \"Gastrodon-East\") {\n\t\treturn 'Gastrodon';\n\t} else if (species === \"Magearna-Original\") {\n\t\treturn \"Magearna\";\n\t} else if (species === \"Genesect-Douse\") {\n\t\treturn \"Genesect\";\n\t} else if (species === \"Dudunsparce-Three-Segment\") {\n\t\treturn 'Dudunsparce';\n\t} else if (species === \"Maushold-Four\") {\n\t\treturn 'Maushold';\n\t} else if (species === \"Greninja-Bond\") {\n\t\treturn 'Greninja';\n\t} else if (species === \"Keldeo-Resolute\") {\n\t\treturn 'Keldeo';\n\t} else if (species === \"Zarude-Dada\") {\n\t\treturn 'Zarude';\n\t} else if (species === 'Polteageist-Antique') {\n\t\treturn 'Polteageist';\n\t} else if (species === 'Sinistcha-Masterpiece') {\n\t\treturn 'Sinistcha';\n\t} else if (species === \"Squawkabilly-Blue\") {\n\t\treturn \"Squawkabilly\";\n\t} else if (species === \"Squawkabilly-White\") {\n\t\treturn \"Squawkabilly-Yellow\";\n\t} else if (species.startsWith(\"Basculin-\")) {\n\t\treturn \"Basculin\";\n\t} else if (species.startsWith(\"Sawsbuck-\")) {\n\t\treturn \"Sawsbuck\";\n\t} else if (species.startsWith(\"Vivillon-\")) {\n\t\treturn \"Vivillon\";\n\t} else if (species.startsWith(\"Florges-\")) {\n\t\treturn \"Florges\";\n\t} else if (species.startsWith(\"Furfrou-\")) {\n\t\treturn \"Furfrou\";\n\t} else if (species.startsWith(\"Minior-\")) {\n\t\treturn \"Minior\";\n\t} else if (species.startsWith(\"Toxtricity-\")) {\n\t\treturn 'Toxtricity';\n\t} else if (species.startsWith(\"Tatsugiri-\")) {\n\t\treturn 'Tatsugiri';\n\t} else if (species.startsWith(\"Alcremie-\")) {\n\t\treturn 'Alcremie';\n\t} else if (species === \"Zacian\" && item.name === \"Rusted Sword\") {\n\t\treturn 'Zacian-Crowned';\n\t} else if (species === \"Zamazenta\" && item.name === \"Rusted Shield\") {\n\t\treturn \"Zamazenta-Crowned\";\n\t} else if (species === \"Kyogre\" && item.name === \"Blue Orb\") {\n\t\treturn \"Kyogre-Primal\";\n\t} else if (species === \"Groudon\" && item.name === \"Red Orb\") {\n\t\treturn \"Groudon-Primal\";\n\t} else if (item.megaStone) {\n\t\treturn item.megaStone;\n\t} else if (species === \"Rayquaza\" && moves.includes('Dragon Ascent') && !item.zMove && megaRayquazaPossible) {\n\t\treturn \"Rayquaza-Mega\";\n\t} else if (species === \"Poltchageist-Artisan\") { // Babymons from here on out\n\t\treturn \"Poltchageist\";\n\t} else if (species === \"Shellos-East\") {\n\t\treturn \"Shellos\";\n\t} else if (species === \"Sinistea-Antique\") {\n\t\treturn \"Sinistea\";\n\t} else if (species.startsWith(\"Deerling-\")) {\n\t\treturn \"Deerling\";\n\t} else if (species.startsWith(\"Flabe\\u0301be\\u0301-\")) {\n\t\treturn \"Flabe\\u0301be\\u0301\";\n\t} else {\n\t\treturn species;\n\t}\n}\n\nfunction checkRollover() {\n\tif (stats.month !== getMonth()) {\n\t\tsaveStats(stats.month);\n\t\tObject.assign(stats, getDefaultStats());\n\t\tsaveStats();\n\t}\n}\n\nconst getZScore = (data: MonEntry) => (\n\t2 * Math.sqrt(data.timesGenerated) * (data.numWins / data.timesGenerated - 0.5)\n);\n\nexport const handlers: Chat.Handlers = {\n\tonBattleEnd(battle, winner, players) {\n\t\tvoid collectStats(battle, winner, players);\n\t},\n};\n\nasync function collectStats(battle: RoomBattle, winner: ID, players: ID[]) {\n\tconst formatData = stats.formats[battle.format];\n\tlet eloFloor = stats.elo;\n\tconst format = Dex.formats.get(battle.format);\n\tif (format.mod === 'gen2') {\n\t\t// ladder is inactive, so use a lower threshold\n\t\teloFloor = 1150;\n\t} else if (format.team === 'randomBaby') {\n\t\t// ladder is even more inactive, so an even lower threshold\n\t\teloFloor = 1000;\n\t} else if (format.mod !== `gen${Dex.gen}`) {\n\t\teloFloor = 1300;\n\t} else if (format.gameType === 'doubles') {\n\t\t// may need to be raised again if ladder takes off further\n\t\teloFloor = 1400;\n\t}\n\tif (!formatData || ((format.mod !== 'gen9ssb' && format.mod !== 'chatbats') && battle.rated < eloFloor) || !winner)\n\t\treturn;\n\tcheckRollover();\n\tfor (const p of battle.players) {\n\t\tconst team = await battle.getPlayerTeam(p);\n\t\tif (!team) return; // ???\n\t\tconst mons = team.map(f => getSpeciesName(f, format));\n\t\tfor (const mon of mons) {\n\t\t\tif (!formatData.mons[mon]) formatData.mons[mon] = { timesGenerated: 0, numWins: 0 };\n\t\t\tformatData.mons[mon].timesGenerated++;\n\t\t\tif (toID(winner) === toID(p.name)) {\n\t\t\t\tformatData.mons[mon].numWins++;\n\t\t\t}\n\t\t}\n\t}\n\tsaveStats();\n}\n\nexport const commands: Chat.ChatCommands = {\n\trwr: 'randswinrates',\n\trandswinrates(target, room, user) {\n\t\ttarget = toID(target);\n\t\tif (/^(gen|)[0-9]+$/.test(target)) {\n\t\t\tif (target.startsWith('gen')) target = target.slice(3);\n\t\t\ttarget = `gen${target}randombattle`;\n\t\t}\n\t\treturn this.parse(`/j view-winrates-${target ? Dex.formats.get(target).id : `gen${Dex.gen}randombattle`}`);\n\t},\n\trandswinrateshelp: [\n\t\t'/randswinrates OR /rwr [format] - Get a list of the win rates for all Pokemon in the given Random Battles format.',\n\t],\n\n\tasync removewinrates(target, room, user) {\n\t\tthis.checkCan('rangeban');\n\t\tif (!/^[0-9]{4}-[0-9]{2}$/.test(target) || target === getMonth()) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid month: ${target}`);\n\t\t}\n\t\tconst path = STATS_PATH.replace('{{MON}}', target);\n\t\tif (!(await FS(path).exists())) {\n\t\t\tthrow new Chat.ErrorMessage(`No stats for the month ${target}.`);\n\t\t}\n\t\tawait FS(path).unlinkIfExists();\n\t\tthis.globalModlog('REMOVEWINRATES', null, target);\n\t\tthis.privateGlobalModAction(`${user.name} removed Random Battle winrates for the month of ${target}`);\n\t},\n};\n\nexport const pages: Chat.PageTable = {\n\tasync winrates(query, user) {\n\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\tquery = query.join('-').split('--');\n\t\tconst format = toID(query.shift());\n\t\tif (!format) throw new Chat.ErrorMessage(`Specify a format to view winrates for.`);\n\t\tif (!stats.formats[format]) {\n\t\t\tthrow new Chat.ErrorMessage(`That format does not have winrates tracked.`);\n\t\t}\n\t\tcheckRollover();\n\t\tconst sorter = toID(query.shift() || 'zscore');\n\t\tif (!['zscore', 'raw'].includes(sorter)) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid sorting method. Must be either 'zscore' or 'raw'.`);\n\t\t}\n\t\tconst month = query.shift() || getMonth();\n\t\tif (!/^[0-9]{4}-[0-9]{2}$/.test(month)) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid month: ${month}`);\n\t\t}\n\t\tconst isOldMonth = month !== getMonth();\n\t\tif (isOldMonth && !(await FS(STATS_PATH.replace('{{MONTH}}', month)).exists())) {\n\t\t\tthrow new Chat.ErrorMessage(`There are no winrates for that month.`);\n\t\t}\n\t\tconst prevMonth = new Date(new Date(`${month}-15`).getTime() - (30 * 24 * 60 * 60 * 1000)).toISOString().slice(0, 7);\n\t\tconst nextMonth = new Date(new Date(`${month}-15`).getTime() + (30 * 24 * 60 * 60 * 1000)).toISOString().slice(0, 7);\n\t\tconst prevMonthExists = await FS(STATS_PATH.replace('{{MONTH}}', prevMonth)).exists();\n\t\tconst nextMonthExists = await FS(STATS_PATH.replace('{{MONTH}}', nextMonth)).exists();\n\t\tconst statData: Stats = month === stats.month ?\n\t\t\tstats : JSON.parse(await FS(STATS_PATH.replace('{{MONTH}}', month)).read());\n\t\tconst formatData = statData.formats[format];\n\t\tif (!formatData) {\n\t\t\treturn <div class=\"pad\">\n\t\t\t\t<WinratesHeader\n\t\t\t\t\tformatID={format} month={month} sorter={sorter} prevMonth={prevMonth}\n\t\t\t\t\tprevMonthExists={prevMonthExists} nextMonth={nextMonth} nextMonthExists={nextMonthExists}\n\t\t\t\t/>\n\t\t\t\t<div class=\"message-error\">No stats for that format found on that month.</div>\n\t\t\t</div>;\n\t\t}\n\t\tthis.title = `[Winrates] [${format}] ${month}`;\n\t\tlet sortFn: (val: [string, MonEntry]) => Utils.Comparable;\n\n\t\tif (sorter === 'zscore') {\n\t\t\tsortFn = ([_, data]) => [-getZScore(data), -data.timesGenerated];\n\t\t} else {\n\t\t\tsortFn = ([_, data]) => [\n\t\t\t\t-(data.numWins / data.timesGenerated), -data.numWins, -data.timesGenerated,\n\t\t\t];\n\t\t}\n\t\tconst mons = Utils.sortBy(Object.entries(formatData.mons), sortFn);\n\t\treturn <div class=\"pad\">\n\t\t\t<WinratesHeader\n\t\t\t\tformatID={format} month={month} sorter={sorter} prevMonth={prevMonth}\n\t\t\t\tprevMonthExists={prevMonthExists} nextMonth={nextMonth} nextMonthExists={nextMonthExists}\n\t\t\t/>\n\t\t\t<div class=\"ladder pad\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Pokemon</th>\n\t\t\t\t\t\t<th>Win %</th>\n\t\t\t\t\t\t<th>Z-Score</th>\n\t\t\t\t\t\t<th>Raw wins</th>\n\t\t\t\t\t\t<th>Times generated</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t{mons.map(([mon, data]) => (<tr>\n\t\t\t\t\t\t<td>{Dex.species.get(mon).name}</td>\n\t\t\t\t\t\t<td>{((data.numWins / data.timesGenerated) * 100).toFixed(2)}%</td>\n\t\t\t\t\t\t<td>{getZScore(data).toFixed(3)}</td>\n\t\t\t\t\t\t<td>{data.numWins}</td>\n\t\t\t\t\t\t<td>{data.timesGenerated}</td>\n\t\t\t\t\t</tr>))}\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>;\n\t},\n};\n\nclass WinratesHeader extends Chat.JSX.Component<{\n\tformatID: ID, month: string, sorter: string, prevMonth: string,\n\tprevMonthExists: boolean, nextMonth: string, nextMonthExists: boolean,\n}> {\n\trender() {\n\t\tconst { formatID, month, sorter, prevMonth, prevMonthExists, nextMonth, nextMonthExists } = this.props;\n\t\tconst formatName = Dex.formats.get(formatID).name;\n\t\tconst otherSort = sorter === 'zscore' ? 'Raw' : 'Z-Score';\n\t\treturn <>\n\t\t\t<h2>Winrates for {formatName} ({month})</h2>\n\t\t\t{prevMonthExists &&\n\t\t\t\t<a class=\"button\" href={`/view-winrates-${formatID}--${sorter}--${prevMonth}`}>Previous month</a>}\n\t\t\t{(prevMonthExists && nextMonthExists) && ' | '}\n\t\t\t{nextMonthExists &&\n\t\t\t\t<a class=\"button\" href={`/view-winrates-${formatID}--${sorter}--${nextMonth}`}>Next month</a>}\n\t\t\t{(prevMonthExists || nextMonthExists) && ' | '}\n\t\t\t<a class=\"button\" target=\"replace\" href={`/view-winrates-${formatID}--${toID(otherSort)}--${month}`}>\n\t\t\t\tSort by {otherSort} descending\n\t\t\t</a>\n\t\t\t<hr />\n\t\t</>;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,iBAA0B;AAkB1B,MAAM,aAAa,QAAQ,QAAQ,kCAAkC,EAAE;AAChE,MAAM,QAAQ,gBAAgB;AAErC,IAAI;AACH,QAAM,OAAO,WAAW,QAAQ,aAAa,SAAS,CAAC;AACvD,MAAI,CAAC,QAAQ,QAAQ,WAAW,EAAE,WAAW,GAAG;AAC/C,YAAQ,QAAQ,WAAW,EAAE,UAAU;AAAA,EACxC;AACA,QAAM,aAAa,KAAK,UAAM,eAAG,IAAI,EAAE,SAAS,CAAC;AACjD,QAAM,MAAM,WAAW;AACvB,QAAM,QAAQ,WAAW;AACzB,aAAW,KAAK,MAAM,SAAS;AAC9B,UAAM,QAAQ,CAAC,IAAI,WAAW,QAAQ,CAAC,KAAK,MAAM,QAAQ,CAAC;AAAA,EAC5D;AACD,QAAQ;AAAC;AAET,SAAS,kBAAyB;AACjC,SAAO;AAAA,IACN,KAAK;AAAA,IACL,OAAO,SAAS;AAAA,IAChB,SAAS;AAAA;AAAA;AAAA,MAGR,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,yBAAyB,EAAE,MAAM,CAAC,EAAE;AAAA,MACpC,sBAAsB,EAAE,MAAM,CAAC,EAAE;AAAA,MACjC,cAAc,EAAE,MAAM,CAAC,EAAE;AAAA,MACzB,4BAA4B,EAAE,MAAM,CAAC,EAAE;AAAA,MACvC,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,MAC7B,kBAAkB,EAAE,MAAM,CAAC,EAAE;AAAA,IAC9B;AAAA,EACD;AACD;AAEO,SAAS,UAAU,QAAQ,SAAS,GAAG;AAE7C,QAAM,WAAW,EAAE,GAAG,MAAM;AAC5B,qBAAG,WAAW,QAAQ,aAAa,KAAK,CAAC,EAAE,YAAY,MAAM,KAAK,UAAU,QAAQ,CAAC;AACtF;AAEA,SAAS,WAAW;AACnB,SAAO,KAAK,YAAY,oBAAI,KAAK,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE;AAC9D;AAKO,SAAS,eAAe,KAAiB,QAAgB;AAC/D,QAAM,UAAU,IAAI;AACpB,QAAM,OAAO,IAAI,MAAM,IAAI,IAAI,IAAI;AACnC,QAAM,QAAQ,IAAI;AAClB,QAAM,uBAAuB,CAAC,QAAQ,MAAM,EAAE,SAAS,OAAO,GAAG,KAAK,CAAC,OAAO,QAAQ,SAAS,sBAAsB;AACrH,MAAI,QAAQ,WAAW,UAAU,GAAG;AACnC,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,QAAQ,GAAG;AACxC,WAAO;AAAA,EACR,WAAW,YAAY,kBAAkB;AACxC,WAAO;AAAA,EACR,WAAW,YAAY,qBAAqB;AAC3C,WAAO;AAAA,EACR,WAAW,YAAY,kBAAkB;AACxC,WAAO;AAAA,EACR,WAAW,YAAY,6BAA6B;AACnD,WAAO;AAAA,EACR,WAAW,YAAY,iBAAiB;AACvC,WAAO;AAAA,EACR,WAAW,YAAY,iBAAiB;AACvC,WAAO;AAAA,EACR,WAAW,YAAY,mBAAmB;AACzC,WAAO;AAAA,EACR,WAAW,YAAY,eAAe;AACrC,WAAO;AAAA,EACR,WAAW,YAAY,uBAAuB;AAC7C,WAAO;AAAA,EACR,WAAW,YAAY,yBAAyB;AAC/C,WAAO;AAAA,EACR,WAAW,YAAY,qBAAqB;AAC3C,WAAO;AAAA,EACR,WAAW,YAAY,sBAAsB;AAC5C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,WAAW,GAAG;AAC3C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,WAAW,GAAG;AAC3C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,WAAW,GAAG;AAC3C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,UAAU,GAAG;AAC1C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,UAAU,GAAG;AAC1C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,SAAS,GAAG;AACzC,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,aAAa,GAAG;AAC7C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,YAAY,GAAG;AAC5C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,WAAW,GAAG;AAC3C,WAAO;AAAA,EACR,WAAW,YAAY,YAAY,KAAK,SAAS,gBAAgB;AAChE,WAAO;AAAA,EACR,WAAW,YAAY,eAAe,KAAK,SAAS,iBAAiB;AACpE,WAAO;AAAA,EACR,WAAW,YAAY,YAAY,KAAK,SAAS,YAAY;AAC5D,WAAO;AAAA,EACR,WAAW,YAAY,aAAa,KAAK,SAAS,WAAW;AAC5D,WAAO;AAAA,EACR,WAAW,KAAK,WAAW;AAC1B,WAAO,KAAK;AAAA,EACb,WAAW,YAAY,cAAc,MAAM,SAAS,eAAe,KAAK,CAAC,KAAK,SAAS,sBAAsB;AAC5G,WAAO;AAAA,EACR,WAAW,YAAY,wBAAwB;AAC9C,WAAO;AAAA,EACR,WAAW,YAAY,gBAAgB;AACtC,WAAO;AAAA,EACR,WAAW,YAAY,oBAAoB;AAC1C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,WAAW,GAAG;AAC3C,WAAO;AAAA,EACR,WAAW,QAAQ,WAAW,sBAAsB,GAAG;AACtD,WAAO;AAAA,EACR,OAAO;AACN,WAAO;AAAA,EACR;AACD;AAEA,SAAS,gBAAgB;AACxB,MAAI,MAAM,UAAU,SAAS,GAAG;AAC/B,cAAU,MAAM,KAAK;AACrB,WAAO,OAAO,OAAO,gBAAgB,CAAC;AACtC,cAAU;AAAA,EACX;AACD;AAEA,MAAM,YAAY,CAAC,SAClB,IAAI,KAAK,KAAK,KAAK,cAAc,KAAK,KAAK,UAAU,KAAK,iBAAiB;AAGrE,MAAM,WAA0B;AAAA,EACtC,YAAY,QAAQ,QAAQ,SAAS;AACpC,SAAK,aAAa,QAAQ,QAAQ,OAAO;AAAA,EAC1C;AACD;AAEA,eAAe,aAAa,QAAoB,QAAY,SAAe;AAC1E,QAAM,aAAa,MAAM,QAAQ,OAAO,MAAM;AAC9C,MAAI,WAAW,MAAM;AACrB,QAAM,SAAS,IAAI,QAAQ,IAAI,OAAO,MAAM;AAC5C,MAAI,OAAO,QAAQ,QAAQ;AAE1B,eAAW;AAAA,EACZ,WAAW,OAAO,SAAS,cAAc;AAExC,eAAW;AAAA,EACZ,WAAW,OAAO,QAAQ,MAAM,IAAI,GAAG,IAAI;AAC1C,eAAW;AAAA,EACZ,WAAW,OAAO,aAAa,WAAW;AAEzC,eAAW;AAAA,EACZ;AACA,MAAI,CAAC,cAAgB,OAAO,QAAQ,aAAa,OAAO,QAAQ,cAAe,OAAO,QAAQ,YAAa,CAAC;AAC3G;AACD,gBAAc;AACd,aAAW,KAAK,OAAO,SAAS;AAC/B,UAAM,OAAO,MAAM,OAAO,cAAc,CAAC;AACzC,QAAI,CAAC,KAAM;AACX,UAAM,OAAO,KAAK,IAAI,OAAK,eAAe,GAAG,MAAM,CAAC;AACpD,eAAW,OAAO,MAAM;AACvB,UAAI,CAAC,WAAW,KAAK,GAAG,EAAG,YAAW,KAAK,GAAG,IAAI,EAAE,gBAAgB,GAAG,SAAS,EAAE;AAClF,iBAAW,KAAK,GAAG,EAAE;AACrB,UAAI,KAAK,MAAM,MAAM,KAAK,EAAE,IAAI,GAAG;AAClC,mBAAW,KAAK,GAAG,EAAE;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACA,YAAU;AACX;AAEO,MAAM,WAA8B;AAAA,EAC1C,KAAK;AAAA,EACL,cAAc,QAAQ,MAAM,MAAM;AACjC,aAAS,KAAK,MAAM;AACpB,QAAI,iBAAiB,KAAK,MAAM,GAAG;AAClC,UAAI,OAAO,WAAW,KAAK,EAAG,UAAS,OAAO,MAAM,CAAC;AACrD,eAAS,MAAM,MAAM;AAAA,IACtB;AACA,WAAO,KAAK,MAAM,oBAAoB,SAAS,IAAI,QAAQ,IAAI,MAAM,EAAE,KAAK,MAAM,IAAI,GAAG,cAAc,EAAE;AAAA,EAC1G;AAAA,EACA,mBAAmB;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,QAAQ,MAAM,MAAM;AACxC,SAAK,SAAS,UAAU;AACxB,QAAI,CAAC,sBAAsB,KAAK,MAAM,KAAK,WAAW,SAAS,GAAG;AACjE,YAAM,IAAI,KAAK,aAAa,kBAAkB,MAAM,EAAE;AAAA,IACvD;AACA,UAAM,OAAO,WAAW,QAAQ,WAAW,MAAM;AACjD,QAAI,CAAE,UAAM,eAAG,IAAI,EAAE,OAAO,GAAI;AAC/B,YAAM,IAAI,KAAK,aAAa,0BAA0B,MAAM,GAAG;AAAA,IAChE;AACA,cAAM,eAAG,IAAI,EAAE,eAAe;AAC9B,SAAK,aAAa,kBAAkB,MAAM,MAAM;AAChD,SAAK,uBAAuB,GAAG,KAAK,IAAI,oDAAoD,MAAM,EAAE;AAAA,EACrG;AACD;AAEO,MAAM,QAAwB;AAAA,EACpC,MAAM,SAAS,OAAO,MAAM;AAC3B,QAAI,CAAC,KAAK,MAAO,QAAO,MAAM;AAC9B,YAAQ,MAAM,KAAK,GAAG,EAAE,MAAM,IAAI;AAClC,UAAM,SAAS,KAAK,MAAM,MAAM,CAAC;AACjC,QAAI,CAAC,OAAQ,OAAM,IAAI,KAAK,aAAa,wCAAwC;AACjF,QAAI,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC3B,YAAM,IAAI,KAAK,aAAa,6CAA6C;AAAA,IAC1E;AACA,kBAAc;AACd,UAAM,SAAS,KAAK,MAAM,MAAM,KAAK,QAAQ;AAC7C,QAAI,CAAC,CAAC,UAAU,KAAK,EAAE,SAAS,MAAM,GAAG;AACxC,YAAM,IAAI,KAAK,aAAa,2DAA2D;AAAA,IACxF;AACA,UAAM,QAAQ,MAAM,MAAM,KAAK,SAAS;AACxC,QAAI,CAAC,sBAAsB,KAAK,KAAK,GAAG;AACvC,YAAM,IAAI,KAAK,aAAa,kBAAkB,KAAK,EAAE;AAAA,IACtD;AACA,UAAM,aAAa,UAAU,SAAS;AACtC,QAAI,cAAc,CAAE,UAAM,eAAG,WAAW,QAAQ,aAAa,KAAK,CAAC,EAAE,OAAO,GAAI;AAC/E,YAAM,IAAI,KAAK,aAAa,uCAAuC;AAAA,IACpE;AACA,UAAM,YAAY,IAAI,MAAK,oBAAI,KAAK,GAAG,KAAK,KAAK,GAAE,QAAQ,IAAK,KAAK,KAAK,KAAK,KAAK,GAAK,EAAE,YAAY,EAAE,MAAM,GAAG,CAAC;AACnH,UAAM,YAAY,IAAI,MAAK,oBAAI,KAAK,GAAG,KAAK,KAAK,GAAE,QAAQ,IAAK,KAAK,KAAK,KAAK,KAAK,GAAK,EAAE,YAAY,EAAE,MAAM,GAAG,CAAC;AACnH,UAAM,kBAAkB,UAAM,eAAG,WAAW,QAAQ,aAAa,SAAS,CAAC,EAAE,OAAO;AACpF,UAAM,kBAAkB,UAAM,eAAG,WAAW,QAAQ,aAAa,SAAS,CAAC,EAAE,OAAO;AACpF,UAAM,WAAkB,UAAU,MAAM,QACvC,QAAQ,KAAK,MAAM,UAAM,eAAG,WAAW,QAAQ,aAAa,KAAK,CAAC,EAAE,KAAK,CAAC;AAC3E,UAAM,aAAa,SAAS,QAAQ,MAAM;AAC1C,QAAI,CAAC,YAAY;AAChB,aAAO,uBAAC,SAAI,OAAM,SACjB;AAAA,QAAC;AAAA;AAAA,UACA,UAAU;AAAA,UAAQ;AAAA,UAAc;AAAA,UAAgB;AAAA,UAChD;AAAA,UAAkC;AAAA,UAAsB;AAAA;AAAA,MACzD,GACA,uBAAC,SAAI,OAAM,mBAAgB,+CAA6C,CACzE;AAAA,IACD;AACA,SAAK,QAAQ,eAAe,MAAM,KAAK,KAAK;AAC5C,QAAI;AAEJ,QAAI,WAAW,UAAU;AACxB,eAAS,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,UAAU,IAAI,GAAG,CAAC,KAAK,cAAc;AAAA,IAChE,OAAO;AACN,eAAS,CAAC,CAAC,GAAG,IAAI,MAAM;AAAA,QACvB,EAAE,KAAK,UAAU,KAAK;AAAA,QAAiB,CAAC,KAAK;AAAA,QAAS,CAAC,KAAK;AAAA,MAC7D;AAAA,IACD;AACA,UAAM,OAAO,iBAAM,OAAO,OAAO,QAAQ,WAAW,IAAI,GAAG,MAAM;AACjE,WAAO,uBAAC,SAAI,OAAM,SACjB;AAAA,MAAC;AAAA;AAAA,QACA,UAAU;AAAA,QAAQ;AAAA,QAAc;AAAA,QAAgB;AAAA,QAChD;AAAA,QAAkC;AAAA,QAAsB;AAAA;AAAA,IACzD,GACA,uBAAC,SAAI,OAAM,gBACV,uBAAC,eACA,uBAAC,YACA,uBAAC,YAAG,SAAO,GACX,uBAAC,YAAG,OAAK,GACT,uBAAC,YAAG,SAAO,GACX,uBAAC,YAAG,UAAQ,GACZ,uBAAC,YAAG,iBAAe,CACpB,GACC,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,MAAO,uBAAC,YAC5B,uBAAC,YAAI,IAAI,QAAQ,IAAI,GAAG,EAAE,IAAK,GAC/B,uBAAC,aAAM,KAAK,UAAU,KAAK,iBAAkB,KAAK,QAAQ,CAAC,GAAE,GAAC,GAC9D,uBAAC,YAAI,UAAU,IAAI,EAAE,QAAQ,CAAC,CAAE,GAChC,uBAAC,YAAI,KAAK,OAAQ,GAClB,uBAAC,YAAI,KAAK,cAAe,CAC1B,CAAM,CACP,CACD,CACD;AAAA,EACD;AACD;AAEA,MAAM,uBAAuB,KAAK,IAAI,UAGnC;AAAA,EACF,SAAS;AACR,UAAM,EAAE,UAAU,OAAO,QAAQ,WAAW,iBAAiB,WAAW,gBAAgB,IAAI,KAAK;AACjG,UAAM,aAAa,IAAI,QAAQ,IAAI,QAAQ,EAAE;AAC7C,UAAM,YAAY,WAAW,WAAW,QAAQ;AAChD,WAAO,4CACN,uBAAC,YAAG,iBAAc,YAAW,MAAG,OAAM,GAAC,GACtC,mBACA,uBAAC,OAAE,OAAM,UAAS,MAAM,kBAAkB,QAAQ,KAAK,MAAM,KAAK,SAAS,MAAI,gBAAc,GAC5F,mBAAmB,mBAAoB,OACxC,mBACA,uBAAC,OAAE,OAAM,UAAS,MAAM,kBAAkB,QAAQ,KAAK,MAAM,KAAK,SAAS,MAAI,YAAU,IACxF,mBAAmB,oBAAoB,OACzC,uBAAC,OAAE,OAAM,UAAS,QAAO,WAAU,MAAM,kBAAkB,QAAQ,KAAK,KAAK,SAAS,CAAC,KAAK,KAAK,MAAI,YAC3F,WAAU,aACpB,GACA,uBAAC,UAAG,CACL;AAAA,EACD;AACD;",
  "names": []
}
