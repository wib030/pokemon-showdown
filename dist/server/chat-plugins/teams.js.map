{
  "version": 3,
  "sources": ["../../../server/chat-plugins/teams.ts"],
  "sourcesContent": ["/**\n * Plugin for sharing / storing teams in a database.\n * By Mia.\n * @author mia-pi-git\n */\n\nimport { SQL, PGDatabase } from '../../lib/database';\nimport { FS, Utils } from '../../lib';\nimport * as crypto from 'crypto';\n\n/** Maximum amount of teams a user can have stored at once. */\nconst MAX_TEAMS = 200;\n/** Max teams that can be viewed in a search */\nconst MAX_SEARCH = 3000;\nconst ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\n\nexport const teamsDB = Config.usepostgres ? new PGDatabase(Config.usepostgres) : null!;\nexport const teamsTable = teamsDB?.getTable<\n\tStoredTeam\n>('teams', 'teamid');\n\nexport interface StoredTeam {\n\tteamid: string;\n\tteam: string;\n\townerid: ID;\n\tformat: ID;\n\ttitle: string | null;\n\tdate: Date;\n\t/** password */\n\tprivate: string | null;\n\tviews: number;\n}\n\ninterface TeamSearch {\n\tformat?: string;\n\towner?: string;\n\tpokemon?: string[];\n\tmoves?: string[];\n\tabilities?: string[];\n\tgen?: number;\n}\n\nfunction refresh(context: Chat.PageContext) {\n\treturn (\n\t\t`<button class=\"button\" name=\"send\" value=\"/j ${context.pageid}\" style=\"float: right\">` +\n\t\t` <i class=\"fa fa-refresh\"></i> ${context.tr('Refresh')}</button>`\n\t);\n}\n\nexport const TeamsHandler = new class {\n\treadyPromise: Promise<void> | null = teamsDB ? (async () => {\n\t\ttry {\n\t\t\tawait teamsDB.query()`SELECT * FROM teams LIMIT 1`;\n\t\t} catch {\n\t\t\tawait teamsDB.query(SQL(FS(`databases/schemas/teams.sql`).readSync()));\n\t\t}\n\t})() : null;\n\tdestroy() {\n\t\tvoid teamsDB?.close();\n\t}\n\n\tasync search(search: TeamSearch, user: User, count = 10, includePrivate = false) {\n\t\tconst where = [];\n\t\tif (count > 500) {\n\t\t\tthrow new Chat.ErrorMessage(\"Cannot search more than 500 teams.\");\n\t\t}\n\t\tif (search.format) {\n\t\t\twhere.push(where.length ? SQL` AND ` : SQL`WHERE `);\n\t\t\twhere.push(SQL`format = ${toID(search.format)}`);\n\t\t}\n\t\tif (search.owner) {\n\t\t\twhere.push(where.length ? SQL` AND ` : SQL`WHERE `);\n\t\t\twhere.push(SQL`ownerid = ${toID(search.owner)}`);\n\t\t}\n\t\tif (search.gen) {\n\t\t\twhere.push(where.length ? SQL` AND ` : SQL`WHERE `);\n\t\t\twhere.push(SQL`format LIKE ${`gen${search.gen}%`}`);\n\t\t}\n\t\tif (!includePrivate) {\n\t\t\twhere.push(where.length ? SQL` AND ` : SQL`WHERE `);\n\t\t\twhere.push(SQL`private IS NULL`);\n\t\t}\n\n\t\tconst result = await teamsTable.selectAll()`${where} ORDER BY date DESC LIMIT ${count}`;\n\t\treturn result.filter(row => {\n\t\t\tconst team = Teams.unpack(row.team)!;\n\t\t\tif (row.private && row.ownerid !== user.id) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet match = true;\n\t\t\tif (search.pokemon?.length) {\n\t\t\t\tmatch = search.pokemon.some(\n\t\t\t\t\tpokemon => team.some(set => toID(set.species) === toID(pokemon))\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!match) return false;\n\t\t\tif (search.moves?.length) {\n\t\t\t\tmatch = search.moves.some(\n\t\t\t\t\tmove => team.some(set => set.moves.some(m => toID(m) === toID(move)))\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!match) return false;\n\t\t\tif (search.abilities?.length) {\n\t\t\t\tmatch = search.abilities.some(\n\t\t\t\t\tability => team.some(set => toID(set.ability) === toID(ability))\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn match;\n\t\t});\n\t}\n\n\tisOMNickname(nickname: string) {\n\t\t// allow nicknames named after other mons/types/abilities/items - to support those OMs\n\t\tif (Dex.species.get(nickname).exists) {\n\t\t\t// I have a Forretress named Cathy and having it renamed to Trevenant (Forretress) is annoying\n\t\t\tif (toID(nickname) === 'cathy') return 'cathy';\n\t\t\treturn Dex.species.get(nickname).name;\n\t\t} else if (Dex.items.get(nickname).exists) {\n\t\t\treturn Dex.items.get(nickname).name;\n\t\t} else if (Dex.abilities.get(nickname).exists) {\n\t\t\treturn Dex.abilities.get(nickname).name;\n\t\t} else if (Dex.types.get(nickname).exists) {\n\t\t\treturn Dex.types.get(nickname).name;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync save(\n\t\tcontext: Chat.CommandContext,\n\t\tteam: {\n\t\t\tname?: string | null,\n\t\t\tpackedTeam: string,\n\t\t\tformat: string,\n\t\t\tprivacy?: boolean | string | null,\n\t\t},\n\t\tisUpdate?: number\n\t) {\n\t\tconst connection = context.connection;\n\t\tthis.validateAccess(connection, true);\n\n\t\tif (Monitor.countPrepBattle(connection.ip, connection)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst user = connection.user;\n\t\tconst format = Dex.formats.get(toID(team.format));\n\t\tif (format.effectType !== 'Format' || format.team) {\n\t\t\tconnection.popup(\"Invalid format:\\n\\n\" + team.format);\n\t\t\treturn null;\n\t\t}\n\t\tlet existing = null;\n\t\tif (isUpdate) {\n\t\t\texisting = await this.get(isUpdate);\n\t\t\tif (!existing) {\n\t\t\t\tconnection.popup(\"You're trying to edit a team that doesn't exist.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (context.user.id !== existing.ownerid) {\n\t\t\t\tconnection.popup(\"This is not your team.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tconst sets = Teams.import(team.packedTeam, true);\n\t\tif (!sets) {\n\t\t\tconnection.popup('Invalid team:\\n\\n' + team.packedTeam);\n\t\t\treturn null;\n\t\t}\n\t\tif (sets.length > 50) {\n\t\t\tconnection.popup(\"Your team has too many Pokemon (max 50).\");\n\t\t}\n\t\tlet unownWord = '';\n\t\tfor (const set of sets) {\n\t\t\tconst filtered = context.filter(set.name);\n\t\t\tif (filtered !== set.name) {\n\t\t\t\tconnection.popup(`Filtered words (${set.name}) are not allowed in nicknames.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Trim empty moveslots\n\t\t\tset.moves = set.moves.filter(Boolean);\n\n\t\t\tif (!Dex.species.get(set.species).exists) {\n\t\t\t\tconnection.popup(`Invalid Pokemon ${set.species} in team.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst speciesid = toID(set.species);\n\t\t\tif (speciesid.length <= 6 && speciesid.startsWith('unown')) {\n\t\t\t\tunownWord += speciesid.charAt(5) || 'a';\n\t\t\t}\n\t\t\tif (set.moves.length > 24) {\n\t\t\t\tconnection.popup(\"Only 24 moves are allowed per set.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (const m of set.moves) {\n\t\t\t\tif (!Dex.moves.get(m).exists) {\n\t\t\t\t\tconnection.popup(`Invalid move ${m} on ${set.species}.`);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// i have no idea how people are getting this, but we got enough reports that\n\t\t\t// i guess it's worth handling\n\t\t\tif (toID(set.ability) === 'none') {\n\t\t\t\tset.ability = 'No Ability';\n\t\t\t}\n\t\t\t// oms sometimes swap these around so just check them all\n\t\t\tconst strValid = (str: string) => [\n\t\t\t\tDex.abilities, Dex.moves, Dex.species, Dex.items, Dex.types, Dex.natures,\n\t\t\t].some(x => x.get(str).exists);\n\n\t\t\tif (set.ability && !strValid(set.ability)) {\n\t\t\t\tconnection.popup(`Invalid ability ${set.ability} on ${set.species}.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (set.item && !strValid(set.item)) {\n\t\t\t\tconnection.popup(`Invalid item ${set.item} on ${set.species}.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (set.nature && !strValid(set.nature)) {\n\t\t\t\tconnection.popup(`Invalid nature ${set.nature} on ${set.species}.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (set.teraType && !strValid(set.teraType)) {\n\t\t\t\tconnection.popup(`Invalid Tera Type ${set.teraType} on ${set.species}.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (unownWord) {\n\t\t\tconst filtered = Chat.nicknamefilter(unownWord, user);\n\t\t\tif (!filtered || filtered !== unownWord) {\n\t\t\t\tconnection.popup(\n\t\t\t\t\t`Your team was rejected for the following reason:\\n\\n` +\n\t\t\t\t\t`- Your Unowns spell out a banned word: ${unownWord.toUpperCase()}`\n\t\t\t\t);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (team.name) {\n\t\t\tif (team.name.length > 100) {\n\t\t\t\tconnection.popup(\"Your team's name is too long.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst filtered = context.filter(team.name);\n\t\t\tif (!filtered || filtered?.trim() !== team.name.trim()) {\n\t\t\t\tconnection.popup(`Your team's name has a filtered word.`);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tconst count = await this.count(user);\n\t\tif (count >= MAX_TEAMS) {\n\t\t\tconnection.popup(`You have too many teams stored. If you wish to upload this team, delete some first.`);\n\t\t\treturn null;\n\t\t}\n\t\t// eslint-disable-next-line require-atomic-updates\n\t\tteam.packedTeam = Teams.pack(sets);\n\t\tif (!team.packedTeam.trim()) { // extra sanity check\n\t\t\tconnection.popup(\"Invalid team provided.\");\n\t\t\treturn null;\n\t\t}\n\t\tteam.privacy ||= null;\n\t\tif (team.privacy === true) team.privacy = existing?.private || TeamsHandler.generatePassword();\n\t\t// the && existing doesn't really matter because we've verified it above, this is just for TS\n\t\tif (isUpdate && existing) {\n\t\t\tconst differenceExists = (\n\t\t\t\texisting.team !== team.packedTeam ||\n\t\t\t\t(team.name && team.name !== existing.title) ||\n\t\t\t\tformat.id !== existing.format ||\n\t\t\t\texisting.private !== team.privacy\n\t\t\t);\n\t\t\tif (!differenceExists) {\n\t\t\t\tconnection.popup(\"Your team was not saved as no changes were made.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tawait teamsTable.updateOne(\n\t\t\t\t{ team: team.packedTeam, title: team.name, private: team.privacy, format: format.id }\n\t\t\t)`WHERE teamid = ${isUpdate}`;\n\t\t\treturn { teamid: isUpdate, teamName: team.name, privacy: team.privacy };\n\t\t} else {\n\t\t\tconst exists = await teamsTable.selectOne()`WHERE ownerid = ${user.id} AND team = ${team.packedTeam}`;\n\t\t\tif (exists) {\n\t\t\t\tconnection.popup(\"You've already uploaded that team.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst loaded = await teamsTable.queryOne()`INSERT INTO teams (${{\n\t\t\t\townerid: user.id, team: team.packedTeam, date: new Date().toISOString(), format: format.id,\n\t\t\t\tviews: 0, title: team.name, private: team.privacy,\n\t\t\t}}) RETURNING teamid`;\n\t\t\treturn { teamid: loaded?.teamid, teamName: team.name, privacy: team.privacy };\n\t\t}\n\t}\n\tgeneratePassword(len = 20) {\n\t\tlet pw = '';\n\t\tfor (let i = 0; i < len; i++) pw += ALPHABET[crypto.randomInt(0, ALPHABET.length - 1)];\n\t\treturn pw;\n\t}\n\tupdateViews(teamid: string) {\n\t\treturn teamsTable.updateOne(SQL`views = views + 1`)`WHERE teamid = ${teamid}`;\n\t}\n\tlist(userid: ID, count: number, publicOnly = false) {\n\t\tconst publicOnlyQuery = publicOnly ? SQL`AND private IS NULL ` : SQL``;\n\t\treturn teamsTable.selectAll()`WHERE ownerid = ${userid} ${publicOnlyQuery} ORDER BY date DESC LIMIT ${count}`;\n\t}\n\tpreview(teamData: StoredTeam, user?: User | null, isFull = false) {\n\t\tlet buf = Utils.html`<strong>${teamData.title || `Untitled ${teamData.teamid}`}`;\n\t\tif (teamData.private) buf += ` (Private)`;\n\t\tbuf += `</strong><br />`;\n\t\tbuf += `<small>Uploaded by: <strong>${teamData.ownerid}</strong></small><br />`;\n\t\tbuf += `<small>Uploaded on: ${Chat.toTimestamp(teamData.date, { human: true })}</small><br />`;\n\t\tbuf += `<small>Format: ${Dex.formats.get(teamData.format).name}</small><br />`;\n\t\tbuf += `<small>Views: ${teamData.views === -1 ? 0 : teamData.views}</small>`;\n\t\tconst team = Teams.import(teamData.team);\n\t\tif (!team) {\n\t\t\tMonitor.crashlog(new Error(`Malformed team drawn from database`), 'A teams chat page', teamData);\n\t\t\tthrow new Chat.ErrorMessage(\"Oops! Something went wrong. Try again later.\");\n\t\t}\n\t\tlet link = `view-team-${teamData.teamid}`;\n\t\tif (teamData.private) {\n\t\t\tlink += `-${teamData.private}`;\n\t\t}\n\t\tbuf += `<br /><a class=\"subtle\" href=\"/${link}\">`;\n\t\tbuf += team.map(set => `<psicon pokemon=\"${set.species}\" />`).join(' ');\n\t\tbuf += `</a><br /><a href=\"/${link}\">${!isFull ? 'View full team' : 'Shareable link to team'}</a><br />`;\n\t\tconst url = `${teamData.teamid}${teamData.private ? `-${teamData.private}` : ''}`;\n\t\tbuf += ` <small>(you can also copy/paste <code>&lt;&lt;view-team-${url}&gt;&gt;</code> on-site `;\n\t\tconst fullUrl = `https://psim.us/t/${url}`;\n\t\tbuf += `or share <code><a href=\"${fullUrl}\">${fullUrl}</a></code> off-site!)</small>`;\n\n\t\tif (user && (teamData.ownerid === user.id || user.can('rangeban'))) {\n\t\t\tbuf += `<br />`;\n\t\t\tbuf += `<details class=\"readmore\"><summary>Manage (edit/delete/etc)</summary>`;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/teams setprivacy ${teamData.teamid},${teamData.private ? 'no' : 'yes'}\">`;\n\t\t\tbuf += teamData.private ? `Make public` : `Make private`;\n\t\t\tbuf += `</button><br />`;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/teams delete ${teamData.teamid}\">Delete team</button><br />`;\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j view-teams-edit-${teamData.teamid}\">Edit team</button>`;\n\t\t\tbuf += `</details>`;\n\t\t}\n\t\treturn buf;\n\t}\n\trenderTeam(teamData: StoredTeam, user?: User) {\n\t\tlet buf = this.preview(teamData, user, true);\n\t\tbuf += `<hr />`;\n\t\tconst team = Teams.unpack(teamData.team);\n\t\tif (!team) {\n\t\t\tMonitor.crashlog(new Error(\"Invalid team retrieved from database\"), \"A teams database request\", teamData);\n\t\t\tthrow new Chat.ErrorMessage(\"An error occurred with retrieving the team. Please try again later.\");\n\t\t}\n\t\tbuf += team.map(set => {\n\t\t\tlet teamBuf = Teams.exportSet(set, {\n\t\t\t\tremoveNicknames: name => this.isOMNickname(name),\n\t\t\t}).replace(/\\n/g, '<br />');\n\t\t\tif (set.name && set.name !== set.species) {\n\t\t\t\tteamBuf = teamBuf.replace(set.name, Utils.html`<psicon pokemon=\"${set.species}\" /> <br />${set.name}`);\n\t\t\t} else {\n\t\t\t\tteamBuf = teamBuf.replace(set.species, `<psicon pokemon=\"${set.species}\" /> <br />${set.species}`);\n\t\t\t}\n\t\t\tif (set.item) {\n\t\t\t\tconst tester = new RegExp(`${Utils.escapeRegex(set.item)}\\\\b`);\n\t\t\t\tteamBuf = teamBuf.replace(tester, `${set.item} <psicon item=\"${set.item}\" />`);\n\t\t\t}\n\t\t\treturn teamBuf;\n\t\t}).join('<hr />');\n\t\treturn buf;\n\t}\n\tvalidateAccess(conn: Connection, popup = false) {\n\t\tconst user = conn.user;\n\t\t// if there's no user, they've disconnected, so it's safe to just interrupt here\n\t\tif (!user) throw new Chat.Interruption();\n\t\tconst err = (message: string): never => {\n\t\t\tif (popup) {\n\t\t\t\tconn.popup(message);\n\t\t\t\tthrow new Chat.Interruption();\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(message);\n\t\t};\n\n\t\tif (!Config.usepostgres || !Config.usepostgresteams) {\n\t\t\terr(`The teams database is currently disabled.`);\n\t\t}\n\t\tif (user.locked || user.semilocked) err(\"You cannot use the teams database while locked.\");\n\t\tif (!user.autoconfirmed) err(\n\t\t\t`To use the teams database, you must be autoconfirmed, which means being registered for at least ` +\n\t\t\t`one week and winning one rated game.`\n\t\t);\n\t\tif (!Users.globalAuth.atLeast(user, Config.usepostgresteams)) {\n\t\t\terr(\"You cannot currently use the teams database.\");\n\t\t}\n\t}\n\tasync count(user: string | User) {\n\t\tconst id = toID(user);\n\t\tconst result = await teamsTable.queryOne<{ count: number }>(\n\t\t)`SELECT count(*) AS count FROM teams WHERE ownerid = ${id}`;\n\t\treturn result?.count || 0;\n\t}\n\tasync get(teamid: number | string): Promise<StoredTeam | null> {\n\t\tteamid = Number(teamid);\n\t\tif (isNaN(teamid)) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid team ID.`);\n\t\t}\n\t\tconst team = await teamsTable.get(teamid);\n\t\treturn team || null;\n\t}\n\tasync delete(id: string | number) {\n\t\tid = Number(id);\n\t\tif (isNaN(id)) {\n\t\t\tthrow new Chat.ErrorMessage(\"Invalid team ID\");\n\t\t}\n\t\tawait teamsTable.delete(id);\n\t}\n};\n\nexport const destroy = () => TeamsHandler.destroy();\n\nexport const commands: Chat.ChatCommands = {\n\tteams: {\n\t\tupload() {\n\t\t\treturn this.parse('/j view-teams-upload');\n\t\t},\n\t\tupdate: 'save',\n\t\tasync save(target, room, user, connection, cmd) {\n\t\t\tTeamsHandler.validateAccess(connection, true);\n\t\t\tconst isEdit = cmd === 'update';\n\t\t\tconst targets = Utils.splitFirst(target, ',', isEdit ? 4 : 3).map(x => x.trim());\n\t\t\tconst rawTeamID = isEdit ? targets.shift() : undefined;\n\t\t\tconst [teamName, formatid, isPrivate, rawTeam] = targets;\n\t\t\tconst teamID = isEdit ? Number(rawTeamID) : undefined;\n\t\t\tif (isEdit && (!rawTeamID?.length || isNaN(teamID!))) {\n\t\t\t\tconnection.popup(\"Invalid team ID provided.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst result = await TeamsHandler.save(\n\t\t\t\tthis, {\n\t\t\t\t\tname: toID(teamName) ? teamName : null,\n\t\t\t\t\tformat: toID(formatid),\n\t\t\t\t\tpackedTeam: rawTeam,\n\t\t\t\t\tprivacy: toID(isPrivate) === '1' ? true : null,\n\t\t\t\t}, teamID\n\t\t\t);\n\t\t\tif (!result) {\n\t\t\t\treturn; // error messages were thrown to the user\n\t\t\t}\n\n\t\t\tconst page = isEdit ? 'edit' : 'upload';\n\t\t\tif (result) {\n\t\t\t\tconnection.send(`|queryresponse|teamupload|` + JSON.stringify(result));\n\t\t\t\tconnection.send(`>view-teams-${page}\\n|deinit`);\n\t\t\t\tthis.parse(`/join view-teams-view-${result.teamid}`);\n\t\t\t} else {\n\t\t\t\tthis.parse(`/join view-teams-${page}`);\n\t\t\t}\n\t\t},\n\t\t''(target) {\n\t\t\treturn this.parse('/teams user ' + toID(target) || this.user.id);\n\t\t},\n\t\tlatest() {\n\t\t\treturn this.parse(`/j view-teams-filtered-latest`);\n\t\t},\n\t\tviews: 'mostviews',\n\t\tmostviews() {\n\t\t\treturn this.parse(`/j view-teams-filtered-views`);\n\t\t},\n\t\tuser: 'view',\n\t\tfor: 'view',\n\t\tview(target) {\n\t\t\tconst [name, rawNum] = target.split(',').map(toID);\n\t\t\tconst num = parseInt(rawNum);\n\t\t\tif (rawNum && isNaN(num)) {\n\t\t\t\treturn this.popupReply(`Invalid count.`);\n\t\t\t}\n\t\t\tlet page = 'view';\n\t\t\tswitch (this.cmd) {\n\t\t\tcase 'for': case 'user':\n\t\t\t\tpage = 'all';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn this.parse(`/j view-teams-${page}-${toID(name)}${num ? `-${num}` : ''}`);\n\t\t},\n\t\tasync delete(target, room, user, connection) {\n\t\t\tTeamsHandler.validateAccess(connection, true);\n\t\t\tconst teamid = Number(toID(target));\n\t\t\tif (isNaN(teamid)) return this.popupReply(`Invalid team ID.`);\n\t\t\tconst teamData = await TeamsHandler.get(teamid);\n\t\t\tif (!teamData) return this.popupReply(`Team not found.`);\n\t\t\tif (teamData.ownerid !== user.id && !user.can('rangeban')) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"You cannot delete teams you do not own.\");\n\t\t\t}\n\t\t\tawait TeamsHandler.delete(teamid);\n\t\t\tthis.popupReply(`Team ${teamid} deleted.`);\n\t\t\tfor (const page of connection.openPages || new Set()) {\n\t\t\t\tif (page.startsWith('teams-')) this.refreshPage(page);\n\t\t\t}\n\t\t},\n\t\tasync setprivacy(target, room, user, connection) {\n\t\t\tTeamsHandler.validateAccess(connection, true);\n\t\t\tconst [teamId, rawPrivacy] = target.split(',').map(toID);\n\t\t\tlet privacy: string | null;\n\t\t\tif (!teamId.length) {\n\t\t\t\treturn this.popupReply('Invalid team ID.');\n\t\t\t}\n\t\t\t// these if checks may seem bit redundant but we want to ensure the user is certain about this\n\t\t\t// if it might be invalid, we want them to know that\n\t\t\tif (this.meansYes(rawPrivacy)) {\n\t\t\t\tprivacy = TeamsHandler.generatePassword();\n\t\t\t} else if (this.meansNo(rawPrivacy)) {\n\t\t\t\tprivacy = null;\n\t\t\t} else {\n\t\t\t\treturn this.popupReply(`Invalid privacy setting.`);\n\t\t\t}\n\t\t\tconst team = await TeamsHandler.get(teamId);\n\t\t\tif (!team) return this.popupReply(`Team not found.`);\n\t\t\tif (team.ownerid !== user.id && !user.can('rangeban')) {\n\t\t\t\treturn this.popupReply(`You cannot change privacy for a team you don't own.`);\n\t\t\t}\n\t\t\tawait teamsTable.update(teamId, { private: privacy });\n\t\t\tfor (const pageid of this.connection.openPages || new Set()) {\n\t\t\t\tif (pageid.startsWith('teams-')) {\n\t\t\t\t\tthis.refreshPage(pageid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconnection.send(`|queryresponse|teamupdate|` + JSON.stringify({ teamid: teamId, privacy }));\n\t\t\treturn this.popupReply(privacy ? `Team set to private. Password: ${privacy}` : `Team set to public.`);\n\t\t},\n\t\tsearch(target, room, user) {\n\t\t\treturn this.parse(`/j view-teams-searchpersonal`);\n\t\t},\n\t\tbrowse(target, room, user) {\n\t\t\treturn this.parse(`/j view-teams-browse${target ? `-${target}` : ''}`);\n\t\t},\n\t\thelp() {\n\t\t\treturn this.parse('/help teams');\n\t\t},\n\t},\n\tteamshelp: [\n\t\t`/teams OR /teams for [user]- View the (public) teams of the given [user].`,\n\t\t`/teams upload - Open the page to upload a team.`,\n\t\t`/teams setprivacy [team id], [privacy] - Set the privacy of the team matching the [teamid].`,\n\t\t`/teams delete [team id] - Delete the team matching the [teamid].`,\n\t\t`/teams search - Opens the page to search your teams`,\n\t\t`/teams mostviews - Views public teams, sorted by most views.`,\n\t\t`/teams view [team ID] - View the team matching the given [team ID]`,\n\t\t`/teams browse - Opens a list of public teams uploaded by other users.`,\n\t],\n};\n\nexport const pages: Chat.PageTable = {\n\t// support view-team-${teamid}\n\tteam(query, user, connection) {\n\t\treturn ((pages.teams as Chat.PageTable).view as Chat.PageHandler).call(this, query, user, connection);\n\t},\n\tteams: {\n\t\tasync all(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection);\n\t\t\tconst targetUserid = toID(query.shift()) || user.id;\n\t\t\tlet count = Number(query.shift()) || 10;\n\t\t\tif (count > MAX_TEAMS) count = MAX_TEAMS;\n\t\t\tthis.title = `[Teams] ${targetUserid}`;\n\t\t\tconst teams = await TeamsHandler.list(targetUserid, count, user.id !== targetUserid);\n\t\t\tlet buf = `<div class=\"ladder pad\"><h2>${targetUserid}'s last ${Chat.count(count, \"teams\")}</h2>`;\n\t\t\tbuf += refresh(this);\n\t\t\tbuf += `<br /><a class=\"button\" href=\"/view-teams-searchpersonal\">Search your teams</a> `;\n\t\t\tbuf += `<a class=\"button\" href=\"/view-teams-searchpublic\">Browse public teams</a><br />`;\n\t\t\tif (targetUserid === user.id) {\n\t\t\t\tbuf += `<a class=\"button\" href=\"/view-teams-upload\">Upload new</a><br />`;\n\t\t\t}\n\t\t\tbuf += `See more at <a href=\"//teams.pokemonshowdown.com\">teams.pokemonshowdown.com!</a>`;\n\t\t\tbuf += `<hr />`;\n\t\t\tfor (const team of teams) {\n\t\t\t\tbuf += TeamsHandler.preview(team, user);\n\t\t\t\tbuf += `<hr />`;\n\t\t\t}\n\t\t\tconst total = await TeamsHandler.count(user.id);\n\t\t\tif (total > count) {\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j view-teams-all-${targetUserid}-${count + 20}\">View more</button>`;\n\t\t\t}\n\t\t\treturn buf;\n\t\t},\n\t\tasync filtered(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tconst type = query.shift() || \"\";\n\t\t\tTeamsHandler.validateAccess(connection);\n\t\t\tlet count = Number(query.shift()) || 50;\n\t\t\tif (count > MAX_TEAMS) count = MAX_TEAMS;\n\t\t\tlet teams: StoredTeam[] = [], title = '';\n\t\t\tconst buttons: { [k: string]: string } = {\n\t\t\t\tviews: `<button class=\"button\" name=\"send\" value=\"/teams mostviews\">Sort by most views</button>`,\n\t\t\t\tlatest: `<button class=\"button\" name=\"send\" value=\"/teams latest\">Sort by most recent upload</button>`,\n\t\t\t};\n\t\t\tswitch (type) {\n\t\t\tcase 'views':\n\t\t\t\tthis.title = `[Most Viewed Teams]`;\n\t\t\t\tteams = await teamsTable.selectAll()`WHERE private IS NULL ORDER BY views DESC LIMIT ${count}`;\n\t\t\t\ttitle = `Most viewed teams:`;\n\t\t\t\tdelete buttons.views;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.title = `[Latest Teams]`;\n\t\t\t\tteams = await teamsTable.selectAll()`WHERE private IS NULL ORDER BY date DESC LIMIT ${count}`;\n\t\t\t\ttitle = `Recently uploaded teams:`;\n\t\t\t\tdelete buttons.latest;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet buf = `<div class=\"ladder pad\"><h2>${title}</h2>${refresh(this)}`;\n\t\t\tbuf += Object.values(buttons).join('<br />');\n\t\t\tbuf += `<hr />`;\n\t\t\tbuf += teams.map(team => TeamsHandler.preview(team, user)).join('<hr />');\n\t\t\tbuf += `</div>`;\n\t\t\treturn buf;\n\t\t},\n\t\tasync view(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection);\n\t\t\tconst rawTeamid = toID(query.shift() || \"\");\n\t\t\tconst password = toID(query.shift());\n\t\t\tthis.title = `[View Team]`;\n\t\t\tconst teamid = Number(rawTeamid);\n\t\t\tif (isNaN(teamid)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid team ID.`);\n\t\t\t}\n\t\t\tconst team = await TeamsHandler.get(teamid);\n\t\t\tif (!team) {\n\t\t\t\tthis.title = `[Invalid Team]`;\n\t\t\t\tthrow new Chat.ErrorMessage(`No team with the ID ${teamid} was found.`);\n\t\t\t}\n\t\t\tif (team?.private && user.id !== team.ownerid && password !== team.private) {\n\t\t\t\tthis.title = `[Private Team]`;\n\t\t\t\tthrow new Chat.ErrorMessage(`That team is private.`);\n\t\t\t}\n\t\t\tthis.title = `[Team] ${team.teamid}`;\n\t\t\tif (user.id !== team.ownerid && team.views >= 0) {\n\t\t\t\tvoid TeamsHandler.updateViews(team.teamid);\n\t\t\t}\n\t\t\treturn `<div class=\"ladder pad\">` + TeamsHandler.renderTeam(team, user) + \"</div>\";\n\t\t},\n\t\tupload(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection);\n\t\t\tthis.title = `[Upload Team]`;\n\t\t\tlet buf = `<div class=\"ladder pad\"><h2>Upload a team</h2>${refresh(this)}<hr />`;\n\t\t\t// let [teamName, formatid, rawPrivacy, rawTeam] = Utils.splitFirst(target, ',', 4);\n\t\t\tbuf += `<form data-submitsend=\"/teams save {name},{format},{privacy},{team}\">`;\n\n\t\t\tbuf += `<strong>What's the name of the team?</strong><br />`;\n\t\t\tbuf += `<input name=\"name\" /><br />`;\n\n\t\t\tbuf += `<strong>What's the team's format?</strong><br />`;\n\t\t\tbuf += `<formatselect name=\"format\" format=\"gen${Dex.gen}ou\">[Gen ${Dex.gen} OU]</formatselect><br />`;\n\n\t\t\tbuf += `<strong>Should the team be private? (yes/no)</strong><br />`;\n\t\t\tbuf += `<select name=\"privacy\" /><option value=\"1\">Yes</option><option value=\"0\">No</option></select><br />`;\n\n\t\t\tbuf += `<strong>Provide the team:</strong><br />`;\n\t\t\tbuf += `<textarea style=\"width: 100%; height: 400px\" name=\"team\"></textarea><br />`;\n\n\t\t\tbuf += `<button class=\"button notifying\" type=\"submit\">Upload team</button>`;\n\t\t\tbuf += `</form></div>`;\n\t\t\treturn buf;\n\t\t},\n\t\tasync edit(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection);\n\t\t\tconst teamID = toID(query.shift() || \"\");\n\t\t\tif (!teamID.length) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid team ID.`);\n\t\t\t}\n\t\t\tthis.title = `[Edit Team] ${teamID}`;\n\t\t\tconst data = await TeamsHandler.get(teamID);\n\t\t\tif (!data) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Team ${teamID} not found.`);\n\t\t\t}\n\t\t\tlet buf = `<div class=\"ladder pad\"><h2>Edit team ${teamID}</h2>${refresh(this)}<hr />`;\n\t\t\t// let [teamName, formatid, rawPrivacy, rawTeam] = Utils.splitFirst(target, ',', 4);\n\t\t\tbuf += `<form data-submitsend=\"/teams update ${teamID},{name},{format},{privacy},{team}\">`;\n\n\t\t\tbuf += `<strong>Team name</strong><br />`;\n\t\t\tbuf += `<input name=\"name\" value=\"${data.title || `Untitled ${teamID}`}\" /><br />`;\n\n\t\t\tbuf += `<strong>Team format</strong><br />`;\n\t\t\tbuf += `<formatselect name=\"format\" format=\"${data.format}\">`;\n\t\t\tbuf += `${Dex.formats.get(data.format).name}</formatselect><br />`;\n\n\t\t\tbuf += `<strong>Team privacy</strong><br />`;\n\t\t\tconst privacy = ['1', '0'];\n\t\t\tif (!data.private) {\n\t\t\t\tprivacy.reverse(); // first option is the one shown by default so we gotta match it\n\t\t\t}\n\t\t\tbuf += `<select name=\"privacy\" />`;\n\t\t\tbuf += `${privacy.map(v => `<option value=\"${v}\">${Number(v) ? 'Yes' : 'No'}</option>`)}`;\n\t\t\tbuf += `</select><br />`;\n\n\t\t\tbuf += `<strong>Team:</strong><br />`;\n\t\t\tconst teamStr = Teams.export(Teams.import(data.team)!, {\n\t\t\t\tremoveNicknames: name => TeamsHandler.isOMNickname(name),\n\t\t\t}).replace(/\\n/g, '&#13;');\n\t\t\tbuf += `<textarea style=\"width: 100%; height: 400px\" name=\"team\">${teamStr}</textarea><br />`;\n\n\t\t\tbuf += `<button class=\"button notifying\" type=\"submit\">Upload team</button>`;\n\t\t\tbuf += `</form></div>`;\n\t\t\treturn buf;\n\t\t},\n\t\tasync searchpublic(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection, true);\n\t\t\tthis.title = '[Teams] Search';\n\t\t\tlet buf = '<div class=\"pad\">';\n\t\t\tbuf += refresh(this);\n\t\t\tbuf += '<h2 />Search all teams</h2>';\n\t\t\tconst type = this.pageid.split('-')[2];\n\t\t\tconst isPersonal = type === 'searchpersonal';\n\t\t\tquery = query.join('-').split('--');\n\t\t\tif (!query.map(toID).filter(Boolean).length || (isPersonal && query.length === 1)) {\n\t\t\t\tbuf += `<hr />`;\n\t\t\t\tbuf += `<form data-submitsend=\"/join view-teams-${type}-{owner}--{tier}--{pokemon}--{moves}--{ability}--{gen}\">`;\n\t\t\t\tbuf += `<strong>Search metadata:</strong><br />`;\n\t\t\t\tbuf += `<span style=\"display: ${isPersonal ? 'none' : \"\"}\">`;\n\t\t\t\tbuf += `<Team owner: <input name=\"owner\" /></span><br />`;\n\t\t\t\tbuf += `Team format: <formatselect name=\"tier\" format=\"gen${Dex.gen}ou\">[Gen ${Dex.gen}] OU</formatselect><br /><br />`;\n\t\t\t\tbuf += `<strong>Search in team:</strong> (separate different searches with commas)<br />`;\n\t\t\t\tbuf += `Generation: <input name=\"gen\" /><br />`;\n\t\t\t\tbuf += `Pokemon: <input name=\"pokemon\" /><br />`;\n\t\t\t\tbuf += `Abilities: <input name=\"ability\" /><br />`;\n\t\t\t\tbuf += `Moves: <input name=\"moves\" /><br /><br />`;\n\t\t\t\tbuf += `<button class=\"button notifying\" type=\"submit\">Search!</button>`;\n\t\t\t\treturn buf;\n\t\t\t}\n\t\t\tconst [rawOwner, rawFormat, rawPokemon, rawMoves, rawAbilities, rawGen] = query;\n\t\t\tconst owner = toID(rawOwner);\n\t\t\tif (owner.length > 18) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid owner name. Names must be under 18 characters long.`);\n\t\t\t}\n\t\t\tconst format = toID(rawFormat);\n\t\t\tif (format && !Dex.formats.get(format).exists) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Format ${format} not found.`);\n\t\t\t}\n\t\t\tconst gen = Number(rawGen);\n\t\t\tif (rawGen && (isNaN(gen) || (gen < 1 || gen > Dex.gen))) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid generation: '${rawGen}'`);\n\t\t\t}\n\n\t\t\tconst pokemon = rawPokemon?.split(',').map(toID).filter(Boolean);\n\t\t\tconst moves = rawMoves?.split(',').map(toID).filter(Boolean);\n\t\t\tconst abilities = rawAbilities?.split(',').map(toID).filter(Boolean);\n\n\t\t\tconst search = {\n\t\t\t\tpokemon, moves, format, owner, abilities, gen: gen || undefined,\n\t\t\t} as TeamSearch;\n\t\t\tconst results = await TeamsHandler.search(search, user, 50, isPersonal);\n\n\t\t\t// empty arrays will be falsy strings so this saves space\n\t\t\tbuf += `Search: ` + Object.entries(search)\n\t\t\t\t.filter(([, v]) => !!(v?.toString()))\n\t\t\t\t.map(([k, v]) => `${k.charAt(0).toUpperCase() + k.slice(1)}: ${v}`)\n\t\t\t\t.join(', ');\n\n\t\t\tbuf += `<hr />`;\n\t\t\tif (!results.length) {\n\t\t\t\tbuf += `<div class=\"message-error\">No results found.</div>`;\n\t\t\t\treturn buf;\n\t\t\t}\n\n\t\t\tbuf += results.map(t => TeamsHandler.preview(t, user)).join('<hr />');\n\t\t\treturn buf;\n\t\t},\n\t\tasync searchpersonal(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tthis.pageid = 'view-teams-searchpersonal';\n\n\t\t\treturn ((pages.teams as Chat.PageTable).searchpublic as import('../chat').PageHandler).call(\n\t\t\t\tthis, `${user.id}${query.join('-')}`.split('-'), user, connection\n\t\t\t);\n\t\t},\n\t\tasync browse(query, user, connection) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tTeamsHandler.validateAccess(connection, true);\n\t\t\tconst sorter = toID(query.shift()) || 'latest';\n\t\t\tlet count = Number(toID(query.shift())) || 50;\n\t\t\tif (count > MAX_SEARCH) {\n\t\t\t\tcount = MAX_SEARCH;\n\t\t\t}\n\t\t\tlet name = sorter;\n\t\t\tlet order;\n\t\t\tswitch (sorter) {\n\t\t\tcase 'views':\n\t\t\t\torder = SQL` ORDER BY views DESC `;\n\t\t\t\tname = 'most viewed';\n\t\t\t\tbreak;\n\t\t\tcase 'latest':\n\t\t\t\torder = SQL` ORDER BY date DESC`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid sort term '${sorter}'. Must be either 'views' or 'latest'.`);\n\t\t\t}\n\t\t\tlet buf = `<div class=\"pad\"><h2>Browse ${name} teams</h2>`;\n\t\t\tbuf += refresh(this);\n\t\t\tbuf += `<br /><a class=\"button\" href=\"/view-teams-searchpublic\">Search</a>`;\n\t\t\tconst opposite = sorter === 'views' ? 'latest' : 'views';\n\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j view-teams-browse-${opposite}-${count}\">Sort by ${opposite}</button>`;\n\t\t\tbuf += `<hr />`;\n\n\t\t\tconst results = await teamsTable.selectAll()`WHERE private IS NULL ${order} LIMIT ${count}`;\n\t\t\tif (!results.length) {\n\t\t\t\tbuf += `<div class=\"message-error\">None found.</div>`;\n\t\t\t\treturn buf;\n\t\t\t}\n\t\t\tfor (const team of results) {\n\t\t\t\tbuf += TeamsHandler.preview(team, user);\n\t\t\t\tbuf += `<hr />`;\n\t\t\t}\n\t\t\tif (count < MAX_SEARCH) {\n\t\t\t\tbuf += `<button class=\"button\" name=\"send\" value=\"/j view-teams-browse-${sorter}-${count + 20}\">View more</button>`;\n\t\t\t}\n\t\t\treturn buf;\n\t\t},\n\t},\n};\n\nprocess.nextTick(() => {\n\tChat.multiLinePattern.register('/teams save ', '/teams update ');\n});\n"],
  "mappings": "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",
  "names": []
}
